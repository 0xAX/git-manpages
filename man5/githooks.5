.\"     Title: githooks
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.73.2 <http://docbook.sf.net/>
.\"      Date: 02/14/2009
.\"    Manual: Git Manual
.\"    Source: Git 1.6.2.rc0.64.ge9cc0
.\"
.TH "GITHOOKS" "5" "02/14/2009" "Git 1\.6\.2\.rc0\.64\.ge9cc0" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
githooks - Hooks used by git
.SH "SYNOPSIS"
$GIT_DIR/hooks/*
.SH "DESCRIPTION"
Hooks are little scripts you can place in $GIT_DIR/hooks directory to trigger action at certain points\. When \fIgit\-init\fR is run, a handful of example hooks are copied into the hooks directory of the new repository, but by default they are all disabled\. To enable a hook, rename it by removing its \.sample suffix\.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
Note
It is also a requirement for a given hook to be executable\. However \- in a freshly initialized repository \- the \.sample files are executable by default\.


This document describes the currently defined hooks\.
.SH "APPLYPATCH-MSG"
This hook is invoked by \fIgit\-am\fR script\. It takes a single parameter, the name of the file that holds the proposed commit log message\. Exiting with non\-zero status causes \fIgit\-am\fR to abort before applying the patch\.

The hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format (if the project has one)\. It can also be used to refuse the commit after inspecting the message file\.

The default \fIapplypatch\-msg\fR hook, when enabled, runs the \fIcommit\-msg\fR hook, if the latter is enabled\.
.SH "PRE-APPLYPATCH"
This hook is invoked by \fIgit\-am\fR\. It takes no parameter, and is invoked after the patch is applied, but before a commit is made\.

If it exits with non\-zero status, then the working tree will not be committed after applying the patch\.

It can be used to inspect the current working tree and refuse to make a commit if it does not pass certain test\.

The default \fIpre\-applypatch\fR hook, when enabled, runs the \fIpre\-commit\fR hook, if the latter is enabled\.
.SH "POST-APPLYPATCH"
This hook is invoked by \fIgit\-am\fR\. It takes no parameter, and is invoked after the patch is applied and a commit is made\.

This hook is meant primarily for notification, and cannot affect the outcome of \fIgit\-am\fR\.
.SH "PRE-COMMIT"
This hook is invoked by \fIgit\-commit\fR, and can be bypassed with \-\-no\-verify option\. It takes no parameter, and is invoked before obtaining the proposed commit log message and making a commit\. Exiting with non\-zero status from this script causes the \fIgit\-commit\fR to abort\.

The default \fIpre\-commit\fR hook, when enabled, catches introduction of lines with trailing whitespaces and aborts the commit when such a line is found\.

All the \fIgit\-commit\fR hooks are invoked with the environment variable GIT_EDITOR=: if the command will not bring up an editor to modify the commit message\.
.SH "PREPARE-COMMIT-MSG"
This hook is invoked by \fIgit\-commit\fR right after preparing the default log message, and before the editor is started\.

It takes one to three parameters\. The first is the name of the file that contains the commit log message\. The second is the source of the commit message, and can be: message (if a \-m or \-F option was given); template (if a \-t option was given or the configuration option commit\.template is set); merge (if the commit is a merge or a \.git/MERGE_MSG file exists); squash (if a \.git/SQUASH_MSG file exists); or commit, followed by a commit SHA1 (if a \-c, \-C or \-\-amend option was given)\.

If the exit status is non\-zero, \fIgit\-commit\fR will abort\.

The purpose of the hook is to edit the message file in place, and it is not suppressed by the \-\-no\-verify option\. A non\-zero exit means a failure of the hook and aborts the commit\. It should not be used as replacement for pre\-commit hook\.

The sample prepare\-commit\-msg hook that comes with git comments out the Conflicts: part of a merge\'s commit message\.
.SH "COMMIT-MSG"
This hook is invoked by \fIgit\-commit\fR, and can be bypassed with \-\-no\-verify option\. It takes a single parameter, the name of the file that holds the proposed commit log message\. Exiting with non\-zero status causes the \fIgit\-commit\fR to abort\.

The hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format (if the project has one)\. It can also be used to refuse the commit after inspecting the message file\.

The default \fIcommit\-msg\fR hook, when enabled, detects duplicate "Signed\-off\-by" lines, and aborts the commit if one is found\.
.SH "POST-COMMIT"
This hook is invoked by \fIgit\-commit\fR\. It takes no parameter, and is invoked after a commit is made\.

This hook is meant primarily for notification, and cannot affect the outcome of \fIgit\-commit\fR\.
.SH "PRE-REBASE"
This hook is called by \fIgit\-rebase\fR and can be used to prevent a branch from getting rebased\.
.SH "POST-CHECKOUT"
This hook is invoked when a \fIgit\-checkout\fR is run after having updated the worktree\. The hook is given three parameters: the ref of the previous HEAD, the ref of the new HEAD (which may or may not have changed), and a flag indicating whether the checkout was a branch checkout (changing branches, flag=1) or a file checkout (retrieving a file from the index, flag=0)\. This hook cannot affect the outcome of \fIgit\-checkout\fR\.

This hook can be used to perform repository validity checks, auto\-display differences from the previous HEAD if different, or set working dir metadata properties\.
.SH "POST-MERGE"
This hook is invoked by \fIgit\-merge\fR, which happens when a \fIgit\-pull\fR is done on a local repository\. The hook takes a single parameter, a status flag specifying whether or not the merge being done was a squash merge\. This hook cannot affect the outcome of \fIgit\-merge\fR and is not executed, if the merge failed due to conflicts\.

This hook can be used in conjunction with a corresponding pre\-commit hook to save and restore any form of metadata associated with the working tree (eg: permissions/ownership, ACLS, etc)\. See contrib/hooks/setgitperms\.perl for an example of how to do this\.
.SH "PRE-RECEIVE"
This hook is invoked by \fIgit\-receive\-pack\fR on the remote repository, which happens when a \fIgit\-push\fR is done on a local repository\. Just before starting to update refs on the remote repository, the pre\-receive hook is invoked\. Its exit status determines the success or failure of the update\.

This hook executes once for the receive operation\. It takes no arguments, but for each ref to be updated it receives on standard input a line of the format:

.sp
.RS 4
.nf
<old\-value> SP <new\-value> SP <ref\-name> LF
.fi
.RE
where <old\-value> is the old object name stored in the ref, <new\-value> is the new object name to be stored in the ref and <ref\-name> is the full name of the ref\. When creating a new ref, <old\-value> is 40 0\.

If the hook exits with non\-zero status, none of the refs will be updated\. If the hook exits with zero, updating of individual refs can still be prevented by the \fIupdate\fR hook\.

Both standard output and standard error output are forwarded to \fIgit\-send\-pack\fR on the other end, so you can simply echo messages for the user\.
.SH "UPDATE"
This hook is invoked by \fIgit\-receive\-pack\fR on the remote repository, which happens when a \fIgit\-push\fR is done on a local repository\. Just before updating the ref on the remote repository, the update hook is invoked\. Its exit status determines the success or failure of the ref update\.

The hook executes once for each ref to be updated, and takes three parameters:

.sp
.RS 4
\h'-04'\(bu\h'+03'the name of the ref being updated,
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'the old object name stored in the ref,
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'and the new objectname to be stored in the ref\.
.RE
A zero exit from the update hook allows the ref to be updated\. Exiting with a non\-zero status prevents \fIgit\-receive\-pack\fR from updating that ref\.

This hook can be used to prevent \fIforced\fR update on certain refs by making sure that the object name is a commit object that is a descendant of the commit object named by the old object name\. That is, to enforce a "fast forward only" policy\.

It could also be used to log the old\.\.new status\. However, it does not know the entire set of branches, so it would end up firing one e\-mail per ref when used naively, though\. The \fIpost\-receive\fR hook is more suited to that\.

Another use suggested on the mailing list is to use this hook to implement access control which is finer grained than the one based on filesystem group\.

Both standard output and standard error output are forwarded to \fIgit\-send\-pack\fR on the other end, so you can simply echo messages for the user\.

The default \fIupdate\fR hook, when enabled\-\-and with hooks\.allowunannotated config option turned on\-\-prevents unannotated tags to be pushed\.
.SH "POST-RECEIVE"
This hook is invoked by \fIgit\-receive\-pack\fR on the remote repository, which happens when a \fIgit\-push\fR is done on a local repository\. It executes on the remote repository once after all the refs have been updated\.

This hook executes once for the receive operation\. It takes no arguments, but gets the same information as the \fIpre\-receive\fR hook does on its standard input\.

This hook does not affect the outcome of \fIgit\-receive\-pack\fR, as it is called after the real work is done\.

This supersedes the \fIpost\-update\fR hook in that it gets both old and new values of all the refs in addition to their names\.

Both standard output and standard error output are forwarded to \fIgit\-send\-pack\fR on the other end, so you can simply echo messages for the user\.

The default \fIpost\-receive\fR hook is empty, but there is a sample script post\-receive\-email provided in the contrib/hooks directory in git distribution, which implements sending commit emails\.
.SH "POST-UPDATE"
This hook is invoked by \fIgit\-receive\-pack\fR on the remote repository, which happens when a \fIgit\-push\fR is done on a local repository\. It executes on the remote repository once after all the refs have been updated\.

It takes a variable number of parameters, each of which is the name of ref that was actually updated\.

This hook is meant primarily for notification, and cannot affect the outcome of \fIgit\-receive\-pack\fR\.

The \fIpost\-update\fR hook can tell what are the heads that were pushed, but it does not know what their original and updated values are, so it is a poor place to do log old\.\.new\. The \fIpost\-receive\fR hook does get both original and updated values of the refs\. You might consider it instead if you need them\.

When enabled, the default \fIpost\-update\fR hook runs \fIgit\-update\-server\-info\fR to keep the information used by dumb transports (e\.g\., HTTP) up\-to\-date\. If you are publishing a git repository that is accessible via HTTP, you should probably enable this hook\.

Both standard output and standard error output are forwarded to \fIgit\-send\-pack\fR on the other end, so you can simply echo messages for the user\.
.SH "PRE-AUTO-GC"
This hook is invoked by \fIgit\-gc \-\-auto\fR\. It takes no parameter, and exiting with non\-zero status from this script causes the \fIgit\-gc \-\-auto\fR to abort\.
.SH "GIT"
Part of the \fBgit\fR(1) suite

