.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GITIGNORE" "5" "07/22/2007" "Git 1.5.3.rc2.29.gc4640" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
gitignore \- Specifies intentionally untracked files to ignore
.SH "SYNOPSIS"
$GIT_DIR/info/exclude, .gitignore
.SH "DESCRIPTION"
A gitignore file specifies intentionally untracked files that git should ignore. Each line in a gitignore file specifies a pattern.

When deciding whether to ignore a path, git normally checks gitignore patterns from multiple sources, with the following order of precedence, from highest to lowest (within one level of precedence, the last matching pattern decides the outcome):
.TP 3
\(bu
Patterns read from the command line for those commands that support them.
.TP
\(bu
Patterns read from a .gitignore file in the same directory as the path, or in any parent directory, with patterns in the higher level files (up to the root) being overriden by those in lower level files down to the directory containing the file. These patterns match relative to the location of the .gitignore file. A project normally includes such .gitignore files in its repository, containing patterns for files generated as part of the project build.
.TP
\(bu
Patterns read from $GIT_DIR/info/exclude.
.TP
\(bu
Patterns read from the file specified by the configuration variable \fIcore.excludesfile\fR.

The underlying git plumbing tools, such as \fBgit\-ls\-files\fR(1) and \fBgit\-read\-tree\fR(1), read gitignore patterns specified by command\-line options, or from files specified by command\-line options. Higher\-level git tools, such as \fBgit\-status\fR(1) and \fBgit\-add\fR(1), use patterns from the sources specified above.

Patterns have the following format:
.TP 3
\(bu
A blank line matches no files, so it can serve as a separator for readability.
.TP
\(bu
A line starting with # serves as a comment.
.TP
\(bu
An optional prefix \fI!\fR which negates the pattern; any matching file excluded by a previous pattern will become included again. If a negated pattern matches, this will override lower precedence patterns sources.
.TP
\(bu
If the pattern does not contain a slash \fI/\fR, git treats it as a shell glob pattern and checks for a match against the pathname without leading directories.
.TP
\(bu
Otherwise, git treats the pattern as a shell glob suitable for consumption by fnmatch(3) with the FNM_PATHNAME flag: wildcards in the pattern will not match a / in the pathname. For example, "Documentation/*.html" matches "Documentation/git.html" but not "Documentation/ppc/ppc.html". A leading slash matches the beginning of the pathname; for example, "/*.c" matches "cat\-file.c" but not "mozilla\-sha1/sha1.c".

An example:
.sp
.nf
.ft C
    $ git\-status
    [...]
    # Untracked files:
    [...]
    #       Documentation/foo.html
    #       Documentation/gitignore.html
    #       file.o
    #       lib.a
    #       src/internal.o
    [...]
    $ cat .git/info/exclude
    # ignore objects and archives, anywhere in the tree.
    *.[oa]
    $ cat Documentation/.gitignore
    # ignore generated html files,
    *.html
    # except foo.html which is maintained by hand
    !foo.html
    $ git\-status
    [...]
    # Untracked files:
    [...]
    #       Documentation/foo.html
    [...]
.ft

.fi
Another example:
.sp
.nf
.ft C
    $ cat .gitignore
    vmlinux*
    $ ls arch/foo/kernel/vm*
    arch/foo/kernel/vmlinux.lds.S
    $ echo '!/vmlinux*' >arch/foo/kernel/.gitignore
.ft

.fi
The second .gitignore prevents git from ignoring arch/foo/kernel/vmlinux.lds.S.
.SH "DOCUMENTATION"
Documentation by David Greaves, Junio C Hamano, Josh Triplett, Frank Lichtenheld, and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(7) suite

