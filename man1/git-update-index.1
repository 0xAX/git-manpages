.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "GIT-UPDATE-INDEX" 1 "" "" ""
.SH NAME
git-update-index \- Modifies the index or directory cache
.SH "SYNOPSIS"

.nf
\fIgit\-update\-index\fR
             [\-\-add] [\-\-remove | \-\-force\-remove] [\-\-replace]
             [\-\-refresh] [\-q] [\-\-unmerged] [\-\-ignore\-missing]
             [\-\-cacheinfo <mode> <object> <file>]*
             [\-\-chmod=(+|\-)x]
             [\-\-assume\-unchanged | \-\-no\-assume\-unchanged]
             [\-\-really\-refresh] [\-\-unresolve] [\-\-again]
             [\-\-info\-only] [\-\-index\-info]
             [\-z] [\-\-stdin]
             [\-\-verbose]
             [\-\-] [<file>]*
.fi

.SH "DESCRIPTION"


Modifies the index or directory cache\&. Each file mentioned is updated into the index and any \fIunmerged\fR or \fIneeds updating\fR state is cleared\&.


The way "git\-update\-index" handles files it is told about can be modified using the various options:

.SH "OPTIONS"

.TP
\-\-add
If a specified file isn't in the index already then it's added\&. Default behaviour is to ignore new files\&.

.TP
\-\-remove
If a specified file is in the index but is missing then it's removed\&. Default behaviour is to ignore removed file\&.

.TP
\-\-refresh
Looks at the current index and checks to see if merges or updates are needed by checking stat() information\&.

.TP
\-q
Quiet\&. If \-\-refresh finds that the index needs an update, the default behavior is to error out\&. This option makes git\-update\-index continue anyway\&.

.TP
\-\-unmerged
If \-\-refresh finds unmerged changes in the index, the default behavior is to error out\&. This option makes git\-update\-index continue anyway\&.

.TP
\-\-ignore\-missing
Ignores missing files during a \-\-refresh

.TP
\-\-cacheinfo <mode> <object> <path>
Directly insert the specified info into the index\&.

.TP
\-\-index\-info
Read index information from stdin\&.

.TP
\-\-chmod=(+|\-)x
Set the execute permissions on the updated files\&.

.TP
\-\-assume\-unchanged, \-\-no\-assume\-unchanged
When these flags are specified, the object name recorded for the paths are not updated\&. Instead, these options sets and unsets the "assume unchanged" bit for the paths\&. When the "assume unchanged" bit is on, git stops checking the working tree files for possible modifications, so you need to manually unset the bit to tell git when you change the working tree file\&. This is sometimes helpful when working with a big project on a filesystem that has very slow lstat(2) system call (e\&.g\&. cifs)\&.

.TP
\-\-again
Runs git\-update\-index itself on the paths whose index entries are different from those from the HEAD commit\&.

.TP
\-\-unresolve
Restores the \fIunmerged\fR or \fIneeds updating\fR state of a file during a merge if it was cleared by accident\&.

.TP
\-\-info\-only
Do not create objects in the object database for all <file> arguments that follow this flag; just insert their object IDs into the index\&.

.TP
\-\-force\-remove
Remove the file from the index even when the working directory still has such a file\&. (Implies \-\-remove\&.)

.TP
\-\-replace
By default, when a file path exists in the index, git\-update\-index refuses an attempt to add path/file\&. Similarly if a file path/file exists, a file path cannot be added\&. With \-\-replace flag, existing entries that conflicts with the entry being added are automatically removed with warning messages\&.

.TP
\-\-stdin
Instead of taking list of paths from the command line, read list of paths from the standard input\&. Paths are separated by LF (i\&.e\&. one path per line) by default\&.

.TP
\-\-verbose
Report what is being added and removed from index\&.

.TP
\-z
Only meaningful with \-\-stdin; paths are separated with NUL character instead of LF\&.

.TP
\-\-
Do not interpret any more arguments as options\&.

.TP
<file>
Files to act on\&. Note that files beginning with \fI\&.\fR are discarded\&. This includes \&./file and dir/\&./file\&. If you don't want this, then use cleaner names\&. The same applies to directories ending \fI/\fR and paths with \fI//\fR 

.SH "USING --REFRESH"


\fI\-\-refresh\fR does not calculate a new sha1 file or bring the index up\-to\-date for mode/content changes\&. But what it \fIdoes\fR do is to "re\-match" the stat information of a file with the index, so that you can refresh the index for a file that hasn't been changed but where the stat entry is out of date\&.


For example, you'd want to do this after doing a "git\-read\-tree", to link up the stat index details with the proper files\&.

.SH "USING --CACHEINFO OR --INFO-ONLY"


\fI\-\-cacheinfo\fR is used to register a file that is not in the current working directory\&. This is useful for minimum\-checkout merging\&.


To pretend you have a file with mode and sha1 at path, say:

.nf
$ git\-update\-index \-\-cacheinfo mode sha1 path
.fi


\fI\-\-info\-only\fR is used to register files without placing them in the object database\&. This is useful for status\-only repositories\&.


Both \fI\-\-cacheinfo\fR and \fI\-\-info\-only\fR behave similarly: the index is updated but the object database isn't\&. \fI\-\-cacheinfo\fR is useful when the object is in the database but the file isn't available locally\&. \fI\-\-info\-only\fR is useful when the file is available, but you do not wish to update the object database\&.

.SH "USING --INDEX-INFO"


\-\-index\-info is a more powerful mechanism that lets you feed multiple entry definitions from the standard input, and designed specifically for scripts\&. It can take inputs of three formats:

.TP 3
1.
mode SP sha1 TAB path

The first format is what "git\-apply \-\-index\-info" reports, and used to reconstruct a partial tree that is used for phony merge base tree when falling back on 3\-way merge\&.
.TP
2.
mode SP type SP sha1 TAB path

The second format is to stuff git\-ls\-tree output into the index file\&.
.TP
3.
mode SP sha1 SP stage TAB path

This format is to put higher order stages into the index file and matches git\-ls\-files \-\-stage output\&.
.LP


To place a higher stage entry to the index, the path should first be removed by feeding a mode=0 entry for the path, and then feeding necessary input lines in the third format\&.


For example, starting with this index:

.nf
$ git ls\-files \-s
100644 8a1218a1024a212bb3db30becd860315f9f3ac52 0       frotz
.fi


you can feed the following input to \-\-index\-info:

.nf
$ git update\-index \-\-index\-info
0 0000000000000000000000000000000000000000      frotz
100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1       frotz
100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2       frotz
.fi


The first line of the input feeds 0 as the mode to remove the path; the SHA1 does not matter as long as it is well formatted\&. Then the second and third line feeds stage 1 and stage 2 entries for that path\&. After the above, we would end up with this:

.nf
$ git ls\-files \-s
100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1       frotz
100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2       frotz
.fi

.SH "USING "ASSUME UNCHANGED" BIT"


Many operations in git depend on your filesystem to have an efficient lstat(2) implementation, so that st_mtime information for working tree files can be cheaply checked to see if the file contents have changed from the version recorded in the index file\&. Unfortunately, some filesystems have inefficient lstat(2)\&. If your filesystem is one of them, you can set "assume unchanged" bit to paths you have not changed to cause git not to do this check\&. Note that setting this bit on a path does not mean git will check the contents of the file to see if it has changed -- it makes git to omit any checking and assume it has \fInot\fR changed\&. When you make changes to working tree files, you have to explicitly tell git about it by dropping "assume unchanged" bit, either before or after you modify them\&.


In order to set "assume unchanged" bit, use \-\-assume\-unchanged option\&. To unset, use \-\-no\-assume\-unchanged\&.


The command looks at core\&.ignorestat configuration variable\&. When this is true, paths updated with git\-update\-index paths... and paths updated with other git commands that update both index and working tree (e\&.g\&. git\-apply \-\-index, git\-checkout\-index \-u, and git\-read\-tree \-u) are automatically marked as "assume unchanged"\&. Note that "assume unchanged" bit is \fInot\fR set if git\-update\-index \-\-refresh finds the working tree file matches the index (use git\-update\-index \-\-really\-refresh if you want to mark them as "assume unchanged")\&.

.SH "EXAMPLES"


To update and refresh only the files already checked out:

.nf
$ git\-checkout\-index \-n \-f \-a && git\-update\-index \-\-ignore\-missing \-\-refresh
.fi

.TP
On an inefficient filesystem with core\&.ignorestat set

.nf
$ git update\-index \-\-really\-refresh              \fB(1)\fR
$ git update\-index \-\-no\-assume\-unchanged foo\&.c   \fB(2)\fR
$ git diff \-\-name\-only                           \fB(3)\fR
$ edit foo\&.c
$ git diff \-\-name\-only                           \fB(4)\fR
M foo\&.c
$ git update\-index foo\&.c                         \fB(5)\fR
$ git diff \-\-name\-only                           \fB(6)\fR
$ edit foo\&.c
$ git diff \-\-name\-only                           \fB(7)\fR
$ git update\-index \-\-no\-assume\-unchanged foo\&.c   \fB(8)\fR
$ git diff \-\-name\-only                           \fB(9)\fR
M foo\&.c
.fi
.sp
\fB1. \fRforces lstat(2) to set "assume unchanged" bits for paths that match index\&.
.br
\fB2. \fRmark the path to be edited\&.
.br
\fB3. \fRthis does lstat(2) and finds index matches the path\&.
.br
\fB4. \fRthis does lstat(2) and finds index does \fInot\fR match the path\&.
.br
\fB5. \fRregistering the new version to index sets "assume unchanged" bit\&.
.br
\fB6. \fRand it is assumed unchanged\&.
.br
\fB7. \fReven after you edit it\&.
.br
\fB8. \fRyou can tell about the change after the fact\&.
.br
\fB9. \fRnow it checks with lstat(2) and finds it has been changed\&.
.br


.SH "CONFIGURATION"


The command honors core\&.filemode configuration variable\&. If your repository is on an filesystem whose executable bits are unreliable, this should be set to \fIfalse\fR (see \fBgit\-repo\-config\fR(1))\&. This causes the command to ignore differences in file modes recorded in the index and the file mode on the filesystem if they differ only on executable bit\&. On such an unfortunate filesystem, you may need to use git\-update\-index \-\-chmod=\&.


The command looks at core\&.ignorestat configuration variable\&. See \fIUsing "assume unchanged" bit\fR section above\&.

.SH "SEE ALSO"


\fBgit\-repo\-config\fR(1)

.SH "AUTHOR"


Written by Linus Torvalds <torvalds@osdl\&.org>

.SH "DOCUMENTATION"


Documentation by David Greaves, Junio C Hamano and the git\-list <git@vger\&.kernel\&.org>\&.

.SH "GIT"


Part of the \fBgit\fR(7) suite

