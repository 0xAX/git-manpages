.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-AM" "1" "06/06/2008" "Git 1.5.6.rc1.21.g03300" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-am \- Apply a series of patches from a mailbox
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-am\fR [\-\-signoff] [\-\-keep] [\-\-utf8 | \-\-no\-utf8]
         [\-\-3way] [\-\-interactive] [\-\-binary]
         [\-\-whitespace=<option>] [\-C<n>] [\-p<n>]
         <mbox>|<Maildir>\&...
\fIgit\-am\fR [\-\-skip | \-\-resolved]
.fi
.SH "DESCRIPTION"
Splits mail messages in a mailbox into commit log message, authorship information and patches, and applies them to the current branch.
.SH "OPTIONS"
.TP
<mbox>|<Maildir>\&...
The list of mailbox files to read patches from. If you do not supply this argument, reads from the standard input. If you supply directories, they'll be treated as Maildirs.
.TP
\-s, \-\-signoff
Add Signed\-off\-by: line to the commit message, using the committer identity of yourself.
.TP
\-k, \-\-keep
Pass \-k flag to git\-mailinfo (see \fBgit\-mailinfo\fR(1)).
.TP
\-u, \-\-utf8
Pass \-u flag to git\-mailinfo (see \fBgit\-mailinfo\fR(1)). The proposed commit log message taken from the e\-mail is re\-coded into UTF\-8 encoding (configuration variable i18n.commitencoding can be used to specify project's preferred encoding if it is not UTF\-8).

This was optional in prior versions of git, but now it is the default. You could use \-\-no\-utf8 to override this.
.TP
\-\-no\-utf8
Pass \-n flag to git\-mailinfo (see \fBgit\-mailinfo\fR(1)).
.TP
\-3, \-\-3way
When the patch does not apply cleanly, fall back on 3\-way merge, if the patch records the identity of blobs it is supposed to apply to, and we have those blobs available locally.
.TP
\-b, \-\-binary
Pass \-\-allow\-binary\-replacement flag to git\-apply (see \fBgit\-apply\fR(1)).
.TP
\-\-whitespace=<option>
This flag is passed to the git\-apply (see \fBgit\-apply\fR(1)) program that applies the patch.
.TP
\-C<n>, \-p<n>
These flags are passed to the git\-apply (see \fBgit\-apply\fR(1)) program that applies the patch.
.TP
\-i, \-\-interactive
Run interactively.
.TP
\-\-skip
Skip the current patch. This is only meaningful when restarting an aborted patch.
.TP
\-r, \-\-resolved
After a patch failure (e.g. attempting to apply conflicting patch), the user has applied it by hand and the index file stores the result of the application. Make a commit using the authorship and commit log extracted from the e\-mail message and the current index file, and continue.
.TP
\-\-resolvemsg=<msg>
When a patch failure occurs, <msg> will be printed to the screen before exiting. This overrides the standard message informing you to use \-\-resolved or \-\-skip to handle the failure. This is solely for internal use between git\-rebase and git\-am.
.SH "DISCUSSION"
The commit author name is taken from the "From: " line of the message, and commit author time is taken from the "Date: " line of the message. The "Subject: " line is used as the title of the commit, after stripping common prefix "[PATCH <anything>]". It is supposed to describe what the commit is about concisely as a one line text.

The body of the message (iow, after a blank line that terminates RFC2822 headers) can begin with "Subject: " and "From: " lines that are different from those of the mail header, to override the values of these fields.

The commit message is formed by the title taken from the "Subject: ", a blank line and the body of the message up to where the patch begins. Excess whitespaces at the end of the lines are automatically stripped.

The patch is expected to be inline, directly following the message. Any line that is of form:
.TP 3
\(bu
three\-dashes and end\-of\-line, or
.TP
\(bu
a line that begins with "diff \-", or
.TP
\(bu
a line that begins with "Index: "

is taken as the beginning of a patch, and the commit log message is terminated before the first occurrence of such a line.

When initially invoking it, you give it names of the mailboxes to crunch. Upon seeing the first patch that does not apply, it aborts in the middle,. You can recover from this in one of two ways:
.TP 3
1.
skip the current patch by re\-running the command with \fI\-\-skip\fR option.
.TP
2.
hand resolve the conflict in the working directory, and update the index file to bring it in a state that the patch should have produced. Then run the command with \fI\-\-resolved\fR option.

The command refuses to process new mailboxes while .dotest directory exists, so if you decide to start over from scratch, run rm \-f \-r .dotest before running the command with mailbox names.
.SH "SEE ALSO"
\fBgit\-apply\fR(1).
.SH "AUTHOR"
Written by Junio C Hamano <junkio@cox.net>
.SH "DOCUMENTATION"
Documentation by Petr Baudis, Junio C Hamano and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(1) suite

