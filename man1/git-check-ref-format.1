.\"     Title: git-check-ref-format
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.73.2 <http://docbook.sf.net/>
.\"      Date: 07/01/2009
.\"    Manual: Git Manual
.\"    Source: Git 1.6.3.1.145.gb74d77
.\"
.TH "GIT\-CHECK\-REF\-FOR" "1" "07/01/2009" "Git 1\.6\.3\.1\.145\.gb74d77" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git-check-ref-format - Ensures that a reference name is well formed
.SH "SYNOPSIS"
.sp
.RS 4
.nf
\fIgit check\-ref\-format\fR <refname>
\fIgit check\-ref\-format\fR [\-\-branch] <branchname\-shorthand>
.fi
.RE
.SH "DESCRIPTION"
Checks if a given \fIrefname\fR is acceptable, and exits with a non\-zero status if it is not\.
.sp
A reference is used in git to specify branches and tags\. A branch head is stored under the $GIT_DIR/refs/heads directory, and a tag is stored under the $GIT_DIR/refs/tags directory\. git imposes the following rules on how references are named:
.sp
.sp
.RS 4
\h'-04' 1.\h'+02'They can include slash
/
for hierarchical (directory) grouping, but no slash\-separated component can begin with a dot
\.\.
.RE
.sp
.RS 4
\h'-04' 2.\h'+02'They must contain at least one
/\. This enforces the presence of a category like
heads/,
tags/
etc\. but the actual names are not restricted\.
.RE
.sp
.RS 4
\h'-04' 3.\h'+02'They cannot have two consecutive dots
\.\.
anywhere\.
.RE
.sp
.RS 4
\h'-04' 4.\h'+02'They cannot have ASCII control characters (i\.e\. bytes whose values are lower than \e040, or \e177
DEL), space, tilde
~, caret
^, colon
:, question\-mark
?, asterisk
*, or open bracket
[
anywhere\.
.RE
.sp
.RS 4
\h'-04' 5.\h'+02'They cannot end with a slash
/
nor a dot
\.\.
.RE
.sp
.RS 4
\h'-04' 6.\h'+02'They cannot end with the sequence
\.lock\.
.RE
.sp
.RS 4
\h'-04' 7.\h'+02'They cannot contain a sequence
@{\.
.sp
.RS 4
\h'-04'\(bu\h'+03'They cannot contain a
\e\e\.
.RE
.RE
These rules make it easy for shell script based tools to parse reference names, pathname expansion by the shell when a reference name is used unquoted (by mistake), and also avoids ambiguities in certain reference name expressions (see \fBgit-rev-parse\fR(1)):
.sp
.sp
.RS 4
\h'-04' 1.\h'+02'A double\-dot
\.\.
is often used as in
ref1\.\.ref2, and in some contexts this notation means
^ref1 ref2
(i\.e\. not in
ref1
and in
ref2)\.
.RE
.sp
.RS 4
\h'-04' 2.\h'+02'A tilde
~
and caret
^
are used to introduce the postfix
\fInth parent\fR
and
\fIpeel onion\fR
operation\.
.RE
.sp
.RS 4
\h'-04' 3.\h'+02'A colon
:
is used as in
srcref:dstref
to mean "use srcref\'s value and store it in dstref" in fetch and push operations\. It may also be used to select a specific object such as with \'git\-cat\-file\': "git cat\-file blob v1\.3\.3:refs\.c"\.
.RE
.sp
.RS 4
\h'-04' 4.\h'+02'at\-open\-brace
@{
is used as a notation to access a reflog entry\.
.RE
With the \-\-branch option, it expands a branch name shorthand and prints the name of the branch the shorthand refers to\.
.sp
.SH "EXAMPLE"
.PP
git check\-ref\-format \-\-branch @{\-1}
.RS 4
Print the name of the previous branch\.
.RE
.SH "GIT"
Part of the \fBgit\fR(1) suite
.sp
