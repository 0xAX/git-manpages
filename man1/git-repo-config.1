.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "GIT-REPO-CONFIG" 1 "" "" ""
.SH NAME
git-repo-config \- Get and set options in .git/config
.SH "SYNOPSIS"

.nf
\fIgit\-repo\-config\fR [type] name [value [value_regex]]
\fIgit\-repo\-config\fR [type] \-\-replace\-all name [value [value_regex]]
\fIgit\-repo\-config\fR [type] \-\-get name [value_regex]
\fIgit\-repo\-config\fR [type] \-\-get\-all name [value_regex]
\fIgit\-repo\-config\fR [type] \-\-unset name [value_regex]
\fIgit\-repo\-config\fR [type] \-\-unset\-all name [value_regex]
\fIgit\-repo\-config\fR \-l | \-\-list
.fi

.SH "DESCRIPTION"


You can query/set/replace/unset options with this command\&. The name is actually the section and the key separated by a dot, and the value will be escaped\&.


If you want to set/unset an option which can occur on multiple lines, a POSIX regexp value_regex needs to be given\&. Only the existing values that match the regexp are updated or unset\&. If you want to handle the lines that do \fInot\fR match the regex, just prepend a single exclamation mark in front (see EXAMPLES)\&.


The type specifier can be either \fI\-\-int\fR or \fI\-\-bool\fR, which will make \fIgit\-repo\-config\fR ensure that the variable(s) are of the given type and convert the value to the canonical form (simple decimal number for int, a "true" or "false" string for bool)\&. If no type specifier is passed, no checks or transformations are performed on the value\&.


This command will fail if:

.TP 3
1.
The \&.git/config file is invalid,
.TP
2.
Can not write to \&.git/config,
.TP
3.
no section was provided,
.TP
4.
the section or key is invalid,
.TP
5.
you try to unset an option which does not exist, or
.TP
6.
you try to unset/set an option for which multiple lines match\&.
.LP

.SH "OPTIONS"

.TP
\-\-replace\-all
Default behavior is to replace at most one line\&. This replaces all lines matching the key (and optionally the value_regex)\&.

.TP
\-\-get
Get the value for a given key (optionally filtered by a regex matching the value)\&.

.TP
\-\-get\-all
Like get, but does not fail if the number of values for the key is not exactly one\&.

.TP
\-\-get\-regexp
Like \-\-get\-all, but interprets the name as a regular expression\&.

.TP
\-\-unset
Remove the line matching the key from \&.git/config\&.

.TP
\-\-unset\-all
Remove all matching lines from \&.git/config\&.

.TP
\-l, \-\-list
List all variables set in \&.git/config\&.

.SH "ENVIRONMENT"

.TP
GIT_CONFIG
Take the configuration from the given file instead of \&.git/config\&.

.TP
GIT_CONFIG_LOCAL
Currently the same as $GIT_CONFIG; when Git will support global configuration files, this will cause it to take the configuration from the global configuration file in addition to the given file\&.

.SH "EXAMPLE"


Given a \&.git/config like this:

.nf
#
# This is the config file, and
# a '#' or ';' character indicates
# a comment
#
.fi

.nf
; core variables
[core]
        ; Don't trust file modes
        filemode = false
.fi

.nf
; Our diff algorithm
[diff]
        external = "/usr/local/bin/gnu\-diff \-u"
        renames = true
.fi

.nf
; Proxy settings
[core]
        gitproxy="ssh" for "ssh://kernel\&.org/"
        gitproxy="proxy\-command" for kernel\&.org
        gitproxy="myprotocol\-command" for "my://"
        gitproxy=default\-proxy ; for all the rest
.fi


you can set the filemode to true with

.nf
% git repo\-config core\&.filemode true
.fi


The hypothetical proxy command entries actually have a postfix to discern what URL they apply to\&. Here is how to change the entry for kernel\&.org to "ssh"\&.

.nf
% git repo\-config core\&.gitproxy '"ssh" for kernel\&.org' 'for kernel\&.org$'
.fi


This makes sure that only the key/value pair for kernel\&.org is replaced\&.


To delete the entry for renames, do

.nf
% git repo\-config \-\-unset diff\&.renames
.fi


If you want to delete an entry for a multivar (like core\&.gitproxy above), you have to provide a regex matching the value of exactly one line\&.


To query the value for a given key, do

.nf
% git repo\-config \-\-get core\&.filemode
.fi


or

.nf
% git repo\-config core\&.filemode
.fi


or, to query a multivar:

.nf
% git repo\-config \-\-get core\&.gitproxy "for kernel\&.org$"
.fi


If you want to know all the values for a multivar, do:

.nf
% git repo\-config \-\-get\-all core\&.gitproxy
.fi


If you like to live dangerous, you can replace \fIall\fR core\&.gitproxy by a new one with

.nf
% git repo\-config \-\-replace\-all core\&.gitproxy ssh
.fi


However, if you really only want to replace the line for the default proxy, i\&.e\&. the one without a "for ..." postfix, do something like this:

.nf
% git repo\-config core\&.gitproxy ssh '! for '
.fi


To actually match only values with an exclamation mark, you have to

.nf
% git repo\-config section\&.key value '[!]'
.fi

.SH "CONFIGURATION FILE"


The git configuration file contains a number of variables that affect the git command's behavior\&. They can be used by both the git plumbing and the porcelains\&. The variables are divided into sections, where in the fully qualified variable name the variable itself is the last dot\-separated segment and the section name is everything before the last dot\&. The variable names are case\-insensitive and only alphanumeric characters are allowed\&. Some variables may appear multiple times\&.


The syntax is fairly flexible and permissive; whitespaces are mostly ignored\&. The \fI#\fR and \fI;\fR characters begin comments to the end of line, blank lines are ignored, lines containing strings enclosed in square brackets start sections and all the other lines are recognized as setting variables, in the form \fIname = value\fR\&. If there is no equal sign on the line, the entire line is taken as \fIname\fR and the variable is recognized as boolean "true"\&. String values may be entirely or partially enclosed in double quotes; some variables may require special value format\&.

.SS "Example"

.nf
# Core variables
[core]
        ; Don't trust file modes
        filemode = false
.fi

.nf
# Our diff algorithm
[diff]
        external = "/usr/local/bin/gnu\-diff \-u"
        renames = true
.fi

.SS "Variables"


Note that this list is non\-comprehensive and not necessarily complete\&. For command\-specific variables, you will find a more detailed description in the appropriate manual page\&. You will find a description of non\-core porcelain configuration variables in the respective porcelain documentation\&.

.TP
core\&.fileMode
If false, the executable bit differences between the index and the working copy are ignored; useful on broken filesystems like FAT\&. See \fBgit\-update\-index\fR(1)\&. True by default\&.

.TP
core\&.gitProxy
A "proxy command" to execute (as \fIcommand host port\fR) instead of establishing direct connection to the remote server when using the git protocol for fetching\&. If the variable value is in the "COMMAND for DOMAIN" format, the command is applied only on hostnames ending with the specified domain string\&. This variable may be set multiple times and is matched in the given order; the first match wins\&.

Can be overridden by the \fIGIT_PROXY_COMMAND\fR environment variable (which always applies universally, without the special "for" handling)\&.

.TP
core\&.ignoreStat
The working copy files are assumed to stay unchanged until you mark them otherwise manually \- Git will not detect the file changes by lstat() calls\&. This is useful on systems where those are very slow, such as Microsoft Windows\&. See \fBgit\-update\-index\fR(1)\&. False by default\&.

.TP
core\&.preferSymlinkRefs
Instead of the default "symref" format for HEAD and other symbolic reference files, use symbolic links\&. This is sometimes needed to work with old scripts that expect HEAD to be a symbolic link\&.

.TP
core\&.logAllRefUpdates
If true, git\-update\-ref will append a line to "$GIT_DIR/logs/<ref>" listing the new SHA1 and the date/time of the update\&. If the file does not exist it will be created automatically\&. This information can be used to determine what commit was the tip of a branch "2 days ago"\&. This value is false by default (no logging)\&.

.TP
core\&.repositoryFormatVersion
Internal variable identifying the repository format and layout version\&.

.TP
core\&.sharedRepository
When \fIgroup\fR (or \fItrue\fR), the repository is made shareable between several users in a group (making sure all the files and objects are group\-writable)\&. When \fIall\fR (or \fIworld\fR or \fIeverybody\fR), the repository will be readable by all users, additionally to being group\-shareable\&. When \fIumask\fR (or \fIfalse\fR), git will use permissions reported by umask(2)\&. See \fBgit\-init\-db\fR(1)\&. False by default\&.

.TP
core\&.warnAmbiguousRefs
If true, git will warn you if the ref name you passed it is ambiguous and might match multiple refs in the \&.git/refs/ tree\&. True by default\&.

.TP
core\&.compression
An integer \-1\&.\&.9, indicating the compression level for objects that are not in a pack file\&. \-1 is the zlib and git default\&. 0 means no compression, and 1\&.\&.9 are various speed/size tradeoffs, 9 being slowest\&.

.TP
core\&.legacyheaders
A boolean which enables the legacy object header format in case you want to interoperate with old clients accessing the object database directly (where the "http://" and "rsync://" protocols count as direct access)\&.

.TP
alias\&.*
Command aliases for the \fBgit\fR(1) command wrapper \- e\&.g\&. after defining "alias\&.last = cat\-file commit HEAD", the invocation "git last" is equivalent to "git cat\-file commit HEAD"\&. To avoid confusion and troubles with script usage, aliases that hide existing git commands are ignored\&. Arguments are split by spaces, the usual shell quoting and escaping is supported\&. quote pair and a backslash can be used to quote them\&.

.TP
apply\&.whitespace
Tells git\-apply how to handle whitespaces, in the same way as the \fI\-\-whitespace\fR option\&. See \fBgit\-apply\fR(1)\&.

.TP
pager\&.color
A boolean to enable/disable colored output when the pager is in use (default is true)\&.

.TP
diff\&.color
When true (or always), always use colors in patch\&. When false (or never), never\&. When set to auto, use colors only when the output is to the terminal\&.

.TP
diff\&.color\&.<slot>
Use customized color for diff colorization\&. <slot> specifies which part of the patch to use the specified color, and is one of plain (context text), meta (metainformation), frag (hunk header), old (removed lines), or new (added lines)\&. The value for these configuration variables can be one of: normal, bold, dim, ul, blink, reverse, reset, black, red, green, yellow, blue, magenta, cyan, or white\&.

.TP
diff\&.renameLimit
The number of files to consider when performing the copy/rename detection; equivalent to the git diff option \fI\-l\fR\&.

.TP
diff\&.renames
Tells git to detect renames\&. If set to any boolean value, it will enable basic rename detection\&. If set to "copies" or "copy", it will detect copies, as well\&.

.TP
format\&.headers
Additional email headers to include in a patch to be submitted by mail\&. See \fBgit\-format\-patch\fR(1)\&.

.TP
gitcvs\&.enabled
Whether the cvs pserver interface is enabled for this repository\&. See \fBgit\-cvsserver\fR(1)\&.

.TP
gitcvs\&.logfile
Path to a log file where the cvs pserver interface well... logs various stuff\&. See \fBgit\-cvsserver\fR(1)\&.

.TP
http\&.sslVerify
Whether to verify the SSL certificate when fetching or pushing over HTTPS\&. Can be overridden by the \fIGIT_SSL_NO_VERIFY\fR environment variable\&.

.TP
http\&.sslCert
File containing the SSL certificate when fetching or pushing over HTTPS\&. Can be overridden by the \fIGIT_SSL_CERT\fR environment variable\&.

.TP
http\&.sslKey
File containing the SSL private key when fetching or pushing over HTTPS\&. Can be overridden by the \fIGIT_SSL_KEY\fR environment variable\&.

.TP
http\&.sslCAInfo
File containing the certificates to verify the peer with when fetching or pushing over HTTPS\&. Can be overridden by the \fIGIT_SSL_CAINFO\fR environment variable\&.

.TP
http\&.sslCAPath
Path containing files with the CA certificates to verify the peer with when fetching or pushing over HTTPS\&. Can be overridden by the \fIGIT_SSL_CAPATH\fR environment variable\&.

.TP
http\&.maxRequests
How many HTTP requests to launch in parallel\&. Can be overridden by the \fIGIT_HTTP_MAX_REQUESTS\fR environment variable\&. Default is 5\&.

.TP
http\&.lowSpeedLimit, http\&.lowSpeedTime
If the HTTP transfer speed is less than \fIhttp\&.lowSpeedLimit\fR for longer than \fIhttp\&.lowSpeedTime\fR seconds, the transfer is aborted\&. Can be overridden by the \fIGIT_HTTP_LOW_SPEED_LIMIT\fR and \fIGIT_HTTP_LOW_SPEED_TIME\fR environment variables\&.

.TP
i18n\&.commitEncoding
Character encoding the commit messages are stored in; git itself does not care per se, but this information is necessary e\&.g\&. when importing commits from emails or in the gitk graphical history browser (and possibly at other places in the future or in other porcelains)\&. See e\&.g\&. \fBgit\-mailinfo\fR(1)\&. Defaults to \fIutf\-8\fR\&.

.TP
merge\&.summary
Whether to include summaries of merged commits in newly created merge commit messages\&. False by default\&.

.TP
pack\&.window
The size of the window used by \fBgit\-pack\-objects\fR(1) when no window size is given on the command line\&. Defaults to 10\&.

.TP
pull\&.octopus
The default merge strategy to use when pulling multiple branches at once\&.

.TP
pull\&.twohead
The default merge strategy to use when pulling a single branch\&.

.TP
show\&.difftree
The default \fBgit\-diff\-tree\fR(1) arguments to be used for \fBgit\-show\fR(1)\&.

.TP
showbranch\&.default
The default set of branches for \fBgit\-show\-branch\fR(1)\&. See \fBgit\-show\-branch\fR(1)\&.

.TP
tar\&.umask
By default, \fBgit\-tar\-tree\fR(1) sets file and directories modes to 0666 or 0777\&. While this is both useful and acceptable for projects such as the Linux Kernel, it might be excessive for other projects\&. With this variable, it becomes possible to tell \fBgit\-tar\-tree\fR(1) to apply a specific umask to the modes above\&. The special value "user" indicates that the user's current umask will be used\&. This should be enough for most projects, as it will lead to the same permissions as \fBgit\-checkout\fR(1) would use\&. The default value remains 0, which means world read\-write\&.

.TP
user\&.email
Your email address to be recorded in any newly created commits\&. Can be overridden by the \fIGIT_AUTHOR_EMAIL\fR and \fIGIT_COMMITTER_EMAIL\fR environment variables\&. See \fBgit\-commit\-tree\fR(1)\&.

.TP
user\&.name
Your full name to be recorded in any newly created commits\&. Can be overridden by the \fIGIT_AUTHOR_NAME\fR and \fIGIT_COMMITTER_NAME\fR environment variables\&. See \fBgit\-commit\-tree\fR(1)\&.

.TP
whatchanged\&.difftree
The default \fBgit\-diff\-tree\fR(1) arguments to be used for \fBgit\-whatchanged\fR(1)\&.

.TP
imap
The configuration variables in the \fIimap\fR section are described in \fBgit\-imap\-send\fR(1)\&.

.SH "AUTHOR"


Written by Johannes Schindelin <Johannes\&.Schindelin@gmx\&.de>

.SH "DOCUMENTATION"


Documentation by Johannes Schindelin, Petr Baudis and the git\-list <git@vger\&.kernel\&.org>\&.

.SH "GIT"


Part of the \fBgit\fR(7) suite

