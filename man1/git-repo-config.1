.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "GIT-REPO-CONFIG" 1 "" "" ""
.SH NAME
git-repo-config \- Get and set options in .git/config.
.SH "SYNOPSIS"


git\-repo\-config name [value [value_regex]] git\-repo\-config \-\-replace\-all name [value [value_regex]] git\-repo\-config \-\-get name [value_regex] git\-repo\-config \-\-get\-all name [value_regex] git\-repo\-config \-\-unset name [value_regex] git\-repo\-config \-\-unset\-all name [value_regex]

.SH "DESCRIPTION"


You can query/set/replace/unset options with this command\&. The name is actually the section and the key separated by a dot, and the value will be escaped\&.


If you want to set/unset an option which can occor on multiple lines, you should provide a POSIX regex for the value\&. If you want to handle the lines not matching the regex, just prepend a single exlamation mark in front (see EXAMPLES)\&.


This command will fail if

.TP 3
1.
\&.git/config is invalid,
.TP
2.
\&.git/config can not be written to,
.TP
3.
no section was provided,
.TP
4.
the section or key is invalid,
.TP
5.
you try to unset an option which does not exist, or
.TP
6.
you try to unset/set an option for which multiple lines match\&.
.LP

.SH "OPTIONS"

.TP
\-\-replace\-all
Default behaviour is to replace at most one line\&. This replaces all lines matching the key (and optionally the value_regex)

.TP
\-\-get
Get the value for a given key (optionally filtered by a regex matching the value)\&.

.TP
\-\-get\-all
Like get, but does not fail if the number of values for the key is not exactly one\&.

.TP
\-\-unset
Remove the line matching the key from \&.git/config\&.

.TP
\-\-unset\-all
Remove all matching lines from \&.git/config\&.

.SH "EXAMPLE"


Given a \&.git/config like this:

.nf
#
# This is the config file, and
# a '#' or ';' character indicates
# a comment
#
.fi

.nf
; core variables
[core]
        ; Don't trust file modes
        filemode = false
.fi

.nf
; Our diff algorithm
[diff]
        external = "/usr/local/bin/gnu\-diff \-u"
        renames = true
.fi

.nf
; Proxy settings
[proxy]
        command="ssh" for "ssh://kernel\&.org/"
        command="proxy\-command" for kernel\&.org
        command="myprotocol\-command" for "my://"
        command=default\-proxy ; for all the rest
.fi


you can set the filemode to true with

.IP
% git repo\-config core\&.filemode true

The hypothetic proxy command entries actually have a postfix to discern to what URL they apply\&. Here is how to change the entry for kernel\&.org to "ssh"\&.

.IP
% git repo\-config proxy\&.command '"ssh" for kernel\&.org' 'for kernel\&.org$'

This makes sure that only the key/value pair for kernel\&.org is replaced\&.


To delete the entry for renames, do

.IP
% git repo\-config \-\-unset diff\&.renames

If you want to delete an entry for a multivar (like proxy\&.command above), you have to provide a regex matching the value of exactly one line\&.


To query the value for a given key, do

.IP
% git repo\-config \-\-get core\&.filemode

or

.IP
% git repo\-config core\&.filemode

or, to query a multivar:

.IP
% git repo\-config \-\-get proxy\&.command "for kernel\&.org$"

If you want to know all the values for a multivar, do:

.IP
% git repo\-config \-\-get\-all proxy\&.command

If you like to live dangerous, you can replace all proxy\&.commands by a new one with

.IP
% git repo\-config \-\-replace\-all proxy\&.command ssh

However, if you really only want to replace the line for the default proxy, i\&.e\&. the one without a "for ..." postfix, do something like this:

.IP
% git repo\-config proxy\&.command ssh '! for '

To actually match only values with an exclamation mark, you have to

.IP
% git repo\-config section\&.key value '[!]'
.SH "AUTHOR"


Written by Johannes Schindelin <Johannes\&.Schindelin@gmx\&.de>

.SH "DOCUMENTATION"


Documentation by Johannes Schindelin\&.

.SH "GIT"


Part of the \fBgit\fR(7) suite

