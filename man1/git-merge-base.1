.\"     Title: git-merge-base
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.73.2 <http://docbook.sf.net/>
.\"      Date: 12/10/2008
.\"    Manual: Git Manual
.\"    Source: Git 1.6.1.rc2.14.g5363d
.\"
.TH "GIT\-MERGE\-BASE" "1" "12/10/2008" "Git 1\.6\.1\.rc2\.14\.g5363d" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git-merge-base - Find as good common ancestors as possible for a merge
.SH "SYNOPSIS"
\fIgit merge\-base\fR [\-\-all] <commit> <commit>\&...
.SH "DESCRIPTION"
\fIgit\-merge\-base\fR finds best common ancestor(s) between two commits to use in a three\-way merge\. One common ancestor is \fIbetter\fR than another common ancestor if the latter is an ancestor of the former\. A common ancestor that does not have any better common ancestor is a \fIbest common ancestor\fR, i\.e\. a \fImerge base\fR\. Note that there can be more than one merge base for a pair of commits\.

Among the two commits to compute the merge base from, one is specified by the first commit argument on the command line; the other commit is a (possibly hypothetical) commit that is a merge across all the remaining commits on the command line\. As the most common special case, specifying only two commits on the command line means computing the merge base between the given two commits\.
.SH "OPTIONS"
.PP
\-\-all
.RS 4
Output all merge bases for the commits, instead of just one\.
.RE
.SH "DISCUSSION"
Given two commits \fIA\fR and \fIB\fR, git merge\-base A B will output a commit which is reachable from both \fIA\fR and \fIB\fR through the parent relationship\.

For example, with this topology:

.sp
.RS 4
.nf
         o\-\-\-o\-\-\-o\-\-\-B
        /
\-\-\-o\-\-\-1\-\-\-o\-\-\-o\-\-\-o\-\-\-A
.fi
.RE
the merge base between \fIA\fR and \fIB\fR is \fI1\fR\.

Given three commits \fIA\fR, \fIB\fR and \fIC\fR, git merge\-base A B C will compute the merge base between \fIA\fR and a hypothetical commit \fIM\fR, which is a merge between \fIB\fR and \fIC\fR\. For example, with this topology:

.sp
.RS 4
.nf
       o\-\-\-o\-\-\-o\-\-\-o\-\-\-C
      /
     /   o\-\-\-o\-\-\-o\-\-\-B
    /   /
\-\-\-2\-\-\-1\-\-\-o\-\-\-o\-\-\-o\-\-\-A
.fi
.RE
the result of git merge\-base A B C is \fI1\fR\. This is because the equivalent topology with a merge commit \fIM\fR between \fIB\fR and \fIC\fR is:

.sp
.RS 4
.nf
       o\-\-\-o\-\-\-o\-\-\-o\-\-\-o
      /                 \e
     /   o\-\-\-o\-\-\-o\-\-\-o\-\-\-M
    /   /
\-\-\-2\-\-\-1\-\-\-o\-\-\-o\-\-\-o\-\-\-A
.fi
.RE
and the result of git merge\-base A M is \fI1\fR\. Commit \fI2\fR is also a common ancestor between \fIA\fR and \fIM\fR, but \fI1\fR is a better common ancestor, because \fI2\fR is an ancestor of \fI1\fR\. Hence, \fI2\fR is not a merge base\.

When the history involves criss\-cross merges, there can be more than one \fIbest\fR common ancestor for two commits\. For example, with this topology:

.sp
.RS 4
.nf
\-\-\-1\-\-\-o\-\-\-A
    \e /
     X
    / \e
\-\-\-2\-\-\-o\-\-\-o\-\-\-B
.fi
.RE
both \fI1\fR and \fI2\fR are merge\-bases of A and B\. Neither one is better than the other (both are \fIbest\fR merge bases)\. When the \-\-all option is not given, it is unspecified which best one is output\.
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl\.org>
.SH "DOCUMENTATION"
Documentation by David Greaves, Junio C Hamano and the git\-list <git@vger\.kernel\.org>\.
.SH "GIT"
Part of the \fBgit\fR(1) suite

