.\"     Title: git-add
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.73.2 <http://docbook.sf.net/>
.\"      Date: 04/02/2009
.\"    Manual: Git Manual
.\"    Source: Git 1.6.2.77.g8cc3f
.\"
.TH "GIT\-ADD" "1" "04/02/2009" "Git 1\.6\.2\.77\.g8cc3f" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git-add - Add file contents to the index
.SH "SYNOPSIS"
.sp
.RS 4
.nf
\fIgit add\fR [\-n] [\-v] [\-\-force | \-f] [\-\-interactive | \-i] [\-\-patch | \-p]
          [\-\-all | [\-\-update | \-u]] [\-\-intent\-to\-add | \-N]
          [\-\-refresh] [\-\-ignore\-errors] [\-\-] <filepattern>\&...
.fi
.RE
.SH "DESCRIPTION"
This command adds the current content of new or modified files to the index, thus staging that content for inclusion in the next commit\.
.sp
The "index" holds a snapshot of the content of the working tree, and it is this snapshot that is taken as the contents of the next commit\. Thus after making any changes to the working directory, and before running the commit command, you must use the \fIadd\fR command to add any new or modified files to the index\.
.sp
This command can be performed multiple times before a commit\. It only adds the content of the specified file(s) at the time the add command is run; if you want subsequent changes included in the next commit, then you must run \fIgit add\fR again to add the new content to the index\.
.sp
The \fIgit status\fR command can be used to obtain a summary of which files have changes that are staged for the next commit\.
.sp
The \fIgit add\fR command will not add ignored files by default\. If any ignored files were explicitly specified on the command line, \fIgit add\fR will fail with a list of ignored files\. Ignored files reached by directory recursion or filename globbing performed by Git (quote your globs before the shell) will be silently ignored\. The \fIadd\fR command can be used to add ignored files with the \-f (force) option\.
.sp
Please see \fBgit-commit\fR(1) for alternative ways to add content to a commit\.
.sp
.SH "OPTIONS"
.PP
<filepattern>\&...
.RS 4
Files to add content from\. Fileglobs (e\.g\.
*\.c) can be given to add all matching files\. Also a leading directory name (e\.g\.
dir
to add
dir/file1
and
dir/file2) can be given to add all files in the directory, recursively\.
.RE
.PP
\-n, \-\-dry\-run
.RS 4
Don\'t actually add the file(s), just show if they exist\.
.RE
.PP
\-v, \-\-verbose
.RS 4
Be verbose\.
.RE
.PP
\-f, \-\-force
.RS 4
Allow adding otherwise ignored files\.
.RE
.PP
\-i, \-\-interactive
.RS 4
Add modified contents in the working tree interactively to the index\. Optional path arguments may be supplied to limit operation to a subset of the working tree\. See \(lqInteractive mode\(rq for details\.
.RE
.PP
\-p, \-\-patch
.RS 4
Similar to Interactive mode but the initial command loop is bypassed and the
\fIpatch\fR
subcommand is invoked using each of the specified filepatterns before exiting\.
.RE
.PP
\-u, \-\-update
.RS 4
Update only files that git already knows about, staging modified content for commit and marking deleted files for removal\. This is similar to what "git commit \-a" does in preparation for making a commit, except that the update is limited to paths specified on the command line\. If no paths are specified, all tracked files in the current directory and its subdirectories are updated\.
.RE
.PP
\-A, \-\-all
.RS 4
Update files that git already knows about (same as
\fI\-\-update\fR) and add all untracked files that are not ignored by
\fI\.gitignore\fR
mechanism\.
.RE
.PP
\-N, \-\-intent\-to\-add
.RS 4
Record only the fact that the path will be added later\. An entry for the path is placed in the index with no content\. This is useful for, among other things, showing the unstaged content of such files with
\fIgit diff\fR
and committing them with
\fIgit commit \-a\fR\.
.RE
.PP
\-\-refresh
.RS 4
Don\'t add the file(s), but only refresh their stat() information in the index\.
.RE
.PP
\-\-ignore\-errors
.RS 4
If some files could not be added because of errors indexing them, do not abort the operation, but continue adding the others\. The command shall still exit with non\-zero status\.
.RE
.PP
\-\-
.RS 4
This option can be used to separate command\-line options from the list of files, (useful when filenames might be mistaken for command\-line options)\.
.RE
.SH "CONFIGURATION"
The optional configuration variable \fIcore\.excludesfile\fR indicates a path to a file containing patterns of file names to exclude from git\-add, similar to $GIT_DIR/info/exclude\. Patterns in the exclude file are used in addition to those in info/exclude\. See \fBgitrepository-layout\fR(5)\.
.sp
.SH "EXAMPLES"
.sp
.RS 4
\h'-04'\(bu\h'+03'Adds content from all
*\.txt
files under
Documentation
directory and its subdirectories:
.sp
.RS 4
.nf

\.ft C
$ git add Documentation/\e\e*\.txt
\.ft

.fi
.RE
Note that the asterisk
*
is quoted from the shell in this example; this lets the command include the files from subdirectories of
Documentation/
directory\.
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'Considers adding content from all git\-*\.sh scripts:
.sp
.RS 4
.nf

\.ft C
$ git add git\-*\.sh
\.ft

.fi
.RE
Because this example lets the shell expand the asterisk (i\.e\. you are listing the files explicitly), it does not consider
subdir/git\-foo\.sh\.
.RE
.SH "INTERACTIVE MODE"
When the command enters the interactive mode, it shows the output of the \fIstatus\fR subcommand, and then goes into its interactive command loop\.
.sp
The command loop shows the list of subcommands available, and gives a prompt "What now> "\. In general, when the prompt ends with a single \fI>\fR, you can pick only one of the choices given and type return, like this:
.sp
.sp
.RS 4
.nf

\.ft C
    *** Commands ***
      1: status       2: update       3: revert       4: add untracked
      5: patch        6: diff         7: quit         8: help
    What now> 1
\.ft

.fi
.RE
You also could say "s" or "sta" or "status" above as long as the choice is unique\.
.sp
The main command loop has 6 subcommands (plus help and quit)\.
.PP
status
.RS 4
This shows the change between HEAD and index (i\.e\. what will be committed if you say "git commit"), and between index and working tree files (i\.e\. what you could stage further before "git commit" using "git\-add") for each path\. A sample output looks like this:
.sp
.RS 4
.nf

\.ft C
              staged     unstaged path
     1:       binary      nothing foo\.png
     2:     +403/\-35        +1/\-1 git\-add\-\-interactive\.perl
\.ft

.fi
.RE
It shows that foo\.png has differences from HEAD (but that is binary so line count cannot be shown) and there is no difference between indexed copy and the working tree version (if the working tree version were also different,
\fIbinary\fR
would have been shown in place of
\fInothing\fR)\. The other file, git\-add\-\-interactive\.perl, has 403 lines added and 35 lines deleted if you commit what is in the index, but working tree file has further modifications (one addition and one deletion)\.
.RE
.PP
update
.RS 4
This shows the status information and issues an "Update>>" prompt\. When the prompt ends with double
\fI>>\fR, you can make more than one selection, concatenated with whitespace or comma\. Also you can say ranges\. E\.g\. "2\-5 7,9" to choose 2,3,4,5,7,9 from the list\. If the second number in a range is omitted, all remaining patches are taken\. E\.g\. "7\-" to choose 7,8,9 from the list\. You can say
\fI*\fR
to choose everything\.
.sp
What you chose are then highlighted with
\fI*\fR, like this:
.sp
.RS 4
.nf

\.ft C
           staged     unstaged path
  1:       binary      nothing foo\.png
* 2:     +403/\-35        +1/\-1 git\-add\-\-interactive\.perl
\.ft

.fi
.RE
To remove selection, prefix the input with
\-
like this:
.sp
.RS 4
.nf

\.ft C
Update>> \-2
\.ft

.fi
.RE
After making the selection, answer with an empty line to stage the contents of working tree files for selected paths in the index\.
.RE
.PP
revert
.RS 4
This has a very similar UI to
\fIupdate\fR, and the staged information for selected paths are reverted to that of the HEAD version\. Reverting new paths makes them untracked\.
.RE
.PP
add untracked
.RS 4
This has a very similar UI to
\fIupdate\fR
and
\fIrevert\fR, and lets you add untracked paths to the index\.
.RE
.PP
patch
.RS 4
This lets you choose one path out of a
\fIstatus\fR
like selection\. After choosing the path, it presents the diff between the index and the working tree file and asks you if you want to stage the change of each hunk\. You can say:
.sp
.RS 4
.nf
y \- stage this hunk
n \- do not stage this hunk
a \- stage this and all the remaining hunks in the file
d \- do not stage this hunk nor any of the remaining hunks in the file
j \- leave this hunk undecided, see next undecided hunk
J \- leave this hunk undecided, see next hunk
k \- leave this hunk undecided, see previous undecided hunk
K \- leave this hunk undecided, see previous hunk
s \- split the current hunk into smaller hunks
e \- manually edit the current hunk
? \- print help
.fi
.RE
After deciding the fate for all hunks, if there is any hunk that was chosen, the index is updated with the selected hunks\.
.RE
.PP
diff
.RS 4
This lets you review what will be committed (i\.e\. between HEAD and index)\.
.RE
.SH "SEE ALSO"
\fBgit-status\fR(1) \fBgit-rm\fR(1) \fBgit-reset\fR(1) \fBgit-mv\fR(1) \fBgit-commit\fR(1) \fBgit-update-index\fR(1)
.sp
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl\.org>
.sp
.SH "DOCUMENTATION"
Documentation by Junio C Hamano and the git\-list <git@vger\.kernel\.org>\.
.sp
.SH "GIT"
Part of the \fBgit\fR(1) suite
.sp
