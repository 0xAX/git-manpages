.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-ADD" "1" "08/29/2007" "Git 1.5.3.rc7" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-add \- Add file contents to the index
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-add\fR [\-n] [\-v] [\-f] [\-\-interactive | \-i] [\-u] [\-\-refresh]
          [\-\-] <filepattern>\&...
.fi
.SH "DESCRIPTION"
This command adds the current content of new or modified files to the index, thus staging that content for inclusion in the next commit.

The "index" holds a snapshot of the content of the working tree, and it is this snapshot that is taken as the contents of the next commit. Thus after making any changes to the working directory, and before running the commit command, you must use the \fIadd\fR command to add any new or modified files to the index.

This command can be performed multiple times before a commit. It only adds the content of the specified file(s) at the time the add command is run; if you want subsequent changes included in the next commit, then you must run \fIgit add\fR again to add the new content to the index.

The \fIgit status\fR command can be used to obtain a summary of which files have changes that are staged for the next commit.

The \fIgit add\fR command will not add ignored files by default. If any ignored files were explicitly specified on the command line, \fIgit add\fR will fail with a list of ignored files. Ignored files reached by directory recursion or filename globbing performed by Git (quote your globs before the shell) will be silently ignored. The \fIadd\fR command can be used to add ignored files with the \-f (force) option.

Please see \fBgit\-commit\fR(1) for alternative ways to add content to a commit.
.SH "OPTIONS"
.TP
<filepattern>\&...
Files to add content from. Fileglobs (e.g. *.c) can be given to add all matching files. Also a leading directory name (e.g. dir to add dir/file1 and dir/file2) can be given to add all files in the directory, recursively.
.TP
\-n
Don't actually add the file(s), just show if they exist.
.TP
\-v
Be verbose.
.TP
\-f
Allow adding otherwise ignored files.
.TP
\-i, \-\-interactive
Add modified contents in the working tree interactively to the index.
.TP
\-u
Update only files that git already knows about. This is similar to what "git commit \-a" does in preparation for making a commit, except that the update is limited to paths specified on the command line. If no paths are specified, all tracked files are updated.
.TP
\-\-refresh
Don't add the file(s), but only refresh their stat() information in the index.
.TP
\-\-
This option can be used to separate command\-line options from the list of files, (useful when filenames might be mistaken for command\-line options).
.SH "CONFIGURATION"
The optional configuration variable \fIcore.excludesfile\fR indicates a path to a file containing patterns of file names to exclude from git\-add, similar to $GIT_DIR/info/exclude. Patterns in the exclude file are used in addition to those in info/exclude. See [1]\&\fIrepository layout\fR.
.SH "EXAMPLES"
.TP
git\-add Documentation/\\*.txt
Adds content from all *.txt files under Documentation directory and its subdirectories.

Note that the asterisk * is quoted from the shell in this example; this lets the command to include the files from subdirectories of Documentation/ directory.
.TP
git\-add git\-*.sh
Considers adding content from all git\-*.sh scripts. Because this example lets shell expand the asterisk (i.e. you are listing the files explicitly), it does not consider subdir/git\-foo.sh.
.SH "INTERACTIVE MODE"
When the command enters the interactive mode, it shows the output of the \fIstatus\fR subcommand, and then goes into its interactive command loop.

The command loop shows the list of subcommands available, and gives a prompt "What now> ". In general, when the prompt ends with a single \fI>\fR, you can pick only one of the choices given and type return, like this:
.sp
.nf
.ft C
    *** Commands ***
      1: status       2: update       3: revert       4: add untracked
      5: patch        6: diff         7: quit         8: help
    What now> 1
.ft

.fi
You also could say "s" or "sta" or "status" above as long as the choice is unique.

The main command loop has 6 subcommands (plus help and quit).
.TP
status
This shows the change between HEAD and index (i.e. what will be committed if you say "git commit"), and between index and working tree files (i.e. what you could stage further before "git commit" using "git\-add") for each path. A sample output looks like this:
.sp
.nf
.ft C
              staged     unstaged path
     1:       binary      nothing foo.png
     2:     +403/\-35        +1/\-1 git\-add\-\-interactive.perl
.ft

.fi
It shows that foo.png has differences from HEAD (but that is binary so line count cannot be shown) and there is no difference between indexed copy and the working tree version (if the working tree version were also different, \fIbinary\fR would have been shown in place of \fInothing\fR). The other file, git\-add\-\-interactive.perl, has 403 lines added and 35 lines deleted if you commit what is in the index, but working tree file has further modifications (one addition and one deletion).
.TP
update
This shows the status information and gives prompt "Update>>". When the prompt ends with double \fI>>\fR, you can make more than one selection, concatenated with whitespace or comma. Also you can say ranges. E.g. "2\-5 7,9" to choose 2,3,4,5,7,9 from the list. You can say \fI*\fR to choose everything.

What you chose are then highlighted with \fI*\fR, like this:
.sp
.nf
.ft C
           staged     unstaged path
  1:       binary      nothing foo.png
* 2:     +403/\-35        +1/\-1 git\-add\-\-interactive.perl
.ft

.fi
To remove selection, prefix the input with \- like this:
.sp
.nf
.ft C
Update>> \-2
.ft

.fi
After making the selection, answer with an empty line to stage the contents of working tree files for selected paths in the index.
.TP
revert
This has a very similar UI to \fIupdate\fR, and the staged information for selected paths are reverted to that of the HEAD version. Reverting new paths makes them untracked.
.TP
add untracked
This has a very similar UI to \fIupdate\fR and \fIrevert\fR, and lets you add untracked paths to the index.
.TP
patch
This lets you choose one path out of \fIstatus\fR like selection. After choosing the path, it presents diff between the index and the working tree file and asks you if you want to stage the change of each hunk. You can say:
.sp
.nf
y \- add the change from that hunk to index
n \- do not add the change from that hunk to index
a \- add the change from that hunk and all the rest to index
d \- do not the change from that hunk nor any of the rest to index
j \- do not decide on this hunk now, and view the next
    undecided hunk
J \- do not decide on this hunk now, and view the next hunk
k \- do not decide on this hunk now, and view the previous
    undecided hunk
K \- do not decide on this hunk now, and view the previous hunk
.fi
After deciding the fate for all hunks, if there is any hunk that was chosen, the index is updated with the selected hunks.
.TP
diff
This lets you review what will be committed (i.e. between HEAD and index).
.SH "SEE ALSO"
\fBgit\-status\fR(1) \fBgit\-rm\fR(1) \fBgit\-mv\fR(1) \fBgit\-commit\fR(1) \fBgit\-update\-index\fR(1)
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl.org>
.SH "DOCUMENTATION"
Documentation by Junio C Hamano and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(7) suite
.SH "REFERENCES"
.TP 3
1.\ repository layout
\%repository\-layout.html
