.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-BLAME" "1" "06/08/2008" "Git 1.5.6.rc2.15.g457bb" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-blame \- Show what revision and author last modified each line of a file
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-blame\fR [\-c] [\-b] [\-l] [\-\-root] [\-t] [\-f] [\-n] [\-s] [\-p] [\-w] [\-\-incremental] [\-L n,m]
            [\-S <revs\-file>] [\-M] [\-C] [\-C] [\-\-since=<date>]
            [<rev> | \-\-contents <file>] [\-\-] <file>
.fi
.SH "DESCRIPTION"
Annotates each line in the given file with information from the revision which last modified the line. Optionally, start annotating from the given revision.

Also it can limit the range of lines annotated.

This report doesn't tell you anything about lines which have been deleted or replaced; you need to use a tool such as \fBgit\-diff\fR(1) or the "pickaxe" interface briefly mentioned in the following paragraph.

Apart from supporting file annotation, git also supports searching the development history for when a code snippet occurred in a change. This makes it possible to track when a code snippet was added to a file, moved or copied between files, and eventually deleted or replaced. It works by searching for a text string in the diff. A small example:
.sp
.nf
.ft C
$ git log \-\-pretty=oneline \-S'blame_usage'
5040f17eba15504bad66b14a645bddd9b015ebb7 blame \-S <ancestry\-file>
ea4c7f9bf69e781dd0cd88d2bccb2bf5cc15c9a7 git\-blame: Make the output
.ft

.fi
.SH "OPTIONS"
.TP
\-b
Show blank SHA\-1 for boundary commits. This can also be controlled via the blame.blankboundary config option.
.TP
\-\-root
Do not treat root commits as boundaries. This can also be controlled via the blame.showroot config option.
.TP
\-\-show\-stats
Include additional statistics at the end of blame output.
.TP
\-L <start>,<end>
Annotate only the given line range. <start> and <end> can take one of these forms:
.RS
.TP 3
\(bu
number

If <start> or <end> is a number, it specifies an absolute line number (lines count from 1).
.TP
\(bu
/regex/

This form will use the first line matching the given POSIX regex. If <end> is a regex, it will search starting at the line given by <start>.
.TP
\(bu
+offset or \-offset

This is only valid for <end> and will specify a number of lines before or after the line given by <start>.
.RE
.TP
\-l
Show long rev (Default: off).
.TP
\-t
Show raw timestamp (Default: off).
.TP
\-S <revs\-file>
Use revs from revs\-file instead of calling \fBgit\-rev\-list\fR(1).
.TP
\-p , \-\-porcelain
Show in a format designed for machine consumption.
.TP
\-\-incremental
Show the result incrementally in a format designed for machine consumption.
.TP
\-\-contents <file>
When <rev> is not specified, the command annotates the changes starting backwards from the working tree copy. This flag makes the command pretend as if the working tree copy has the contents of the named file (specify \- to make the command read from the standard input).
.TP
\-M|<num>|
Detect moving lines in the file as well. When a commit moves a block of lines in a file (e.g. the original file has A and then B, and the commit changes it to B and then A), traditional \fIblame\fR algorithm typically blames the lines that were moved up (i.e. B) to the parent and assigns blame to the lines that were moved down (i.e. A) to the child commit. With this option, both groups of lines are blamed on the parent.

<num> is optional but it is the lower bound on the number of alphanumeric characters that git must detect as moving within a file for it to associate those lines with the parent commit.
.TP
\-C|<num>|
In addition to \-M, detect lines copied from other files that were modified in the same commit. This is useful when you reorganize your program and move code around across files. When this option is given twice, the command looks for copies from all other files in the parent for the commit that creates the file in addition.

<num> is optional but it is the lower bound on the number of alphanumeric characters that git must detect as moving between files for it to associate those lines with the parent commit.
.TP
\-h , \-\-help
Show help message.
.TP
\-c
Use the same output mode as \fBgit\-annotate\fR(1) (Default: off).
.TP
\-\-score\-debug
Include debugging information related to the movement of lines between files (see \-C) and lines moved within a file (see \-M). The first number listed is the score. This is the number of alphanumeric characters detected to be moved between or within files. This must be above a certain threshold for git\-blame to consider those lines of code to have been moved.
.TP
\-f , \-\-show\-name
Show filename in the original commit. By default filename is shown if there is any line that came from a file with different name, due to rename detection.
.TP
\-n , \-\-show\-number
Show line number in the original commit (Default: off).
.TP
\-s
Suppress author name and timestamp from the output.
.TP
\-w
Ignore whitespace when comparing parent's version and child's to find where the lines came from.
.SH "THE PORCELAIN FORMAT"
In this format, each line is output after a header; the header at the minimum has the first line which has:
.TP 3
\(bu
40\-byte SHA\-1 of the commit the line is attributed to;
.TP
\(bu
the line number of the line in the original file;
.TP
\(bu
the line number of the line in the final file;
.TP
\(bu
on a line that starts a group of line from a different commit than the previous one, the number of lines in this group. On subsequent lines this field is absent.

This header line is followed by the following information at least once for each commit:
.TP 3
\(bu
author name ("author"), email ("author\-mail"), time ("author\-time"), and timezone ("author\-tz"); similarly for committer.
.TP
\(bu
filename in the commit the line is attributed to.
.TP
\(bu
the first line of the commit log message ("summary").

The contents of the actual line is output after the above header, prefixed by a TAB. This is to allow adding more header elements later.
.SH "SPECIFYING RANGES"
Unlike git\-blame and git\-annotate in older git, the extent of annotation can be limited to both line ranges and revision ranges. When you are interested in finding the origin for ll. 40\-60 for file foo, you can use \-L option like these (they mean the same thing \(em both ask for 21 lines starting at line 40):
.sp
.nf
git blame \-L 40,60 foo
git blame \-L 40,+21 foo
.fi
Also you can use regular expression to specify the line range.
.sp
.nf
git blame \-L '/^sub hello {/,/^}$/' foo
.fi
would limit the annotation to the body of hello subroutine.

When you are not interested in changes older than the version v2.6.18, or changes older than 3 weeks, you can use revision range specifiers similar to git\-rev\-list:
.sp
.nf
git blame v2.6.18.. \-\- foo
git blame \-\-since=3.weeks \-\- foo
.fi
When revision range specifiers are used to limit the annotation, lines that have not changed since the range boundary (either the commit v2.6.18 or the most recent commit that is more than 3 weeks old in the above example) are blamed for that range boundary commit.

A particularly useful way is to see if an added file have lines created by copy\-and\-paste from existing files. Sometimes this indicates that the developer was being sloppy and did not refactor the code properly. You can first find the commit that introduced the file with:
.sp
.nf
git log \-\-diff\-filter=A \-\-pretty=short \-\- foo
.fi
and then annotate the change between the commit and its parents, using commit^! notation:
.sp
.nf
git blame \-C \-C \-f $commit^! \-\- foo
.fi
.SH "INCREMENTAL OUTPUT"
When called with \-\-incremental option, the command outputs the result as it is built. The output generally will talk about lines touched by more recent commits first (i.e. the lines will be annotated out of order) and is meant to be used by interactive viewers.

The output format is similar to the Porcelain format, but it does not contain the actual lines from the file that is being annotated.
.TP 3
1.
Each blame entry always starts with a line of:
.sp
.nf
<40\-byte hex sha1> <sourceline> <resultline> <num_lines>
.fi
Line numbers count from 1.
.TP
2.
The first time that commit shows up in the stream, it has various other information about it printed out with a one\-word tag at the beginning of each line about that "extended commit info" (author, email, committer, dates, summary etc).
.TP
3.
Unlike Porcelain format, the filename information is always given and terminates the entry:
.sp
.nf
"filename" <whitespace\-quoted\-filename\-goes\-here>
.fi
and thus it's really quite easy to parse for some line\- and word\-oriented parser (which should be quite natural for most scripting languages).
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBNote\fR
For people who do parsing: to make it more robust, just ignore any lines in between the first and last one ("<sha1>" and "filename" lines) where you don't recognize the tag\-words (or care about that particular one) at the beginning of the "extended information" lines. That way, if there is ever added information (like the commit encoding or extended commit commentary), a blame viewer won't ever care.
.SH "SEE ALSO"
\fBgit\-annotate\fR(1)
.SH "AUTHOR"
Written by Junio C Hamano <junkio@cox.net>
.SH "GIT"
Part of the \fBgit\fR(1) suite

