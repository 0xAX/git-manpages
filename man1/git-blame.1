.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-BLAME" "1" "01/17/2007" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-blame \- Show what revision and author last modified each line of a file
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-blame\fR [\-c] [\-l] [\-t] [\-f] [\-n] [\-p] [\-L n,m] [\-S <revs\-file>]
            [\-M] [\-C] [\-C] [\-\-since=<date>] [<rev>] [\-\-] <file>
.fi
.SH "DESCRIPTION"
Annotates each line in the given file with information from the revision which last modified the line. Optionally, start annotating from the given revision.

Also it can limit the range of lines annotated.

This report doesn't tell you anything about lines which have been deleted or replaced; you need to use a tool such as \fBgit\-diff\fR(1) or the "pickaxe" interface briefly mentioned in the following paragraph.

Apart from supporting file annotation, git also supports searching the development history for when a code snippet occurred in a change. This makes it possible to track when a code snippet was added to a file, moved or copied between files, and eventually deleted or replaced. It works by searching for a text string in the diff. A small example:
.sp
.nf
$ git log \-\-pretty=oneline \-S'blame_usage'
5040f17eba15504bad66b14a645bddd9b015ebb7 blame \-S <ancestry\-file>
ea4c7f9bf69e781dd0cd88d2bccb2bf5cc15c9a7 git\-blame: Make the output
.fi
.SH "OPTIONS"
.TP
\-c, \-\-compatibility
Use the same output mode as \fBgit\-annotate\fR(1) (Default: off).
.TP
\-L n,m
Annotate only the specified line range (lines count from 1).
.TP
\-l, \-\-long
Show long rev (Default: off).
.TP
\-t, \-\-time
Show raw timestamp (Default: off).
.TP
\-S, \-\-rev\-file <revs\-file>
Use revs from revs\-file instead of calling \fBgit\-rev\-list\fR(1).
.TP
\-f, \-\-show\-name
Show filename in the original commit. By default filename is shown if there is any line that came from a file with different name, due to rename detection.
.TP
\-n, \-\-show\-number
Show line number in the original commit (Default: off).
.TP
\-p, \-\-porcelain
Show in a format designed for machine consumption.
.TP
\-M
Detect moving lines in the file as well. When a commit moves a block of lines in a file (e.g. the original file has A and then B, and the commit changes it to B and then A), traditional \fIblame\fR algorithm typically blames the lines that were moved up (i.e. B) to the parent and assigns blame to the lines that were moved down (i.e. A) to the child commit. With this option, both groups of lines are blamed on the parent.
.TP
\-C
In addition to \-M, detect lines copied from other files that were modified in the same commit. This is useful when you reorganize your program and move code around across files. When this option is given twice, the command looks for copies from all other files in the parent for the commit that creates the file in addition.
.TP
\-h, \-\-help
Show help message.
.SH "THE PORCELAIN FORMAT"
In this format, each line is output after a header; the header at the minimum has the first line which has:
.TP 3
\(bu
40\-byte SHA\-1 of the commit the line is attributed to;
.TP
\(bu
the line number of the line in the original file;
.TP
\(bu
the line number of the line in the final file;
.TP
\(bu
on a line that starts a group of line from a different commit than the previous one, the number of lines in this group. On subsequent lines this field is absent.

This header line is followed by the following information at least once for each commit:
.TP 3
\(bu
author name ("author"), email ("author\-mail"), time ("author\-time"), and timezone ("author\-tz"); similarly for committer.
.TP
\(bu
filename in the commit the line is attributed to.
.TP
\(bu
the first line of the commit log message ("summary").

The contents of the actual line is output after the above header, prefixed by a TAB. This is to allow adding more header elements later.
.SH "SPECIFYING RANGES"
Unlike git\-blame and git\-annotate in older git, the extent of annotation can be limited to both line ranges and revision ranges. When you are interested in finding the origin for ll. 40\-60 for file foo, you can use \-L option like this:
.sp
.nf
git blame \-L 40,60 foo
.fi
Also you can use regular expression to specify the line range.
.sp
.nf
git blame \-L '/^sub hello {/,/^}$/' foo
.fi
would limit the annotation to the body of hello subroutine.

When you are not interested in changes older than the version v2.6.18, or changes older than 3 weeks, you can use revision range specifiers similar to git\-rev\-list:
.sp
.nf
git blame v2.6.18.. \-\- foo
git blame \-\-since=3.weeks \-\- foo
.fi
When revision range specifiers are used to limit the annotation, lines that have not changed since the range boundary (either the commit v2.6.18 or the most recent commit that is more than 3 weeks old in the above example) are blamed for that range boundary commit.

A particularly useful way is to see if an added file have lines created by copy\-and\-paste from existing files. Sometimes this indicates that the developer was being sloppy and did not refactor the code properly. You can first find the commit that introduced the file with:
.sp
.nf
git log \-\-diff\-filter=A \-\-pretty=short \-\- foo
.fi
and then annotate the change between the commit and its parents, using commit^! notation:
.sp
.nf
git blame \-C \-C \-f $commit^! \-\- foo
.fi
.SH "SEE ALSO"
\fBgit\-annotate\fR(1)
.SH "AUTHOR"
Written by Junio C Hamano <junkio@cox.net>
.SH "GIT"
Part of the \fBgit\fR(7) suite

