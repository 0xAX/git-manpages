.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-BLAME" "1" "10/25/2006" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-blame \- Show what revision and author last modified each line of a file
.SH "SYNOPSIS"
\fIgit\-blame\fR [\-c] [\-l] [\-t] [\-f] [\-n] [\-p] [\-S <revs\-file>] [\-\-] <file> [<rev>]
.sp
.SH "DESCRIPTION"
Annotates each line in the given file with information from the revision which last modified the line. Optionally, start annotating from the given revision.
.sp
This report doesn't tell you anything about lines which have been deleted or replaced; you need to use a tool such as \fBgit\-diff\fR(1) or the "pickaxe" interface briefly mentioned in the following paragraph.
.sp
Apart from supporting file annotation, git also supports searching the development history for when a code snippet occured in a change. This makes it possible to track when a code snippet was added to a file, moved or copied between files, and eventually deleted or replaced. It works by searching for a text string in the diff. A small example:
.sp
.sp
.nf
$ git log \-\-pretty=oneline \-S'blame_usage'
5040f17eba15504bad66b14a645bddd9b015ebb7 blame \-S <ancestry\-file>
ea4c7f9bf69e781dd0cd88d2bccb2bf5cc15c9a7 git\-blame: Make the output
.fi
.SH "OPTIONS"
.TP
\-c, \-\-compatibility
Use the same output mode as
\fBgit\-annotate\fR(1)
(Default: off).
.TP
\-l, \-\-long
Show long rev (Default: off).
.TP
\-t, \-\-time
Show raw timestamp (Default: off).
.TP
\-S, \-\-rev\-file <revs\-file>
Use revs from revs\-file instead of calling
\fBgit\-rev\-list\fR(1).
.TP
\-f, \-\-show\-name
Show filename in the original commit. By default filename is shown if there is any line that came from a file with different name, due to rename detection.
.TP
\-n, \-\-show\-number
Show line number in the original commit (Default: off).
.TP
\-p, \-\-porcelain
Show in a format designed for machine consumption.
.TP
\-h, \-\-help
Show help message.
.SH "THE PORCELAIN FORMAT"
In this format, each line is output after a header; the header at the minumum has the first line which has:
.sp
.TP 3
\(bu
40\-byte SHA\-1 of the commit the line is attributed to;
.TP
\(bu
the line number of the line in the original file;
.TP
\(bu
the line number of the line in the final file;
.TP
\(bu
on a line that starts a group of line from a different commit than the previous one, the number of lines in this group. On subsequent lines this field is absent.
This header line is followed by the following information at least once for each commit:
.sp
.TP 3
\(bu
author name ("author"), email ("author\-mail"), time ("author\-time"), and timezone ("author\-tz"); similarly for committer.
.TP
\(bu
filename in the commit the line is attributed to.
.TP
\(bu
the first line of the commit log message ("summary").
The contents of the actual line is output after the above header, prefixed by a TAB. This is to allow adding more header elements later.
.sp
.SH "SEE ALSO"
\fBgit\-annotate\fR(1)
.sp
.SH "AUTHOR"
Written by Fredrik Kuivinen <freku045@student.liu.se>.
.sp
.SH "GIT"
Part of the \fBgit\fR(7) suite
.sp
