.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "GIT-NAME-REV" 1 "" "" ""
.SH NAME
git-name-rev \- Find symbolic names for given revs
.SH "SYNOPSIS"


\fIgit\-name\-rev\fR [\-\-tags] ( \-\-all | \-\-stdin | <commitish>... )

.SH "DESCRIPTION"


Finds symbolic names suitable for human digestion for revisions given in any format parsable by git\-rev\-parse\&.

.SH "OPTIONS"

.TP
\-\-tags
Do not use branch names, but only tags to name the commits

.TP
\-\-all
List all commits reachable from all refs

.TP
\-\-stdin
Read from stdin, append "(<rev_name>)" to all sha1's of name'able commits, and pass to stdout

.SH "EXAMPLE"


Given a commit, find out where it is relative to the local refs\&. Say somebody wrote you about that phantastic commit 33db5f4d9027a10e477ccf054b2c1ab94f74c85a\&. Of course, you look into the commit, but that only tells you what happened, but not the context\&.


Enter git\-name\-rev:

.nf
% git name\-rev 33db5f4d9027a10e477ccf054b2c1ab94f74c85a
.fi


Now you are wiser, because you know that it happened 940 revisions before v0\&.99\&.


Another nice thing you can do is:

.nf
% git log | git name\-rev \-\-stdin
.fi

.SH "AUTHOR"


Written by Johannes Schindelin <Johannes\&.Schindelin@gmx\&.de>

.SH "DOCUMENTATION"


Documentation by Johannes Schindelin\&.

.SH "GIT"


Part of the \fBgit\fR(7) suite

