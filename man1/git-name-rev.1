.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-NAME\-REV" "1" "04/04/2007" "Git 1.5.1.31.ge421f" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-name\-rev \- Find symbolic names for given revs
.SH "SYNOPSIS"
\fIgit\-name\-rev\fR [\-\-tags] [\-\-refs=<pattern>] ( \-\-all | \-\-stdin | <committish>\&... )
.SH "DESCRIPTION"
Finds symbolic names suitable for human digestion for revisions given in any format parsable by git\-rev\-parse.
.SH "OPTIONS"
.TP
\-\-tags
Do not use branch names, but only tags to name the commits
.TP
\-\-refs=<pattern>
Only use refs whose names match a given shell pattern.
.TP
\-\-all
List all commits reachable from all refs
.TP
\-\-stdin
Read from stdin, append "(<rev_name>)" to all sha1's of nameable commits, and pass to stdout
.SH "EXAMPLE"
Given a commit, find out where it is relative to the local refs. Say somebody wrote you about that fantastic commit 33db5f4d9027a10e477ccf054b2c1ab94f74c85a. Of course, you look into the commit, but that only tells you what happened, but not the context.

Enter git\-name\-rev:
.sp
.nf
% git name\-rev 33db5f4d9027a10e477ccf054b2c1ab94f74c85a
33db5f4d9027a10e477ccf054b2c1ab94f74c85a tags/v0.99^0~940
.fi
Now you are wiser, because you know that it happened 940 revisions before v0.99.

Another nice thing you can do is:
.sp
.nf
% git log | git name\-rev \-\-stdin
.fi
.SH "AUTHOR"
Written by Johannes Schindelin <Johannes.Schindelin@gmx.de>
.SH "DOCUMENTATION"
Documentation by Johannes Schindelin.
.SH "GIT"
Part of the \fBgit\fR(7) suite

