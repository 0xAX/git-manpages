.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-CLONE" "1" "01/07/2008" "Git 1.5.4.rc2.60.gb2e62" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-clone \- Clone a repository into a new directory
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-clone\fR [\-\-template=<template_directory>]
          [\-l] [\-s] [\-\-no\-hardlinks] [\-q] [\-n] [\-\-bare]
          [\-o <name>] [\-u <upload\-pack>] [\-\-reference <repository>]
          [\-\-depth <depth>] [\-\-] <repository> [<directory>]
.fi
.SH "DESCRIPTION"
Clones a repository into a newly created directory, creates remote\-tracking branches for each branch in the cloned repository (visible using git branch \-r), and creates and checks out an initial branch equal to the cloned repository's currently active branch.

After the clone, a plain git fetch without arguments will update all the remote\-tracking branches, and a git pull without arguments will in addition merge the remote master branch into the current master branch, if any.

This default configuration is achieved by creating references to the remote branch heads under $GIT_DIR/refs/remotes/origin and by initializing remote.origin.url and remote.origin.fetch configuration variables.
.SH "OPTIONS"
.TP
\-\-local , \-l
When the repository to clone from is on a local machine, this flag bypasses normal "git aware" transport mechanism and clones the repository by making a copy of HEAD and everything under objects and refs directories. The files under .git/objects/ directory are hardlinked to save space when possible. This is now the default when the source repository is specified with /path/to/repo syntax, so it essentially is a no\-op option. To force copying instead of hardlinking (which may be desirable if you are trying to make a back\-up of your repository), but still avoid the usual "git aware" transport mechanism, \-\-no\-hardlinks can be used.
.TP
\-\-no\-hardlinks
Optimize the cloning process from a repository on a local filesystem by copying files under .git/objects directory.
.TP
\-\-shared , \-s
When the repository to clone is on the local machine, instead of using hard links, automatically setup .git/objects/info/alternates to share the objects with the source repository. The resulting repository starts out without any object of its own.
.TP
\-\-reference <repository>
If the reference repository is on the local machine automatically setup .git/objects/info/alternates to obtain objects from the reference repository. Using an already existing repository as an alternate will require fewer objects to be copied from the repository being cloned, reducing network and local storage costs.
.TP
\-\-quiet , \-q
Operate quietly. This flag is passed to "rsync" and "git\-fetch\-pack" commands when given.
.TP
\-\-no\-checkout , \-n
No checkout of HEAD is performed after the clone is complete.
.TP
\-\-bare
Make a \fIbare\fR GIT repository. That is, instead of creating <directory> and placing the administrative files in <directory>/.git, make the <directory> itself the $GIT_DIR. This obviously implies the \-n because there is nowhere to check out the working tree. Also the branch heads at the remote are copied directly to corresponding local branch heads, without mapping them to refs/remotes/origin/. When this option is used, neither remote\-tracking branches nor the related configuration variables are created.
.TP
\-\-origin <name> , \-o <name>
Instead of using the remote name \fIorigin\fR to keep track of the upstream repository, use <name> instead.
.TP
\-\-upload\-pack <upload\-pack> , \-u <upload\-pack>
When given, and the repository to clone from is handled by \fIgit\-fetch\-pack\fR, \fI\-\-exec=<upload\-pack>\fR is passed to the command to specify non\-default path for the command run on the other end.
.TP
\-\-template=<template_directory>
Specify the directory from which templates will be used; if unset the templates are taken from the installation defined default, typically /usr/share/git\-core/templates.
.TP
\-\-depth <depth>
Create a \fIshallow\fR clone with a history truncated to the specified number of revisions. A shallow repository has a number of limitations (you cannot clone or fetch from it, nor push from nor into it), but is adequate if you are only interested in the recent history of a large project with a long history, and would want to send in fixes as patches.
.TP
<repository>
The (possibly remote) repository to clone from. See the URLS section below for more information on specifying repositories.
.TP
<directory>
The name of a new directory to clone into. The "humanish" part of the source repository is used if no directory is explicitly given ("repo" for "/path/to/repo.git" and "foo" for "host.xz:foo/.git"). Cloning into an existing directory is not allowed.
.SH "GIT URLS"
One of the following notations can be used to name the remote repository:
.IP
.TP 3
\(bu
rsync://host.xz/path/to/repo.git/
.TP
\(bu
http://host.xz/path/to/repo.git/
.TP
\(bu
https://host.xz/path/to/repo.git/
.TP
\(bu
git://host.xz/path/to/repo.git/
.TP
\(bu
git://host.xz/~user/path/to/repo.git/
.TP
\(bu
ssh://[user@]host.xz[:port]/path/to/repo.git/
.TP
\(bu
ssh://[user@]host.xz/path/to/repo.git/
.TP
\(bu
ssh://[user@]host.xz/~user/path/to/repo.git/
.TP
\(bu
ssh://[user@]host.xz/~/path/to/repo.git

SSH is the default transport protocol over the network. You can optionally specify which user to log\-in as, and an alternate, scp\-like syntax is also supported. Both syntaxes support username expansion, as does the native git protocol, but only the former supports port specification. The following three are identical to the last three above, respectively:
.IP
.TP 3
\(bu
[user@]host.xz:/path/to/repo.git/
.TP
\(bu
[user@]host.xz:~user/path/to/repo.git/
.TP
\(bu
[user@]host.xz:path/to/repo.git

To sync with a local directory, you can use:
.IP
.TP 3
\(bu
/path/to/repo.git/
.TP
\(bu
file:///path/to/repo.git/

They are equivalent, except the former implies \-\-local option.
.SH "EXAMPLES"
.TP
Clone from upstream
.sp
.nf
.ft C
$ git clone git://git.kernel.org/pub/scm/.../linux\-2.6 my2.6
$ cd my2.6
$ make
.ft

.fi
.TP
Make a local clone that borrows from the current directory, without checking things out
.sp
.nf
.ft C
$ git clone \-l \-s \-n . ../copy
$ cd ../copy
$ git show\-branch
.ft

.fi
.TP
Clone from upstream while borrowing from an existing local directory
.sp
.nf
.ft C
$ git clone \-\-reference my2.6 \\
        git://git.kernel.org/pub/scm/.../linux\-2.7 \\
        my2.7
$ cd my2.7
.ft

.fi
.TP
Create a bare repository to publish your changes to the public
.sp
.nf
.ft C
$ git clone \-\-bare \-l /home/proj/.git /pub/scm/proj.git
.ft

.fi
.TP
Create a repository on the kernel.org machine that borrows from Linus
.sp
.nf
.ft C
$ git clone \-\-bare \-l \-s /pub/scm/.../torvalds/linux\-2.6.git \\
    /pub/scm/.../me/subsys\-2.6.git
.ft

.fi
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl.org>
.SH "DOCUMENTATION"
Documentation by Junio C Hamano and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(7) suite

