.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-CLONE" "1" "12/21/2006" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-clone \- Clones a repository
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-clone\fR [\-\-template=<template_directory>] [\-l [\-s]] [\-q] [\-n] [\-\-bare]
          [\-o <name>] [\-u <upload\-pack>] [\-\-reference <repository>]
          <repository> [<directory>]
.fi
.SH "DESCRIPTION"
Clones a repository into a newly created directory, creates remote\-tracking branches for each branch in the cloned repository (visible using git branch \-r), and creates and checks out a master branch equal to the cloned repository's master branch.

After the clone, a plain git fetch without arguments will update all the remote\-tracking branches, and a git pull without arguments will in addition merge the remote master branch into the current branch.

This default configuration is achieved by creating references to the remote branch heads under $GIT_DIR/refs/remotes/origin and by initializing remote.origin.url and remote.origin.fetch configuration variables.
.SH "OPTIONS"
.TP
\-\-local , \-l
When the repository to clone from is on a local machine, this flag bypasses normal "git aware" transport mechanism and clones the repository by making a copy of HEAD and everything under objects and refs directories. The files under .git/objects/ directory are hardlinked to save space when possible.
.TP
\-\-shared , \-s
When the repository to clone is on the local machine, instead of using hard links, automatically setup .git/objects/info/alternates to share the objects with the source repository. The resulting repository starts out without any object of its own.
.TP
\-\-reference <repository>
If the reference repository is on the local machine automatically setup .git/objects/info/alternates to obtain objects from the reference repository. Using an already existing repository as an alternate will require less objects to be copied from the repository being cloned, reducing network and local storage costs.
.TP
\-\-quiet , \-q
Operate quietly. This flag is passed to "rsync" and "git\-fetch\-pack" commands when given.
.TP
\-n
No checkout of HEAD is performed after the clone is complete.
.TP
\-\-bare
Make a \fIbare\fR GIT repository. That is, instead of creating <directory> and placing the administrative files in <directory>/.git, make the <directory> itself the $GIT_DIR. This obviously implies the \-n because there is nowhere to check out the working tree. Also the branch heads at the remote are copied directly to corresponding local branch heads, without mapping them to refs/remotes/origin/. When this option is used, neither the origin branch nor the default remotes/origin file is created.
.TP
\-\-origin <name> , \-o <name>
Instead of using the branch name \fIorigin\fR to keep track of the upstream repository, use <name> instead. Note that the shorthand name stored in remotes/origin is not affected, but the local branch name to pull the remote master branch into is.
.TP
\-\-upload\-pack <upload\-pack> , \-u <upload\-pack>
When given, and the repository to clone from is handled by \fIgit\-fetch\-pack\fR, \fI\-\-exec=<upload\-pack>\fR is passed to the command to specify non\-default path for the command run on the other end.
.TP
\-\-template=<template_directory>
Specify the directory from which templates will be used; if unset the templates are taken from the installation defined default, typically /usr/share/git\-core/templates.
.TP
<repository>
The (possibly remote) repository to clone from. It can be any URL git\-fetch supports.
.TP
<directory>
The name of a new directory to clone into. The "humanish" part of the source repository is used if no directory is explicitly given ("repo" for "/path/to/repo.git" and "foo" for "host.xz:foo/.git"). Cloning into an existing directory is not allowed.
.SH "EXAMPLES"
.TP
Clone from upstream
.sp
.nf
$ git clone git://git.kernel.org/pub/scm/.../linux\-2.6 my2.6
$ cd my2.6
$ make
.fi
.TP
Make a local clone that borrows from the current directory, without checking things out
.sp
.nf
$ git clone \-l \-s \-n . ../copy
$ cd copy
$ git show\-branch
.fi
.TP
Clone from upstream while borrowing from an existing local directory
.sp
.nf
$ git clone \-\-reference my2.6 \\
        git://git.kernel.org/pub/scm/.../linux\-2.7 \\
        my2.7
$ cd my2.7
.fi
.TP
Create a bare repository to publish your changes to the public
.sp
.nf
$ git clone \-\-bare \-l /home/proj/.git /pub/scm/proj.git
.fi
.TP
Create a repository on the kernel.org machine that borrows from Linus
.sp
.nf
$ git clone \-\-bare \-l \-s /pub/scm/.../torvalds/linux\-2.6.git \\
    /pub/scm/.../me/subsys\-2.6.git
.fi
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl.org>
.SH "DOCUMENTATION"
Documentation by Junio C Hamano and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(7) suite

