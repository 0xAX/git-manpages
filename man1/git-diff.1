.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-DIFF" "1" "01/07/2008" "Git 1.5.4.rc2.60.gb2e62" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-diff \- Show changes between commits, commit and working tree, etc
.SH "SYNOPSIS"
\fIgit\-diff\fR [<common diff options>] <commit>{0,2} [\-\-] [<path>\&...]
.SH "DESCRIPTION"
Show changes between two trees, a tree and the working tree, a tree and the index file, or the index file and the working tree.
.TP
\fIgit\-diff\fR [\-\-options] [\-\-] [<path>\&...]
This form is to view the changes you made relative to the index (staging area for the next commit). In other words, the differences are what you _could_ tell git to further add to the index but you still haven't. You can stage these changes by using \fBgit\-add\fR(1).

If exactly two paths are given, and at least one is untracked, compare the two files / directories. This behavior can be forced by \-\-no\-index.
.TP
\fIgit\-diff\fR [\-\-options] \-\-cached [<commit>] [\-\-] [<path>\&...]
This form is to view the changes you staged for the next commit relative to the named <commit>. Typically you would want comparison with the latest commit, so if you do not give <commit>, it defaults to HEAD.
.TP
\fIgit\-diff\fR [\-\-options] <commit> [\-\-] [<path>\&...]
This form is to view the changes you have in your working tree relative to the named <commit>. You can use HEAD to compare it with the latest commit, or a branch name to compare with the tip of a different branch.
.TP
\fIgit\-diff\fR [\-\-options] <commit> <commit> [\-\-] [<path>\&...]
This is to view the changes between two arbitrary <commit>.
.TP
\fIgit\-diff\fR [\-\-options] <commit>..<commit> [\-\-] [<path>\&...]
This is synonymous to the previous form. If <commit> on one side is omitted, it will have the same effect as using HEAD instead.
.TP
\fIgit\-diff\fR [\-\-options] <commit>...<commit> [\-\-] [<path>\&...]
This form is to view the changes on the branch containing and up to the second <commit>, starting at a common ancestor of both <commit>. "git\-diff A...B" is equivalent to "git\-diff $(git\-merge\-base A B) B". You can omit any one of <commit>, which has the same effect as using HEAD instead.

Just in case if you are doing something exotic, it should be noted that all of the <commit> in the above description, except for the last two forms that use ".." notations, can be any <tree\-ish>.

For a more complete list of ways to spell <commit>, see "SPECIFYING REVISIONS" section in \fBgit\-rev\-parse\fR(1). However, "diff" is about comparing two _endpoints_, not ranges, and the range notations ("<commit>..<commit>" and "<commit>...<commit>") do not mean a range as defined in the "SPECIFYING RANGES" section in \fBgit\-rev\-parse\fR(1).
.SH "OPTIONS"
.TP
\-p
Generate patch (see section on generating patches). This is the default.
.TP
\-u
Synonym for "\-p".
.TP
\-U<n>
Shorthand for "\-\-unified=<n>".
.TP
\-\-unified=<n>
Generate diffs with <n> lines of context instead of the usual three. Implies "\-p".
.TP
\-\-raw
Generate the raw format.
.TP
\-\-patch\-with\-raw
Synonym for "\-p \-\-raw".
.TP
\-\-stat[=width[,name\-width]]
Generate a diffstat. You can override the default output width for 80\-column terminal by "\-\-stat=width". The width of the filename part can be controlled by giving another width to it separated by a comma.
.TP
\-\-numstat
Similar to \-\-stat, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two \- instead of saying 0 0.
.TP
\-\-shortstat
Output only the last line of the \-\-stat format containing total number of modified files, as well as number of added and deleted lines.
.TP
\-\-summary
Output a condensed summary of extended header information such as creations, renames and mode changes.
.TP
\-\-patch\-with\-stat
Synonym for "\-p \-\-stat".
.TP
\-z
NUL\-line termination on output. This affects the \-\-raw output field terminator. Also output from commands such as "git\-log" will be delimited with NUL between commits.
.TP
\-\-name\-only
Show only names of changed files.
.TP
\-\-name\-status
Show only names and status of changed files.
.TP
\-\-color
Show colored diff.
.TP
\-\-no\-color
Turn off colored diff, even when the configuration file gives the default to color output.
.TP
\-\-color\-words
Show colored word diff, i.e. color words which have changed.
.TP
\-\-no\-renames
Turn off rename detection, even when the configuration file gives the default to do so.
.TP
\-\-check
Warn if changes introduce trailing whitespace or an indent that uses a space before a tab. Exits with non\-zero status if problems are found. Not compatible with \-\-exit\-code.
.TP
\-\-full\-index
Instead of the first handful characters, show full object name of pre\- and post\-image blob on the "index" line when generating a patch format output.
.TP
\-\-binary
In addition to \-\-full\-index, output "binary diff" that can be applied with "git apply".
.TP
\-\-abbrev[=<n>]
Instead of showing the full 40\-byte hexadecimal object name in diff\-raw format output and diff\-tree header lines, show only handful hexdigits prefix. This is independent of \-\-full\-index option above, which controls the diff\-patch output format. Non default number of digits can be specified with \-\-abbrev=<n>.
.TP
\-B
Break complete rewrite changes into pairs of delete and create.
.TP
\-M
Detect renames.
.TP
\-C
Detect copies as well as renames. See also \-\-find\-copies\-harder.
.TP
\-\-diff\-filter=[ACDMRTUXB*]
Select only files that are Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R), have their type (mode) changed (T), are Unmerged (U), are Unknown (X), or have had their pairing Broken (B). Any combination of the filter characters may be used. When * (All\-or\-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected.
.TP
\-\-find\-copies\-harder
For performance reasons, by default, \-C option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one \-C option has the same effect.
.TP
\-l<num>
\-M and \-C options require O(n^2) processing time where n is the number of potential rename/copy targets. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number.
.TP
\-S<string>
Look for differences that contain the change in <string>.
.TP
\-\-pickaxe\-all
When \-S finds a change, show all the changes in that changeset, not just the files that contain the change in <string>.
.TP
\-\-pickaxe\-regex
Make the <string> not a plain string but an extended POSIX regex to match.
.TP
\-O<orderfile>
Output the patch in the order specified in the <orderfile>, which has one shell glob pattern per line.
.TP
\-R
Swap two inputs; that is, show differences from index or on\-disk file to tree contents.
.TP
\-\-text
Treat all files as text.
.TP
\-a
Shorthand for "\-\-text".
.TP
\-\-ignore\-space\-at\-eol
Ignore changes in whitespace at EOL.
.TP
\-\-ignore\-space\-change
Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.
.TP
\-b
Shorthand for "\-\-ignore\-space\-change".
.TP
\-\-ignore\-all\-space
Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.
.TP
\-w
Shorthand for "\-\-ignore\-all\-space".
.TP
\-\-exit\-code
Make the program exit with codes similar to diff(1). That is, it exits with 1 if there were differences and 0 means no differences.
.TP
\-\-quiet
Disable all output of the program. Implies \-\-exit\-code.
.TP
\-\-ext\-diff
Allow an external diff helper to be executed. If you set an external diff driver with \fBgitattributes\fR(5), you need to use this option with \fBgit\-log\fR(1) and friends.
.TP
\-\-no\-ext\-diff
Disallow external diff drivers.
.TP
\-\-src\-prefix=<prefix>
Show the given source prefix instead of "a/".
.TP
\-\-dst\-prefix=<prefix>
Show the given destination prefix instead of "b/".
.TP
\-\-no\-prefix
Do not show any source or destination prefix.

For more detailed explanation on these common options, see also [1]\&\fIdiffcore documentation\fR.
.TP
<path>\&...
The <paths> parameters, when given, are used to limit the diff to the named paths (you can give directory names and get diff for all files under them).
.SH "OUTPUT FORMAT"
The output format from "git\-diff\-index", "git\-diff\-tree", "git\-diff\-files" and "git diff \-\-raw" are very similar.

These commands all compare two sets of things; what is compared differs:
.TP
git\-diff\-index <tree\-ish>
compares the <tree\-ish> and the files on the filesystem.
.TP
git\-diff\-index \-\-cached <tree\-ish>
compares the <tree\-ish> and the index.
.TP
git\-diff\-tree [\-r] <tree\-ish\-1> <tree\-ish\-2> [<pattern>\&...]
compares the trees named by the two arguments.
.TP
git\-diff\-files [<pattern>\&...]
compares the index and the files on the filesystem.

An output line is formatted this way:
.sp
.nf
.ft C
in\-place edit  :100644 100644 bcd1234... 0123456... M file0
copy\-edit      :100644 100644 abcd123... 1234567... C68 file1 file2
rename\-edit    :100644 100644 abcd123... 1234567... R86 file1 file3
create         :000000 100644 0000000... 1234567... A file4
delete         :100644 000000 1234567... 0000000... D file5
unmerged       :000000 000000 0000000... 0000000... U file6
.ft

.fi
That is, from the left to the right:
.TP 3
1.
a colon.
.TP
2.
mode for "src"; 000000 if creation or unmerged.
.TP
3.
a space.
.TP
4.
mode for "dst"; 000000 if deletion or unmerged.
.TP
5.
a space.
.TP
6.
sha1 for "src"; 0{40} if creation or unmerged.
.TP
7.
a space.
.TP
8.
sha1 for "dst"; 0{40} if creation, unmerged or "look at work tree".
.TP
9.
a space.
.TP
10.
status, followed by optional "score" number.
.TP
11.
a tab or a NUL when \fI\-z\fR option is used.
.TP
12.
path for "src"
.TP
13.
a tab or a NUL when \fI\-z\fR option is used; only exists for C or R.
.TP
14.
path for "dst"; only exists for C or R.
.TP
15.
an LF or a NUL when \fI\-z\fR option is used, to terminate the record.

<sha1> is shown as all 0's if a file is new on the filesystem and it is out of sync with the index.

Example:
.sp
.nf
.ft C
:100644 100644 5be4a4...... 000000...... M file.c
.ft

.fi
When \-z option is not used, TAB, LF, and backslash characters in pathnames are represented as \\t, \\n, and \\\\, respectively.
.SH "DIFF FORMAT FOR MERGES"
"git\-diff\-tree", "git\-diff\-files" and "git\-diff \-\-raw" can take \fI\-c\fR or \fI\-\-cc\fR option to generate diff output also for merge commits. The output differs from the format described above in the following way:
.TP 3
1.
there is a colon for each parent
.TP
2.
there are more "src" modes and "src" sha1
.TP
3.
status is concatenated status characters for each parent
.TP
4.
no optional "score" number
.TP
5.
single path, only for "dst"

Example:
.sp
.nf
.ft C
::100644 100644 100644 fabadb8... cc95eb0... 4866510... MM      describe.c
.ft

.fi
Note that \fIcombined diff\fR lists only files which were modified from all parents.
.SH "GENERATING PATCHES WITH \-P"
When "git\-diff\-index", "git\-diff\-tree", or "git\-diff\-files" are run with a \fI\-p\fR option, "git diff" without the \fI\-\-raw\fR option, or "git log" with the "\-p" option, they do not produce the output described above; instead they produce a patch file. You can customize the creation of such patches via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables.

What the \-p option produces is slightly different from the traditional diff format.
.TP 3
1.
It is preceded with a "git diff" header, that looks like this:
.sp
.nf
diff \-\-git a/file1 b/file2
.fi
The a/ and b/ filenames are the same unless rename/copy is involved. Especially, even for a creation or a deletion, /dev/null is _not_ used in place of a/ or b/ filenames.

When rename/copy is involved, file1 and file2 show the name of the source file of the rename/copy and the name of the file that rename/copy produces, respectively.
.TP
2.
It is followed by one or more extended header lines:
.sp
.nf
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>..<hash> <mode>
.fi
.TP
3.
TAB, LF, double quote and backslash characters in pathnames are represented as \\t, \\n, \\" and \\\\, respectively. If there is need for such substitution then the whole pathname is put in double quotes.

The similarity index is the percentage of unchanged lines, and the dissimilarity index is the percentage of changed lines. It is a rounded down integer, followed by a percent sign. The similarity index value of 100% is thus reserved for two equal files, while 100% dissimilarity means that no line from the old file made it into the new one.
.SH "COMBINED DIFF FORMAT"
"git\-diff\-tree", "git\-diff\-files" and "git\-diff" can take \fI\-c\fR or \fI\-\-cc\fR option to produce \fIcombined diff\fR. For showing a merge commit with "git log \-p", this is the default format. A \fIcombined diff\fR format looks like this:
.sp
.nf
.ft C
diff \-\-combined describe.c
index fabadb8,cc95eb0..4866510
\-\-\- a/describe.c
+++ b/describe.c
@@@ \-98,20 \-98,12 +98,20 @@@
        return (a_date > b_date) ? \-1 : (a_date == b_date) ? 0 : 1;
  }

\- static void describe(char *arg)
 \-static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  {
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) < 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) {
                initialized = 1;
                for_each_ref(get_name);
.ft

.fi
.TP 3
1.
It is preceded with a "git diff" header, that looks like this (when \fI\-c\fR option is used):
.sp
.nf
diff \-\-combined file
.fi
or like this (when \fI\-\-cc\fR option is used):
.sp
.nf
diff \-\-c file
.fi
.TP
2.
It is followed by one or more extended header lines (this example shows a merge with two parents):
.sp
.nf
index <hash>,<hash>..<hash>
mode <mode>,<mode>..<mode>
new file mode <mode>
deleted file mode <mode>,<mode>
.fi
The mode <mode>,<mode>..<mode> line appears only if at least one of the <mode> is different from the rest. Extended headers with information about detected contents movement (renames and copying detection) are designed to work with diff of two <tree\-ish> and are not used by combined diff format.
.TP
3.
It is followed by two\-line from\-file/to\-file header
.sp
.nf
\-\-\- a/file
+++ b/file
.fi
Similar to two\-line header for traditional \fIunified\fR diff format, /dev/null is used to signal created or deleted files.
.TP
4.
Chunk header format is modified to prevent people from accidentally feeding it to patch \-p1. Combined diff format was created for review of merge commit changes, and was not meant for apply. The change is similar to the change in the extended \fIindex\fR header:
.sp
.nf
@@@ <from\-file\-range> <from\-file\-range> <to\-file\-range> @@@
.fi
There are (number of parents + 1) @ characters in the chunk header for combined diff format.

Unlike the traditional \fIunified\fR diff format, which shows two files A and B with a single column that has \- (minus \(em appears in A but removed in B), + (plus \(em missing in A but added to B), or " " (space \(em unchanged) prefix, this format compares two or more files file1, file2,\&... with one file X, and shows how X differs from each of fileN. One column for each of fileN is prepended to the output line to note how X's line is different from it.

A \- character in the column N means that the line appears in fileN but it does not appear in the result. A + character in the column N means that the line appears in the last file, and fileN does not have that line (in other words, the line was added, from the point of view of that parent).

In the above example output, the function signature was changed from both files (hence two \- removals from both file1 and file2, plus ++ to mean one line that was added does not appear in either file1 nor file2). Also two other lines are the same from file1 but do not appear in file2 (hence prefixed with +).

When shown by git diff\-tree \-c, it compares the parents of a merge commit with the merge result (i.e. file1..fileN are the parents). When shown by git diff\-files \-c, it compares the two unresolved merge parents with the working tree file (i.e. file1 is stage 2 aka "our version", file2 is stage 3 aka "their version").
.SH "OTHER DIFF FORMATS"
The \-\-summary option describes newly added, deleted, renamed and copied files. The \-\-stat option adds diffstat(1) graph to the output. These options can be combined with other options, such as \-p, and are meant for human consumption.

When showing a change that involves a rename or a copy, \-\-stat output formats the pathnames compactly by combining common prefix and suffix of the pathnames. For example, a change that moves arch/i386/Makefile to arch/x86/Makefile while modifying 4 lines will be shown like this:
.sp
.nf
.ft C
arch/{i386 => x86}/Makefile    |   4 +\-\-
.ft

.fi
The \-\-numstat option gives the diffstat(1) information but is designed for easier machine consumption. An entry in \-\-numstat output looks like this:
.sp
.nf
.ft C
1       2       README
3       1       arch/{i386 => x86}/Makefile
.ft

.fi
That is, from left to right:
.TP 3
1.
the number of added lines;
.TP
2.
a tab;
.TP
3.
the number of deleted lines;
.TP
4.
a tab;
.TP
5.
pathname (possibly with rename/copy information);
.TP
6.
a newline.

When \-z output option is in effect, the output is formatted this way:
.sp
.nf
.ft C
1       2       README NUL
3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL
.ft

.fi
That is:
.TP 3
1.
the number of added lines;
.TP
2.
a tab;
.TP
3.
the number of deleted lines;
.TP
4.
a tab;
.TP
5.
a NUL (only exists if renamed/copied);
.TP
6.
pathname in preimage;
.TP
7.
a NUL (only exists if renamed/copied);
.TP
8.
pathname in postimage (only exists if renamed/copied);
.TP
9.
a NUL.

The extra NUL before the preimage path in renamed case is to allow scripts that read the output to tell if the current record being read is a single\-path record or a rename/copy record without reading ahead. After reading added and deleted lines, reading up to NUL would yield the pathname, but if that is NUL, the record will show two paths.
.SH "EXAMPLES"
.TP
Various ways to check your working tree
.sp
.nf
.ft C
$ git diff            \fB(1)\fR
$ git diff \-\-cached   \fB(2)\fR
$ git diff HEAD       \fB(3)\fR
.ft

.fi
.sp
\fB1. \fRChanges in the working tree not yet staged for the next commit.
.br
\fB2. \fRChanges between the index and your last commit; what you would be committing if you run "git commit" without "\-a" option.
.br
\fB3. \fRChanges in the working tree since your last commit; what you would be committing if you run "git commit \-a"
.br
.TP
Comparing with arbitrary commits
.sp
.nf
.ft C
$ git diff test            \fB(1)\fR
$ git diff HEAD \-\- ./test  \fB(2)\fR
$ git diff HEAD^ HEAD      \fB(3)\fR
.ft

.fi
.sp
\fB1. \fRInstead of using the tip of the current branch, compare with the tip of "test" branch.
.br
\fB2. \fRInstead of comparing with the tip of "test" branch, compare with the tip of the current branch, but limit the comparison to the file "test".
.br
\fB3. \fRCompare the version before the last commit and the last commit.
.br
.TP
Comparing branches
.sp
.nf
.ft C
$ git diff topic master    \fB(1)\fR
$ git diff topic..master   \fB(2)\fR
$ git diff topic...master  \fB(3)\fR
.ft

.fi
.sp
\fB1. \fRChanges between the tips of the topic and the master branches.
.br
\fB2. \fRSame as above.
.br
\fB3. \fRChanges that occurred on the master branch since when the topic branch was started off it.
.br
.TP
Limiting the diff output
.sp
.nf
.ft C
$ git diff \-\-diff\-filter=MRC            \fB(1)\fR
$ git diff \-\-name\-status                \fB(2)\fR
$ git diff arch/i386 include/asm\-i386   \fB(3)\fR
.ft

.fi
.sp
\fB1. \fRShow only modification, rename and copy, but not addition nor deletion.
.br
\fB2. \fRShow only names and the nature of change, but not actual diff output.
.br
\fB3. \fRLimit diff output to named subtrees.
.br
.TP
Munging the diff output
.sp
.nf
.ft C
$ git diff \-\-find\-copies\-harder \-B \-C  \fB(1)\fR
$ git diff \-R                          \fB(2)\fR
.ft

.fi
.sp
\fB1. \fRSpend extra cycles to find renames, copies and complete rewrites (very expensive).
.br
\fB2. \fROutput diff in reverse.
.br
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl.org>
.SH "DOCUMENTATION"
Documentation by Junio C Hamano and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(7) suite
.SH "REFERENCES"
.TP 3
1.\ diffcore documentation
\%diffcore.html
