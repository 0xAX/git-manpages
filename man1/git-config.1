.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-CONFIG" "1" "05/22/2007" "Git 1.5.2.35.ga334" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-config \- Get and set repository or global options
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-config\fR [\-\-system | \-\-global] name [value [value_regex]]
\fIgit\-config\fR [\-\-system | \-\-global] \-\-add name value
\fIgit\-config\fR [\-\-system | \-\-global] \-\-replace\-all name [value [value_regex]]
\fIgit\-config\fR [\-\-system | \-\-global] [type] \-\-get name [value_regex]
\fIgit\-config\fR [\-\-system | \-\-global] [type] \-\-get\-all name [value_regex]
\fIgit\-config\fR [\-\-system | \-\-global] \-\-unset name [value_regex]
\fIgit\-config\fR [\-\-system | \-\-global] \-\-unset\-all name [value_regex]
\fIgit\-config\fR [\-\-system | \-\-global] \-\-rename\-section old_name new_name
\fIgit\-config\fR [\-\-system | \-\-global] \-\-remove\-section name
\fIgit\-config\fR [\-\-system | \-\-global] \-l | \-\-list
.fi
.SH "DESCRIPTION"
You can query/set/replace/unset options with this command. The name is actually the section and the key separated by a dot, and the value will be escaped.

Multiple lines can be added to an option by using the \fI\-\-add\fR option. If you want to update or unset an option which can occur on multiple lines, a POSIX regexp value_regex needs to be given. Only the existing values that match the regexp are updated or unset. If you want to handle the lines that do \fBnot\fR match the regex, just prepend a single exclamation mark in front (see EXAMPLES).

The type specifier can be either \fI\-\-int\fR or \fI\-\-bool\fR, which will make \fIgit\-config\fR ensure that the variable(s) are of the given type and convert the value to the canonical form (simple decimal number for int, a "true" or "false" string for bool). Type specifiers currently only take effect for reading operations. If no type specifier is passed, no checks or transformations are performed on the value.

This command will fail if:
.TP 3
1.
The .git/config file is invalid,
.TP
2.
Can not write to .git/config,
.TP
3.
no section was provided,
.TP
4.
the section or key is invalid,
.TP
5.
you try to unset an option which does not exist,
.TP
6.
you try to unset/set an option for which multiple lines match, or
.TP
7.
you use \-\-global option without $HOME being properly set.
.SH "OPTIONS"
.TP
\-\-replace\-all
Default behavior is to replace at most one line. This replaces all lines matching the key (and optionally the value_regex).
.TP
\-\-add
Adds a new line to the option without altering any existing values. This is the same as providing \fI^$\fR as the value_regex.
.TP
\-\-get
Get the value for a given key (optionally filtered by a regex matching the value). Returns error code 1 if the key was not found and error code 2 if multiple key values were found.
.TP
\-\-get\-all
Like get, but does not fail if the number of values for the key is not exactly one.
.TP
\-\-get\-regexp
Like \-\-get\-all, but interprets the name as a regular expression.
.TP
\-\-global
Use global ~/.gitconfig file rather than the repository .git/config.
.TP
\-\-system
Use system\-wide $(prefix)/etc/gitconfig rather than the repository .git/config.
.TP
\-\-remove\-section
Remove the given section from the configuration file.
.TP
\-\-rename\-section
Rename the given section to a new name.
.TP
\-\-unset
Remove the line matching the key from config file.
.TP
\-\-unset\-all
Remove all lines matching the key from config file.
.TP
\-l, \-\-list
List all variables set in config file.
.TP
\-\-bool
git\-config will ensure that the output is "true" or "false"
.TP
\-\-int
git\-config will ensure that the output is a simple decimal number. An optional value suffix of \fIk\fR, \fIm\fR, or \fIg\fR in the config file will cause the value to be multiplied by 1024, 1048576, or 1073741824 prior to output.
.SH "ENVIRONMENT"
.TP
GIT_CONFIG
Take the configuration from the given file instead of .git/config. Using the "\-\-global" option forces this to ~/.gitconfig.
.TP
GIT_CONFIG_LOCAL
Currently the same as $GIT_CONFIG; when Git will support global configuration files, this will cause it to take the configuration from the global configuration file in addition to the given file.
.SH "EXAMPLE"
Given a .git/config like this:
.sp
.nf
#
# This is the config file, and
# a '#' or ';' character indicates
# a comment
#
.fi
.sp
.nf
; core variables
[core]
        ; Don't trust file modes
        filemode = false
.fi
.sp
.nf
; Our diff algorithm
[diff]
        external = "/usr/local/bin/gnu\-diff \-u"
        renames = true
.fi
.sp
.nf
; Proxy settings
[core]
        gitproxy="ssh" for "ssh://kernel.org/"
        gitproxy="proxy\-command" for kernel.org
        gitproxy="myprotocol\-command" for "my://"
        gitproxy=default\-proxy ; for all the rest
.fi
you can set the filemode to true with
.sp
.nf
% git config core.filemode true
.fi
The hypothetical proxy command entries actually have a postfix to discern what URL they apply to. Here is how to change the entry for kernel.org to "ssh".
.sp
.nf
% git config core.gitproxy '"ssh" for kernel.org' 'for kernel.org$'
.fi
This makes sure that only the key/value pair for kernel.org is replaced.

To delete the entry for renames, do
.sp
.nf
% git config \-\-unset diff.renames
.fi
If you want to delete an entry for a multivar (like core.gitproxy above), you have to provide a regex matching the value of exactly one line.

To query the value for a given key, do
.sp
.nf
% git config \-\-get core.filemode
.fi
or
.sp
.nf
% git config core.filemode
.fi
or, to query a multivar:
.sp
.nf
% git config \-\-get core.gitproxy "for kernel.org$"
.fi
If you want to know all the values for a multivar, do:
.sp
.nf
% git config \-\-get\-all core.gitproxy
.fi
If you like to live dangerous, you can replace \fBall\fR core.gitproxy by a new one with
.sp
.nf
% git config \-\-replace\-all core.gitproxy ssh
.fi
However, if you really only want to replace the line for the default proxy, i.e. the one without a "for \&..." postfix, do something like this:
.sp
.nf
% git config core.gitproxy ssh '! for '
.fi
To actually match only values with an exclamation mark, you have to
.sp
.nf
% git config section.key value '[!]'
.fi
To add a new proxy, without altering any of the existing ones, use
.sp
.nf
% git config core.gitproxy '"proxy" for example.com'
.fi
.SH "CONFIGURATION FILE"
The git configuration file contains a number of variables that affect the git command's behavior. .git/config file for each repository is used to store the information for that repository, and $HOME/.gitconfig is used to store per user information to give fallback values for .git/config file. The file /etc/gitconfig can be used to store system\-wide defaults.

They can be used by both the git plumbing and the porcelains. The variables are divided into sections, where in the fully qualified variable name the variable itself is the last dot\-separated segment and the section name is everything before the last dot. The variable names are case\-insensitive and only alphanumeric characters are allowed. Some variables may appear multiple times.
.SS "Syntax"
The syntax is fairly flexible and permissive; whitespaces are mostly ignored. The \fI#\fR and \fI;\fR characters begin comments to the end of line, blank lines are ignored.

The file consists of sections and variables. A section begins with the name of the section in square brackets and continues until the next section begins. Section names are not case sensitive. Only alphanumeric characters, \fI\-\fR and \fI.\fR are allowed in section names. Each variable must belong to some section, which means that there must be section header before first setting of a variable.

Sections can be further divided into subsections. To begin a subsection put its name in double quotes, separated by space from the section name, in the section header, like in example below:
.sp
.nf
        [section "subsection"]
.fi
Subsection names can contain any characters except newline (doublequote \fI"\fR and backslash have to be escaped as \fI\\"\fR and \fI\\\\\fR, respectively) and are case sensitive. Section header cannot span multiple lines. Variables may belong directly to a section or to a given subsection. You can have [section] if you have [section "subsection"], but you don't need to.

There is also (case insensitive) alternative [section.subsection] syntax. In this syntax subsection names follow the same restrictions as for section name.

All the other lines are recognized as setting variables, in the form \fIname = value\fR. If there is no equal sign on the line, the entire line is taken as \fIname\fR and the variable is recognized as boolean "true". The variable names are case\-insensitive and only alphanumeric characters and \fI\-\fR are allowed. There can be more than one value for a given variable; we say then that variable is multivalued.

Leading and trailing whitespace in a variable value is discarded. Internal whitespace within a variable value is retained verbatim.

The values following the equals sign in variable assign are all either a string, an integer, or a boolean. Boolean values may be given as yes/no, 0/1 or true/false. Case is not significant in boolean values, when converting value to the canonical form using \fI\-\-bool\fR type specifier; git\-config will ensure that the output is "true" or "false".

String values may be entirely or partially enclosed in double quotes. You need to enclose variable value in double quotes if you want to preserve leading or trailing whitespace, or if variable value contains beginning of comment characters (if it contains \fI#\fR or \fI;\fR). Double quote \fI"\fR and backslash \fI\\\fR characters in variable value must be escaped: use \fI\\"\fR for \fI"\fR and \fI\\\\\fR for \fI\\\fR.

The following escape sequences (beside \fI\\"\fR and \fI\\\\\fR) are recognized: \fI\\n\fR for newline character (NL), \fI\\t\fR for horizontal tabulation (HT, TAB) and \fI\\b\fR for backspace (BS). No other char escape sequence, nor octal char sequences are valid.

Variable value ending in a \fI\\\fR is continued on the next line in the customary UNIX fashion.

Some variables may require special value format.
.SS "Example"
.sp
.nf
# Core variables
[core]
        ; Don't trust file modes
        filemode = false
.fi
.sp
.nf
# Our diff algorithm
[diff]
        external = "/usr/local/bin/gnu\-diff \-u"
        renames = true
.fi
.sp
.nf
[branch "devel"]
        remote = origin
        merge = refs/heads/devel
.fi
.sp
.nf
# Proxy settings
[core]
        gitProxy="ssh" for "ssh://kernel.org/"
        gitProxy=default\-proxy ; for the rest
.fi
.SS "Variables"
Note that this list is non\-comprehensive and not necessarily complete. For command\-specific variables, you will find a more detailed description in the appropriate manual page. You will find a description of non\-core porcelain configuration variables in the respective porcelain documentation.
.TP
core.fileMode
If false, the executable bit differences between the index and the working copy are ignored; useful on broken filesystems like FAT. See \fBgit\-update\-index\fR(1). True by default.
.TP
core.autocrlf
If true, makes git convert CRLF at the end of lines in text files to LF when reading from the filesystem, and convert in reverse when writing to the filesystem. The variable can be set to \fIinput\fR, in which case the conversion happens only while reading from the filesystem but files are written out with LF at the end of lines. Currently, which paths to consider "text" (i.e. be subjected to the autocrlf mechanism) is decided purely based on the contents.
.TP
core.symlinks
If false, symbolic links are checked out as small plain files that contain the link text. \fBgit\-update\-index\fR(1) and \fBgit\-add\fR(1) will not change the recorded type to regular file. Useful on filesystems like FAT that do not support symbolic links. True by default.
.TP
core.gitProxy
A "proxy command" to execute (as \fIcommand host port\fR) instead of establishing direct connection to the remote server when using the git protocol for fetching. If the variable value is in the "COMMAND for DOMAIN" format, the command is applied only on hostnames ending with the specified domain string. This variable may be set multiple times and is matched in the given order; the first match wins.

Can be overridden by the \fIGIT_PROXY_COMMAND\fR environment variable (which always applies universally, without the special "for" handling).
.TP
core.ignoreStat
The working copy files are assumed to stay unchanged until you mark them otherwise manually \- Git will not detect the file changes by lstat() calls. This is useful on systems where those are very slow, such as Microsoft Windows. See \fBgit\-update\-index\fR(1). False by default.
.TP
core.preferSymlinkRefs
Instead of the default "symref" format for HEAD and other symbolic reference files, use symbolic links. This is sometimes needed to work with old scripts that expect HEAD to be a symbolic link.
.TP
core.bare
If true this repository is assumed to be \fIbare\fR and has no working directory associated with it. If this is the case a number of commands that require a working directory will be disabled, such as \fBgit\-add\fR(1) or \fBgit\-merge\fR(1).

This setting is automatically guessed by \fBgit\-clone\fR(1) or \fBgit\-init\fR(1) when the repository was created. By default a repository that ends in "/.git" is assumed to be not bare (bare = false), while all other repositories are assumed to be bare (bare = true).
.TP
core.logAllRefUpdates
Updates to a ref <ref> is logged to the file "$GIT_DIR/logs/<ref>", by appending the new and old SHA1, the date/time and the reason of the update, but only when the file exists. If this configuration variable is set to true, missing "$GIT_DIR/logs/<ref>" file is automatically created for branch heads.

This information can be used to determine what commit was the tip of a branch "2 days ago".

This value is true by default in a repository that has a working directory associated with it, and false by default in a bare repository.
.TP
core.repositoryFormatVersion
Internal variable identifying the repository format and layout version.
.TP
core.sharedRepository
When \fIgroup\fR (or \fItrue\fR), the repository is made shareable between several users in a group (making sure all the files and objects are group\-writable). When \fIall\fR (or \fIworld\fR or \fIeverybody\fR), the repository will be readable by all users, additionally to being group\-shareable. When \fIumask\fR (or \fIfalse\fR), git will use permissions reported by umask(2). See \fBgit\-init\fR(1). False by default.
.TP
core.warnAmbiguousRefs
If true, git will warn you if the ref name you passed it is ambiguous and might match multiple refs in the .git/refs/ tree. True by default.
.TP
core.compression
An integer \-1..9, indicating a default compression level. \-1 is the zlib default. 0 means no compression, and 1..9 are various speed/size tradeoffs, 9 being slowest.
.TP
core.loosecompression
An integer \-1..9, indicating the compression level for objects that are not in a pack file. \-1 is the zlib default. 0 means no compression, and 1..9 are various speed/size tradeoffs, 9 being slowest. If not set, defaults to core.compression. If that is not set, defaults to 0 (best speed).
.TP
core.packedGitWindowSize
Number of bytes of a pack file to map into memory in a single mapping operation. Larger window sizes may allow your system to process a smaller number of large pack files more quickly. Smaller window sizes will negatively affect performance due to increased calls to the operating system's memory manager, but may improve performance when accessing a large number of large pack files.

Default is 1 MiB if NO_MMAP was set at compile time, otherwise 32 MiB on 32 bit platforms and 1 GiB on 64 bit platforms. This should be reasonable for all users/operating systems. You probably do not need to adjust this value.

Common unit suffixes of \fIk\fR, \fIm\fR, or \fIg\fR are supported.
.TP
core.packedGitLimit
Maximum number of bytes to map simultaneously into memory from pack files. If Git needs to access more than this many bytes at once to complete an operation it will unmap existing regions to reclaim virtual address space within the process.

Default is 256 MiB on 32 bit platforms and 8 GiB on 64 bit platforms. This should be reasonable for all users/operating systems, except on the largest projects. You probably do not need to adjust this value.

Common unit suffixes of \fIk\fR, \fIm\fR, or \fIg\fR are supported.
.TP
core.deltaBaseCacheLimit
Maximum number of bytes to reserve for caching base objects that multiple deltafied objects reference. By storing the entire decompressed base objects in a cache Git is able to avoid unpacking and decompressing frequently used base objects multiple times.

Default is 16 MiB on all platforms. This should be reasonable for all users/operating systems, except on the largest projects. You probably do not need to adjust this value.

Common unit suffixes of \fIk\fR, \fIm\fR, or \fIg\fR are supported.
.TP
core.excludeFile
In addition to \fI.gitignore\fR (per\-directory) and \fI.git/info/exclude\fR, git looks into this file for patterns of files which are not meant to be tracked.
.TP
alias.*
Command aliases for the \fBgit\fR(1) command wrapper \- e.g. after defining "alias.last = cat\-file commit HEAD", the invocation "git last" is equivalent to "git cat\-file commit HEAD". To avoid confusion and troubles with script usage, aliases that hide existing git commands are ignored. Arguments are split by spaces, the usual shell quoting and escaping is supported. quote pair and a backslash can be used to quote them.
.sp
.nf
If the alias expansion is prefixed with an exclamation point,
it will be treated as a shell command.  For example, defining
"alias.new = !gitk \-\-all \-\-not ORIG_HEAD", the invocation
"git new" is equivalent to running the shell command
"gitk \-\-all \-\-not ORIG_HEAD".
.fi
.TP
apply.whitespace
Tells git\-apply how to handle whitespaces, in the same way as the \fI\-\-whitespace\fR option. See \fBgit\-apply\fR(1).
.TP
branch.<name>.remote
When in branch <name>, it tells git fetch which remote to fetch. If this option is not given, git fetch defaults to remote "origin".
.TP
branch.<name>.merge
When in branch <name>, it tells git fetch the default refspec to be marked for merging in FETCH_HEAD. The value has exactly to match a remote part of one of the refspecs which are fetched from the remote given by "branch.<name>.remote". The merge information is used by git pull (which at first calls git fetch) to lookup the default branch for merging. Without this option, git pull defaults to merge the first refspec fetched. Specify multiple values to get an octopus merge. If you wish to setup git pull so that it merges into <name> from another branch in the local repository, you can point branch.<name>.merge to the desired branch, and use the special setting . (a period) for branch.<name>.remote.
.TP
clean.requireForce
A boolean to make git\-clean do nothing unless given \-f or \-n. Defaults to false.
.TP
color.branch
A boolean to enable/disable color in the output of \fBgit\-branch\fR(1). May be set to true (or always), false (or never) or auto, in which case colors are used only when the output is to a terminal. Defaults to false.
.TP
color.branch.<slot>
Use customized color for branch coloration. <slot> is one of current (the current branch), local (a local branch), remote (a tracking branch in refs/remotes/), plain (other refs).

The value for these configuration variables is a list of colors (at most two) and attributes (at most one), separated by spaces. The colors accepted are normal, black, red, green, yellow, blue, magenta, cyan and white; the attributes are bold, dim, ul, blink and reverse. The first color given is the foreground; the second is the background. The position of the attribute, if any, doesn't matter.
.TP
color.diff
When true (or always), always use colors in patch. When false (or never), never. When set to auto, use colors only when the output is to the terminal.
.TP
color.diff.<slot>
Use customized color for diff colorization. <slot> specifies which part of the patch to use the specified color, and is one of plain (context text), meta (metainformation), frag (hunk header), old (removed lines), new (added lines), commit (commit headers), or whitespace (highlighting dubious whitespace). The values of these variables may be specified as in color.branch.<slot>.
.TP
color.pager
A boolean to enable/disable colored output when the pager is in use (default is true).
.TP
color.status
A boolean to enable/disable color in the output of \fBgit\-status\fR(1). May be set to true (or always), false (or never) or auto, in which case colors are used only when the output is to a terminal. Defaults to false.
.TP
color.status.<slot>
Use customized color for status colorization. <slot> is one of header (the header text of the status message), added or updated (files which are added but not committed), changed (files which are changed but not added in the index), or untracked (files which are not tracked by git). The values of these variables may be specified as in color.branch.<slot>.
.TP
diff.renameLimit
The number of files to consider when performing the copy/rename detection; equivalent to the git diff option \fI\-l\fR.
.TP
diff.renames
Tells git to detect renames. If set to any boolean value, it will enable basic rename detection. If set to "copies" or "copy", it will detect copies, as well.
.TP
fetch.unpackLimit
If the number of objects fetched over the git native transfer is below this limit, then the objects will be unpacked into loose object files. However if the number of received objects equals or exceeds this limit then the received pack will be stored as a pack, after adding any missing delta bases. Storing the pack from a push can make the push operation complete faster, especially on slow filesystems.
.TP
format.headers
Additional email headers to include in a patch to be submitted by mail. See \fBgit\-format\-patch\fR(1).
.TP
format.suffix
The default for format\-patch is to output files with the suffix .patch. Use this variable to change that suffix (make sure to include the dot if you want it).
.TP
gc.aggressiveWindow
The window size parameter used in the delta compression algorithm used by \fIgit gc \-\-aggressive\fR. This defaults to 10.
.TP
gc.packrefs
git gc does not run git pack\-refs in a bare repository by default so that older dumb\-transport clients can still fetch from the repository. Setting this to true lets git gc to run git pack\-refs. Setting this to false tells git gc never to run git pack\-refs. The default setting is notbare. Enable it only when you know you do not have to support such clients. The default setting will change to true at some stage, and setting this to false will continue to prevent git pack\-refs from being run from git gc.
.TP
gc.reflogexpire
git reflog expire removes reflog entries older than this time; defaults to 90 days.
.TP
gc.reflogexpireunreachable
git reflog expire removes reflog entries older than this time and are not reachable from the current tip; defaults to 30 days.
.TP
gc.rerereresolved
Records of conflicted merge you resolved earlier are kept for this many days when git rerere gc is run. The default is 60 days. See \fBgit\-rerere\fR(1).
.TP
gc.rerereunresolved
Records of conflicted merge you have not resolved are kept for this many days when git rerere gc is run. The default is 15 days. See \fBgit\-rerere\fR(1).
.TP
gitcvs.enabled
Whether the cvs server interface is enabled for this repository. See \fBgit\-cvsserver\fR(1).
.TP
gitcvs.logfile
Path to a log file where the cvs server interface well\&... logs various stuff. See \fBgit\-cvsserver\fR(1).
.TP
gitcvs.allbinary
If true, all files are sent to the client in mode \fI\-kb\fR. This causes the client to treat all files as binary files which suppresses any newline munging it otherwise might do. A work\-around for the fact that there is no way yet to set single files to mode \fI\-kb\fR.
.TP
gitcvs.dbname
Database used by git\-cvsserver to cache revision information derived from the git repository. The exact meaning depends on the used database driver, for SQLite (which is the default driver) this is a filename. Supports variable substitution (see \fBgit\-cvsserver\fR(1) for details). May not contain semicolons (;). Default: \fI%Ggitcvs.%m.sqlite\fR
.TP
gitcvs.dbdriver
Used Perl DBI driver. You can specify any available driver for this here, but it might not work. git\-cvsserver is tested with \fIDBD::SQLite\fR, reported to work with \fIDBD::Pg\fR, and reported \fBnot\fR to work with \fIDBD::mysql\fR. Experimental feature. May not contain double colons (:). Default: \fISQLite\fR. See \fBgit\-cvsserver\fR(1).
.TP
gitcvs.dbuser, gitcvs.dbpass
Database user and password. Only useful if setting \fIgitcvs.dbdriver\fR, since SQLite has no concept of database users and/or passwords. \fIgitcvs.dbuser\fR supports variable substitution (see \fBgit\-cvsserver\fR(1) for details).

All gitcvs variables except for \fIgitcvs.allbinary\fR can also specifed as \fIgitcvs.<access_method>.<varname>\fR (where \fIaccess_method\fR is one of "ext" and "pserver") to make them apply only for the given access method.
.TP
http.sslVerify
Whether to verify the SSL certificate when fetching or pushing over HTTPS. Can be overridden by the \fIGIT_SSL_NO_VERIFY\fR environment variable.
.TP
http.sslCert
File containing the SSL certificate when fetching or pushing over HTTPS. Can be overridden by the \fIGIT_SSL_CERT\fR environment variable.
.TP
http.sslKey
File containing the SSL private key when fetching or pushing over HTTPS. Can be overridden by the \fIGIT_SSL_KEY\fR environment variable.
.TP
http.sslCAInfo
File containing the certificates to verify the peer with when fetching or pushing over HTTPS. Can be overridden by the \fIGIT_SSL_CAINFO\fR environment variable.
.TP
http.sslCAPath
Path containing files with the CA certificates to verify the peer with when fetching or pushing over HTTPS. Can be overridden by the \fIGIT_SSL_CAPATH\fR environment variable.
.TP
http.maxRequests
How many HTTP requests to launch in parallel. Can be overridden by the \fIGIT_HTTP_MAX_REQUESTS\fR environment variable. Default is 5.
.TP
http.lowSpeedLimit, http.lowSpeedTime
If the HTTP transfer speed is less than \fIhttp.lowSpeedLimit\fR for longer than \fIhttp.lowSpeedTime\fR seconds, the transfer is aborted. Can be overridden by the \fIGIT_HTTP_LOW_SPEED_LIMIT\fR and \fIGIT_HTTP_LOW_SPEED_TIME\fR environment variables.
.TP
http.noEPSV
A boolean which disables using of EPSV ftp command by curl. This can helpful with some "poor" ftp servers which don't support EPSV mode. Can be overridden by the \fIGIT_CURL_FTP_NO_EPSV\fR environment variable. Default is false (curl will use EPSV).
.TP
i18n.commitEncoding
Character encoding the commit messages are stored in; git itself does not care per se, but this information is necessary e.g. when importing commits from emails or in the gitk graphical history browser (and possibly at other places in the future or in other porcelains). See e.g. \fBgit\-mailinfo\fR(1). Defaults to \fIutf\-8\fR.
.TP
i18n.logOutputEncoding
Character encoding the commit messages are converted to when running git\-log and friends.
.TP
log.showroot
If true, the initial commit will be shown as a big creation event. This is equivalent to a diff against an empty tree. Tools like \fBgit\-log\fR(1) or \fBgit\-whatchanged\fR(1), which normally hide the root commit will now show it. True by default.
.TP
merge.summary
Whether to include summaries of merged commits in newly created merge commit messages. False by default.
.TP
merge.tool
Controls which merge resolution program is used by \fBgit\-mergetool\fR(l). Valid values are: "kdiff3", "tkdiff", "meld", "xxdiff", "emerge", "vimdiff", and "opendiff"
.TP
merge.verbosity
Controls the amount of output shown by the recursive merge strategy. Level 0 outputs nothing except a final error message if conflicts were detected. Level 1 outputs only conflicts, 2 outputs conflicts and file changes. Level 5 and above outputs debugging information. The default is level 2.
.TP
merge.<driver>.name
Defines a human readable name for a custom low\-level merge driver. See \fBgitattributes\fR(5) for details.
.TP
merge.<driver>.driver
Defines the command that implements a custom low\-level merge driver. See \fBgitattributes\fR(5) for details.
.TP
merge.<driver>.recursive
Names a low\-level merge driver to be used when performing an internal merge between common ancestors. See \fBgitattributes\fR(5) for details.
.TP
pack.window
The size of the window used by \fBgit\-pack\-objects\fR(1) when no window size is given on the command line. Defaults to 10.
.TP
pack.depth
The maximum delta depth used by \fBgit\-pack\-objects\fR(1) when no maximum depth is given on the command line. Defaults to 50.
.TP
pack.compression
An integer \-1..9, indicating the compression level for objects in a pack file. \-1 is the zlib default. 0 means no compression, and 1..9 are various speed/size tradeoffs, 9 being slowest. If not set, defaults to core.compression. If that is not set, defaults to \-1.
.TP
pull.octopus
The default merge strategy to use when pulling multiple branches at once.
.TP
pull.twohead
The default merge strategy to use when pulling a single branch.
.TP
remote.<name>.url
The URL of a remote repository. See \fBgit\-fetch\fR(1) or \fBgit\-push\fR(1).
.TP
remote.<name>.fetch
The default set of "refspec" for \fBgit\-fetch\fR(1). See \fBgit\-fetch\fR(1).
.TP
remote.<name>.push
The default set of "refspec" for \fBgit\-push\fR(1). See \fBgit\-push\fR(1).
.TP
remote.<name>.skipDefaultUpdate
If true, this remote will be skipped by default when updating using the remote subcommand of \fBgit\-remote\fR(1).
.TP
remote.<name>.receivepack
The default program to execute on the remote side when pushing. See option \-\-exec of \fBgit\-push\fR(1).
.TP
remote.<name>.uploadpack
The default program to execute on the remote side when fetching. See option \-\-exec of \fBgit\-fetch\-pack\fR(1).
.TP
remote.<name>.tagopt
Setting this value to \-\-no\-tags disables automatic tag following when fetching from remote <name>
.TP
remotes.<group>
The list of remotes which are fetched by "git remote update <group>". See \fBgit\-remote\fR(1).
.TP
repack.usedeltabaseoffset
Allow \fBgit\-repack\fR(1) to create packs that uses delta\-base offset. Defaults to false.
.TP
show.difftree
The default \fBgit\-diff\-tree\fR(1) arguments to be used for \fBgit\-show\fR(1).
.TP
showbranch.default
The default set of branches for \fBgit\-show\-branch\fR(1). See \fBgit\-show\-branch\fR(1).
.TP
tar.umask
By default, \fBgit\-tar\-tree\fR(1) sets file and directories modes to 0666 or 0777. While this is both useful and acceptable for projects such as the Linux Kernel, it might be excessive for other projects. With this variable, it becomes possible to tell \fBgit\-tar\-tree\fR(1) to apply a specific umask to the modes above. The special value "user" indicates that the user's current umask will be used. This should be enough for most projects, as it will lead to the same permissions as \fBgit\-checkout\fR(1) would use. The default value remains 0, which means world read\-write.
.TP
user.email
Your email address to be recorded in any newly created commits. Can be overridden by the \fIGIT_AUTHOR_EMAIL\fR, \fIGIT_COMMITTER_EMAIL\fR, and \fIEMAIL\fR environment variables. See \fBgit\-commit\-tree\fR(1).
.TP
user.name
Your full name to be recorded in any newly created commits. Can be overridden by the \fIGIT_AUTHOR_NAME\fR and \fIGIT_COMMITTER_NAME\fR environment variables. See \fBgit\-commit\-tree\fR(1).
.TP
user.signingkey
If \fBgit\-tag\fR(1) is not selecting the key you want it to automatically when creating a signed tag, you can override the default selection with this variable. This option is passed unchanged to gpg's \-\-local\-user parameter, so you may specify a key using any method that gpg supports.
.TP
whatchanged.difftree
The default \fBgit\-diff\-tree\fR(1) arguments to be used for \fBgit\-whatchanged\fR(1).
.TP
imap
The configuration variables in the \fIimap\fR section are described in \fBgit\-imap\-send\fR(1).
.TP
receive.unpackLimit
If the number of objects received in a push is below this limit then the objects will be unpacked into loose object files. However if the number of received objects equals or exceeds this limit then the received pack will be stored as a pack, after adding any missing delta bases. Storing the pack from a push can make the push operation complete faster, especially on slow filesystems.
.TP
receive.denyNonFastForwards
If set to true, git\-receive\-pack will deny a ref update which is not a fast forward. Use this to prevent such an update via a push, even if that push is forced. This configuration variable is set when initializing a shared repository.
.TP
transfer.unpackLimit
When fetch.unpackLimit or receive.unpackLimit are not set, the value of this variable is used instead.
.SH "AUTHOR"
Written by Johannes Schindelin <Johannes.Schindelin@gmx.de>
.SH "DOCUMENTATION"
Documentation by Johannes Schindelin, Petr Baudis and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(7) suite

