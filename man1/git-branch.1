.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-BRANCH" "1" "06/08/2008" "Git 1.5.6.rc2" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-branch \- List, create, or delete branches
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-branch\fR [\-\-color | \-\-no\-color] [\-r | \-a] [\-\-merged | \-\-no\-merged]
           [\-v [\-\-abbrev=<length> | \-\-no\-abbrev]]
           [\-\-contains <commit>]
\fIgit\-branch\fR [\-\-track | \-\-no\-track] [\-l] [\-f] <branchname> [<start\-point>]
\fIgit\-branch\fR (\-m | \-M) [<oldbranch>] <newbranch>
\fIgit\-branch\fR (\-d | \-D) [\-r] <branchname>\&...
.fi
.SH "DESCRIPTION"
With no arguments given a list of existing branches will be shown, the current branch will be highlighted with an asterisk. Option \-r causes the remote\-tracking branches to be listed, and option \-a shows both. With \-\-contains <commit>, shows only the branches that contains the named commit (in other words, the branches whose tip commits are descendant of the named commit). With \-\-merged, only branches merged into HEAD will be listed, and with \-\-no\-merged only branches not merged into HEAD will be listed.

In its second form, a new branch named <branchname> will be created. It will start out with a head equal to the one given as <start\-point>. If no <start\-point> is given, the branch will be created with a head equal to that of the currently checked out branch.

Note that this will create the new branch, but it will not switch the working tree to it; use "git checkout <newbranch>" to switch to the new branch.

When a local branch is started off a remote branch, git sets up the branch so that \fBgit\-pull\fR(1) will appropriately merge from the remote branch. This behavior may be changed via the global branch.autosetupmerge configuration flag. That setting can be overridden by using the \-\-track and \-\-no\-track options.

With a \fI\-m\fR or \fI\-M\fR option, <oldbranch> will be renamed to <newbranch>. If <oldbranch> had a corresponding reflog, it is renamed to match <newbranch>, and a reflog entry is created to remember the branch renaming. If <newbranch> exists, \-M must be used to force the rename to happen.

With a \-d or \-D option, <branchname> will be deleted. You may specify more than one branch for deletion. If the branch currently has a reflog then the reflog will also be deleted.

Use \-r together with \-d to delete remote\-tracking branches. Note, that it only makes sense to delete remote\-tracking branches if they no longer exist in remote repository or if \fBgit\-fetch\fR(1) was configured not to fetch them again. See also \fIprune\fR subcommand of \fBgit\-remote\fR(1) for way to clean up all obsolete remote\-tracking branches.
.SH "OPTIONS"
.TP
\-d
Delete a branch. The branch must be fully merged in HEAD.
.TP
\-D
Delete a branch irrespective of its merged status.
.TP
\-l
Create the branch's reflog. This activates recording of all changes made to the branch ref, enabling use of date based sha1 expressions such as "<branchname>@{yesterday}".
.TP
\-f
Force the creation of a new branch even if it means deleting a branch that already exists with the same name.
.TP
\-m
Move/rename a branch and the corresponding reflog.
.TP
\-M
Move/rename a branch even if the new branchname already exists.
.TP
\-\-color
Color branches to highlight current, local, and remote branches.
.TP
\-\-no\-color
Turn off branch colors, even when the configuration file gives the default to color output.
.TP
\-r
List or delete (if used with \-d) the remote\-tracking branches.
.TP
\-a
List both remote\-tracking branches and local branches.
.TP
\-v, \-\-verbose
Show sha1 and commit subject line for each head.
.TP
\-\-abbrev=<length>
Alter minimum display length for sha1 in output listing, default value is 7.
.TP
\-\-no\-abbrev
Display the full sha1s in output listing rather than abbreviating them.
.TP
\-\-track
When creating a new branch, set up configuration so that git\-pull will automatically retrieve data from the start point, which must be a branch. Use this if you always pull from the same upstream branch into the new branch, and if you don't want to use "git pull <repository> <refspec>" explicitly. This behavior is the default when the start point is a remote branch. Set the branch.autosetupmerge configuration variable to false if you want git\-checkout and git\-branch to always behave as if \fI\-\-no\-track\fR were given. Set it to always if you want this behavior when the start\-point is either a local or remote branch.
.TP
\-\-no\-track
Ignore the branch.autosetupmerge configuration variable.
.TP
\-\-contains <commit>
Only list branches which contain the specified commit.
.TP
\-\-merged
Only list branches which are fully contained by HEAD.
.TP
\-\-no\-merged
Do not list branches which are fully contained by HEAD.
.TP
<branchname>
The name of the branch to create or delete. The new branch name must pass all checks defined by \fBgit\-check\-ref\-format\fR(1). Some of these checks may restrict the characters allowed in a branch name.
.TP
<start\-point>
The new branch will be created with a HEAD equal to this. It may be given as a branch name, a commit\-id, or a tag. If this option is omitted, the current branch is assumed.
.TP
<oldbranch>
The name of an existing branch to rename.
.TP
<newbranch>
The new name for an existing branch. The same restrictions as for <branchname> applies.
.SH "EXAMPLES"
.TP
Start development off of a known tag
.sp
.nf
.ft C
$ git clone git://git.kernel.org/pub/scm/.../linux\-2.6 my2.6
$ cd my2.6
$ git branch my2.6.14 v2.6.14   \fB(1)\fR
$ git checkout my2.6.14
.ft

.fi
.sp
\fB1. \fRThis step and the next one could be combined into a single step with "checkout \-b my2.6.14 v2.6.14".
.br
.TP
Delete unneeded branch
.sp
.nf
.ft C
$ git clone git://git.kernel.org/.../git.git my.git
$ cd my.git
$ git branch \-d \-r origin/todo origin/html origin/man   \fB(1)\fR
$ git branch \-D test                                    \fB(2)\fR
.ft

.fi
.sp
\fB1. \fRDelete remote\-tracking branches "todo", "html", "man". Next \fIfetch\fR or \fIpull\fR will create them again unless you configure them not to. See \fBgit\-fetch\fR(1).
.br
\fB2. \fRDelete "test" branch even if the "master" branch (or whichever branch is currently checked out) does not have all commits from test branch.
.br
.SH "NOTES"
If you are creating a branch that you want to immediately checkout, it's easier to use the git checkout command with its \-b option to create a branch and check it out with a single command.

The options \-\-contains, \-\-merged and \-\-no\-merged serves three related but different purposes:
.TP 3
\(bu
\-\-contains <commit> is used to find all branches which will need special attention if <commit> were to be rebased or amended, since those branches contain the specified <commit>.
.TP
\(bu
\-\-merged is used to find all branches which can be safely deleted, since those branches are fully contained by HEAD.
.TP
\(bu
\-\-no\-merged is used to find branches which are candidates for merging into HEAD, since those branches are not fully contained by HEAD.
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl.org> and Junio C Hamano <junkio@cox.net>
.SH "DOCUMENTATION"
Documentation by Junio C Hamano and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(1) suite

