.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-LS\-FILES" "1" "07/19/2007" "Git 1.5.3.rc2.19.gc4fba" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-ls\-files \- Show information about files in the index and the working tree
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-ls\-files\fR [\-z] [\-t] [\-v]
                (\-\-[cached|deleted|others|ignored|stage|unmerged|killed|modified])*
                (\-[c|d|o|i|s|u|k|m])*
                [\-x <pattern>|\-\-exclude=<pattern>]
                [\-X <file>|\-\-exclude\-from=<file>]
                [\-\-exclude\-per\-directory=<file>]
                [\-\-error\-unmatch]
                [\-\-full\-name] [\-\-abbrev] [\-\-] [<file>]*
.fi
.SH "DESCRIPTION"
This merges the file listing in the directory cache index with the actual working directory list, and shows different combinations of the two.

One or more of the options below may be used to determine the files shown:
.SH "OPTIONS"
.TP
\-c|\-\-cached
Show cached files in the output (default)
.TP
\-d|\-\-deleted
Show deleted files in the output
.TP
\-m|\-\-modified
Show modified files in the output
.TP
\-o|\-\-others
Show other files in the output
.TP
\-i|\-\-ignored
Show ignored files in the output. Note that this also reverses any exclude list present.
.TP
\-s|\-\-stage
Show stage files in the output
.TP
\-\-directory
If a whole directory is classified as "other", show just its name (with a trailing slash) and not its whole contents.
.TP
\-\-no\-empty\-directory
Do not list empty directories. Has no effect without \-\-directory.
.TP
\-u|\-\-unmerged
Show unmerged files in the output (forces \-\-stage)
.TP
\-k|\-\-killed
Show files on the filesystem that need to be removed due to file/directory conflicts for checkout\-index to succeed.
.TP
\-z
\\0 line termination on output.
.TP
\-x|\-\-exclude=<pattern>
Skips files matching pattern. Note that pattern is a shell wildcard pattern.
.TP
\-X|\-\-exclude\-from=<file>
exclude patterns are read from <file>; 1 per line.
.TP
\-\-exclude\-per\-directory=<file>
read additional exclude patterns that apply only to the directory and its subdirectories in <file>.
.TP
\-\-error\-unmatch
If any <file> does not appear in the index, treat this as an error (return 1).
.TP
\-t
Identify the file status with the following tags (followed by a space) at the start of each line:

H


cached


M


unmerged


R


removed/deleted


C


modified/changed


K


to be killed


?


other

.TP
\-v
Similar to \-t, but use lowercase letters for files that are marked as \fIalways matching index\fR.
.TP
\-\-full\-name
When run from a subdirectory, the command usually outputs paths relative to the current directory. This option forces paths to be output relative to the project top directory.
.TP
\-\-abbrev[=<n>]
Instead of showing the full 40\-byte hexadecimal object lines, show only handful hexdigits prefix. Non default number of digits can be specified with \-\-abbrev=<n>.
.TP
\-\-
Do not interpret any more arguments as options.
.TP
<file>
Files to show. If no files are given all files which match the other specified criteria are shown.
.SH "OUTPUT"
show files just outputs the filename unless \fI\-\-stage\fR is specified in which case it outputs:
.sp
.nf
[<tag> ]<mode> <object> <stage> <file>
.fi
"git\-ls\-files \-\-unmerged" and "git\-ls\-files \-\-stage" can be used to examine detailed information on unmerged paths.

For an unmerged path, instead of recording a single mode/SHA1 pair, the index records up to three such pairs; one from tree O in stage 1, A in stage 2, and B in stage 3. This information can be used by the user (or the porcelain) to see what should eventually be recorded at the path. (see git\-read\-tree for more information on state)

When \-z option is not used, TAB, LF, and backslash characters in pathnames are represented as \\t, \\n, and \\\\, respectively.
.SH "EXCLUDE PATTERNS"
\fIgit\-ls\-files\fR can use a list of "exclude patterns" when traversing the directory tree and finding files to show when the flags \-\-others or \-\-ignored are specified. \fBgitignore\fR(5) specifies the format of exclude patterns.

These exclude patterns come from these places, in order:
.TP 3
1.
The command line flag \-\-exclude=<pattern> specifies a single pattern. Patterns are ordered in the same order they appear in the command line.
.TP
2.
The command line flag \-\-exclude\-from=<file> specifies a file containing a list of patterns. Patterns are ordered in the same order they appear in the file.
.TP
3.
command line flag \-\-exclude\-per\-directory=<name> specifies a name of the file in each directory \fIgit\-ls\-files\fR examines, normally .gitignore. Files in deeper directories take precedence. Patterns are ordered in the same order they appear in the files.

A pattern specified on the command line with \-\-exclude or read from the file specified with \-\-exclude\-from is relative to the top of the directory tree. A pattern read from a file specified by \-\-exclude\-per\-directory is relative to the directory that the pattern file appears in.
.SH "SEE ALSO"
\fBgit\-read\-tree\fR(1), \fBgitignore\fR(5)
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl.org>
.SH "DOCUMENTATION"
Documentation by David Greaves, Junio C Hamano, Josh Triplett, and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(7) suite

