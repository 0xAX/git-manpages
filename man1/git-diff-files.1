.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "GIT-DIFF-FILES" 1 "" "" ""
.SH NAME
git-diff-files \- Compares files in the working tree and the index
.SH "SYNOPSIS"


git\-diff\-files [\-q] [<common diff options>] [<path>...]

.SH "DESCRIPTION"


Compares the files in the working tree and the index\&. When paths are specified, compares only those named paths\&. Otherwise all entries in the index are compared\&. The output format is the same as "git\-diff\-index" and "git\-diff\-tree"\&.

.SH "OPTIONS"

.TP
\-p
Generate patch (see section on generating patches)

.TP
\-u
Synonym for "\-p"\&.

.TP
\-z
\\0 line termination on output

.TP
\-\-name\-only
Show only names of changed files\&.

.TP
\-\-name\-status
Show only names and status of changed files\&.

.TP
\-\-full\-index
Instead of the first handful characters, show full object name of pre\- and post\-image blob on the "index" line when generating a patch format output\&.

.TP
\-\-abbrev[=<n>]
Instead of showing the full 40\-byte hexadecimal object name in diff\-raw format output and diff\-tree header lines, show only handful dhexigits prefix\&. This is independent of \-\-full\-index option above, which controls the diff\-patch output format\&. Non default number of digits can be specified with \-\-abbrev=<n>\&.

.TP
\-B
Break complete rewrite changes into pairs of delete and create\&.

.TP
\-M
Detect renames\&.

.TP
\-C
Detect copies as well as renames\&.

.TP
\-\-find\-copies\-harder
For performance reasons, by default, \-C option finds copies only if the original file of the copy was modified in the same changeset\&. This flag makes the command inspect unmodified files as candidates for the source of copy\&. This is a very expensive operation for large projects, so use it with caution\&.

.TP
\-l<num>
\-M and \-C options require O(n^2) processing time where n is the number of potential rename/copy targets\&. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number\&.

.TP
\-S<string>
Look for differences that contain the change in <string>\&.

.TP
\-\-pickaxe\-all
When \-S finds a change, show all the changes in that changeset, not just the files that contain the change in <string>\&.

.TP
\-O<orderfile>
Output the patch in the order specified in the <orderfile>, which has one shell glob pattern per line\&.

.TP
\-R
Swap two inputs; that is, show differences from index or on\-disk file to tree contents\&.


For more detailed explanation on these common options, see also diffcore documentation: \fIdiffcore.html\fR\&.

.TP
\-1 \-2 \-3 or \-\-base \-\-ours \-\-theirs, and \-0
Diff against the "base" version, "our branch" or "their branch" respectively\&. With these options, diffs for merged entries are not shown\&.

The default is to diff against our branch (\-2) and the cleanly resolved paths\&. The option \-0 can be given to omit diff output for unmerged entries and just show "Unmerged"\&.

.TP
\-q
Remain silent even on nonexisting files

.SH "OUTPUT FORMAT"


The output format from "git\-diff\-index", "git\-diff\-tree" and "git\-diff\-files" are very similar\&.


These commands all compare two sets of things; what is compared differs:

.TP
git\-diff\-index <tree\-ish>
compares the <tree\-ish> and the files on the filesystem\&.

.TP
git\-diff\-index \-\-cached <tree\-ish>
compares the <tree\-ish> and the index\&.

.TP
git\-diff\-tree [\-r] <tree\-ish\-1> <tree\-ish\-2> [<pattern>...]
compares the trees named by the two arguments\&.

.TP
git\-diff\-files [<pattern>...]
compares the index and the files on the filesystem\&.


An output line is formatted this way:

.IP
in\-place edit  :100644 100644 bcd1234\&.\&.\&. 0123456\&.\&.\&. M file0
copy\-edit      :100644 100644 abcd123\&.\&.\&. 1234567\&.\&.\&. C68 file1 file2
rename\-edit    :100644 100644 abcd123\&.\&.\&. 1234567\&.\&.\&. R86 file1 file3
create         :000000 100644 0000000\&.\&.\&. 1234567\&.\&.\&. A file4
delete         :100644 000000 1234567\&.\&.\&. 0000000\&.\&.\&. D file5
unmerged       :000000 000000 0000000\&.\&.\&. 0000000\&.\&.\&. U file6

That is, from the left to the right:

.TP 3
1.
a colon\&.
.TP
2.
mode for "src"; 000000 if creation or unmerged\&.
.TP
3.
a space\&.
.TP
4.
mode for "dst"; 000000 if deletion or unmerged\&.
.TP
5.
a space\&.
.TP
6.
sha1 for "src"; 0{40} if creation or unmerged\&.
.TP
7.
a space\&.
.TP
8.
sha1 for "dst"; 0{40} if creation, unmerged or "look at work tree"\&.
.TP
9.
a space\&.
.TP
10.
status, followed by optional "score" number\&.
.TP
11.
a tab or a NUL when \-z option is used\&.
.TP
12.
path for "src"
.TP
13.
a tab or a NUL when \-z option is used; only exists for C or R\&.
.TP
14.
path for "dst"; only exists for C or R\&.
.TP
15.
an LF or a NUL when \-z option is used, to terminate the record\&.
.LP


<sha1> is shown as all 0's if a file is new on the filesystem and it is out of sync with the index\&.


Example:

.IP
:100644 100644 5be4a4\&.\&.\&.\&.\&.\&. 000000\&.\&.\&.\&.\&.\&. M file\&.c

When \-z option is not used, TAB, LF, and backslash characters in pathnames are represented as \\t, \\n, and \\\\, respectively\&.

.SH "GENERATING PATCHES WITH -P"


When "git\-diff\-index", "git\-diff\-tree", or "git\-diff\-files" are run with a \-p option, they do not produce the output described above; instead they produce a patch file\&.


The patch generation can be customized at two levels\&.

.TP 3
1.
When the environment variable GIT_EXTERNAL_DIFF is not set, these commands internally invoke "diff" like this:


.nf
diff \-L a/<path> \-L b/<path> \-pu <old> <new>
.fi
For added files, /dev/null is used for <old>\&. For removed files, /dev/null is used for <new>

The "diff" formatting options can be customized via the environment variable GIT_DIFF_OPTS\&. For example, if you prefer context diff:

.nf
GIT_DIFF_OPTS=\-c git\-diff\-index \-p HEAD
.fi
.TP
2.
When the environment variable GIT_EXTERNAL_DIFF is set, the program named by it is called, instead of the diff invocation described above\&.

For a path that is added, removed, or modified, GIT_EXTERNAL_DIFF is called with 7 parameters:


.nf
path old\-file old\-hex old\-mode new\-file new\-hex new\-mode
.fi
where:

<old|new>\-file
are files GIT_EXTERNAL_DIFF can use to read the contents of <old|new>,
<old|new>\-hex
are the 40\-hexdigit SHA1 hashes,
<old|new>\-mode
are the octal representation of the file modes\&.
The file parameters can point at the user's working file (e\&.g\&. new\-file in "git\-diff\-files"), /dev/null (e\&.g\&. old\-file when a new file is added), or a temporary file (e\&.g\&. old\-file in the index)\&. GIT_EXTERNAL_DIFF should not worry about unlinking the temporary file \-\-\- it is removed when GIT_EXTERNAL_DIFF exits\&.
.LP


For a path that is unmerged, GIT_EXTERNAL_DIFF is called with 1 parameter, <path>\&.

.SH "GIT SPECIFIC EXTENSION TO DIFF FORMAT"


What \-p option produces is slightly different from the traditional diff format\&.

.TP 3
1.
It is preceeded with a "git diff" header, that looks like this:


.nf
diff \-\-git a/file1 b/file2
.fi
The a/ and b/ filenames are the same unless rename/copy is involved\&. Especially, even for a creation or a deletion, /dev/null is _not_ used in place of a/ or b/ filenames\&.

When rename/copy is involved, file1 and file2 show the name of the source file of the rename/copy and the name of the file that rename/copy produces, respectively\&.
.TP
2.
It is followed by one or more extended header lines:

.nf
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>\&.\&.<hash> <mode>
.fi
.TP
3.
TAB, LF, and backslash characters in pathnames are represented as \\t, \\n, and \\\\, respectively\&.
.LP

.SH "AUTHOR"


Written by Linus Torvalds <torvalds@osdl\&.org>

.SH "DOCUMENTATION"


Documentation by David Greaves, Junio C Hamano and the git\-list <git@vger\&.kernel\&.org>\&.

.SH "GIT"


Part of the \fBgit\fR(7) suite

