.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-LOG" "1" "12/15/2007" "Git 1.5.4.rc0.36.g7680" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-log \- Show commit logs
.SH "SYNOPSIS"
\fIgit\-log\fR <option>\&...
.SH "DESCRIPTION"
Shows the commit logs.

The command takes options applicable to the \fBgit\-rev\-list\fR(1) command to control what is shown and how, and options applicable to the \fBgit\-diff\-tree\fR(1) commands to control how the changes each commit introduces are shown.

This manual page describes only the most frequently used options.
.SH "OPTIONS"
.TP
\-\-pretty[=\fI<format>\fR]
Pretty\-print the contents of the commit logs in a given format, where \fI<format>\fR can be one of \fIoneline\fR, \fIshort\fR, \fImedium\fR, \fIfull\fR, \fIfuller\fR, \fIemail\fR, \fIraw\fR and \fIformat:<string>\fR. When omitted, the format defaults to \fImedium\fR.
.TP
\-\-abbrev\-commit
Instead of showing the full 40\-byte hexadecimal commit object name, show only handful hexdigits prefix. Non default number of digits can be specified with "\-\-abbrev=<n>" (which also modifies diff output, if it is displayed).

This should make "\-\-pretty=oneline" a whole lot more readable for people using 80\-column terminals.
.TP
\-\-encoding[=<encoding>]
The commit objects record the encoding used for the log message in their encoding header; this option can be used to tell the command to re\-code the commit log message in the encoding preferred by the user. For non plumbing commands this defaults to UTF\-8.
.TP
\-p
Generate patch (see section on generating patches).
.TP
\-u
Synonym for "\-p".
.TP
\-U<n>
Shorthand for "\-\-unified=<n>".
.TP
\-\-unified=<n>
Generate diffs with <n> lines of context instead of the usual three. Implies "\-p".
.TP
\-\-raw
Generate the raw format.
.TP
\-\-patch\-with\-raw
Synonym for "\-p \-\-raw".
.TP
\-\-stat[=width[,name\-width]]
Generate a diffstat. You can override the default output width for 80\-column terminal by "\-\-stat=width". The width of the filename part can be controlled by giving another width to it separated by a comma.
.TP
\-\-numstat
Similar to \-\-stat, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two \- instead of saying 0 0.
.TP
\-\-shortstat
Output only the last line of the \-\-stat format containing total number of modified files, as well as number of added and deleted lines.
.TP
\-\-summary
Output a condensed summary of extended header information such as creations, renames and mode changes.
.TP
\-\-patch\-with\-stat
Synonym for "\-p \-\-stat".
.TP
\-z
NUL\-line termination on output. This affects the \-\-raw output field terminator. Also output from commands such as "git\-log" will be delimited with NUL between commits.
.TP
\-\-name\-only
Show only names of changed files.
.TP
\-\-name\-status
Show only names and status of changed files.
.TP
\-\-color
Show colored diff.
.TP
\-\-no\-color
Turn off colored diff, even when the configuration file gives the default to color output.
.TP
\-\-color\-words
Show colored word diff, i.e. color words which have changed.
.TP
\-\-no\-renames
Turn off rename detection, even when the configuration file gives the default to do so.
.TP
\-\-check
Warn if changes introduce trailing whitespace or an indent that uses a space before a tab. Exits with non\-zero status if problems are found. Not compatible with \-\-exit\-code.
.TP
\-\-full\-index
Instead of the first handful characters, show full object name of pre\- and post\-image blob on the "index" line when generating a patch format output.
.TP
\-\-binary
In addition to \-\-full\-index, output "binary diff" that can be applied with "git apply".
.TP
\-\-abbrev[=<n>]
Instead of showing the full 40\-byte hexadecimal object name in diff\-raw format output and diff\-tree header lines, show only handful hexdigits prefix. This is independent of \-\-full\-index option above, which controls the diff\-patch output format. Non default number of digits can be specified with \-\-abbrev=<n>.
.TP
\-B
Break complete rewrite changes into pairs of delete and create.
.TP
\-M
Detect renames.
.TP
\-C
Detect copies as well as renames. See also \-\-find\-copies\-harder.
.TP
\-\-diff\-filter=[ACDMRTUXB*]
Select only files that are Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R), have their type (mode) changed (T), are Unmerged (U), are Unknown (X), or have had their pairing Broken (B). Any combination of the filter characters may be used. When * (All\-or\-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected.
.TP
\-\-find\-copies\-harder
For performance reasons, by default, \-C option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one \-C option has the same effect.
.TP
\-l<num>
\-M and \-C options require O(n^2) processing time where n is the number of potential rename/copy targets. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number.
.TP
\-S<string>
Look for differences that contain the change in <string>.
.TP
\-\-pickaxe\-all
When \-S finds a change, show all the changes in that changeset, not just the files that contain the change in <string>.
.TP
\-\-pickaxe\-regex
Make the <string> not a plain string but an extended POSIX regex to match.
.TP
\-O<orderfile>
Output the patch in the order specified in the <orderfile>, which has one shell glob pattern per line.
.TP
\-R
Swap two inputs; that is, show differences from index or on\-disk file to tree contents.
.TP
\-\-text
Treat all files as text.
.TP
\-a
Shorthand for "\-\-text".
.TP
\-\-ignore\-space\-at\-eol
Ignore changes in whitespace at EOL.
.TP
\-\-ignore\-space\-change
Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.
.TP
\-b
Shorthand for "\-\-ignore\-space\-change".
.TP
\-\-ignore\-all\-space
Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.
.TP
\-w
Shorthand for "\-\-ignore\-all\-space".
.TP
\-\-exit\-code
Make the program exit with codes similar to diff(1). That is, it exits with 1 if there were differences and 0 means no differences.
.TP
\-\-quiet
Disable all output of the program. Implies \-\-exit\-code.
.TP
\-\-ext\-diff
Allow an external diff helper to be executed. If you set an external diff driver with \fBgitattributes\fR(5), you need to use this option with \fBgit\-log\fR(1) and friends.
.TP
\-\-no\-ext\-diff
Disallow external diff drivers.

For more detailed explanation on these common options, see also [1]\&\fIdiffcore documentation\fR.
.TP
\-<n>
Limits the number of commits to show.
.TP
<since>..<until>
Show only commits between the named two commits. When either <since> or <until> is omitted, it defaults to HEAD, i.e. the tip of the current branch. For a more complete list of ways to spell <since> and <until>, see "SPECIFYING REVISIONS" section in \fBgit\-rev\-parse\fR(1).
.TP
\-\-first\-parent
Follow only the first parent commit upon seeing a merge commit. This option gives a better overview of the evolution of a particular branch.
.TP
\-g, \-\-walk\-reflogs
Show commits as they were recorded in the reflog. The log contains a record about how the tip of a reference was changed. Cannot be combined with \-\-reverse. See also \fBgit\-reflog\fR(1).
.TP
\-\-decorate
Print out the ref names of any commits that are shown.
.TP
\-\-full\-diff
Without this flag, "git log \-p <paths>\&..." shows commits that touch the specified paths, and diffs about the same specified paths. With this, the full diff is shown for commits that touch the specified paths; this means that "<paths>\&..." limits only commits, and doesn't limit diff for those commits.
.TP
\-\-follow
Continue listing the history of a file beyond renames.
.TP
\-\-log\-size
Before the log message print out its size in bytes. Intended mainly for porcelain tools consumption. If git is unable to produce a valid value size is set to zero. Note that only message is considered, if also a diff is shown its size is not included.
.TP
<paths>\&...
Show only commits that affect the specified paths.
.SH "PRETTY FORMATS"
If the commit is a merge, and if the pretty\-format is not \fIoneline\fR, \fIemail\fR or \fIraw\fR, an additional line is inserted before the \fIAuthor:\fR line. This line begins with "Merge: " and the sha1s of ancestral commits are printed, separated by spaces. Note that the listed commits may not necessarily be the list of the \fBdirect\fR parent commits if you have limited your view of history: for example, if you are only interested in changes related to a certain directory or file.

Here are some additional details for each format:
.TP 3
\(bu
\fIoneline\fR
.sp
.nf
<sha1> <title line>
.fi
This is designed to be as compact as possible.
.TP
\(bu
\fIshort\fR
.sp
.nf
commit <sha1>
Author: <author>
.fi
.sp
.nf
<title line>
.fi
.TP
\(bu
\fImedium\fR
.sp
.nf
commit <sha1>
Author: <author>
Date: <date>
.fi
.sp
.nf
<title line>
.fi
.sp
.nf
<full commit message>
.fi
.TP
\(bu
\fIfull\fR
.sp
.nf
commit <sha1>
Author: <author>
Commit: <committer>
.fi
.sp
.nf
<title line>
.fi
.sp
.nf
<full commit message>
.fi
.TP
\(bu
\fIfuller\fR
.sp
.nf
commit <sha1>
Author: <author>
AuthorDate: <date & time>
Commit: <committer>
CommitDate: <date & time>
.fi
.sp
.nf
<title line>
.fi
.sp
.nf
<full commit message>
.fi
.TP
\(bu
\fIemail\fR
.sp
.nf
From <sha1> <date>
From: <author>
Date: <date & time>
Subject: [PATCH] <title line>
.fi
.sp
.nf
<full commit message>
.fi
.TP
\(bu
\fIraw\fR

The \fIraw\fR format shows the entire commit exactly as stored in the commit object. Notably, the SHA1s are displayed in full, regardless of whether \-\-abbrev or \-\-no\-abbrev are used, and \fIparents\fR information show the true parent commits, without taking grafts nor history simplification into account.
.TP
\(bu
\fIformat:\fR

The \fIformat:\fR format allows you to specify which information you want to show. It works a little bit like printf format, with the notable exception that you get a newline with \fI%n\fR instead of \fI\\n\fR.

E.g, \fIformat:"The author of %h was %an, %ar%nThe title was >>%s<<%n"\fR would show something like this:
.sp
.nf
.ft C
The author of fe6e0ee was Junio C Hamano, 23 hours ago
The title was >>t4119: test autocomputing \-p<n> for traditional diff input.<<
.ft

.fi
The placeholders are:
.RS
.TP 3
\(bu
\fI%H\fR: commit hash
.TP
\(bu
\fI%h\fR: abbreviated commit hash
.TP
\(bu
\fI%T\fR: tree hash
.TP
\(bu
\fI%t\fR: abbreviated tree hash
.TP
\(bu
\fI%P\fR: parent hashes
.TP
\(bu
\fI%p\fR: abbreviated parent hashes
.TP
\(bu
\fI%an\fR: author name
.TP
\(bu
\fI%ae\fR: author email
.TP
\(bu
\fI%ad\fR: author date
.TP
\(bu
\fI%aD\fR: author date, RFC2822 style
.TP
\(bu
\fI%ar\fR: author date, relative
.TP
\(bu
\fI%at\fR: author date, UNIX timestamp
.TP
\(bu
\fI%ai\fR: author date, ISO 8601 format
.TP
\(bu
\fI%cn\fR: committer name
.TP
\(bu
\fI%ce\fR: committer email
.TP
\(bu
\fI%cd\fR: committer date
.TP
\(bu
\fI%cD\fR: committer date, RFC2822 style
.TP
\(bu
\fI%cr\fR: committer date, relative
.TP
\(bu
\fI%ct\fR: committer date, UNIX timestamp
.TP
\(bu
\fI%ci\fR: committer date, ISO 8601 format
.TP
\(bu
\fI%e\fR: encoding
.TP
\(bu
\fI%s\fR: subject
.TP
\(bu
\fI%b\fR: body
.TP
\(bu
\fI%Cred\fR: switch color to red
.TP
\(bu
\fI%Cgreen\fR: switch color to green
.TP
\(bu
\fI%Cblue\fR: switch color to blue
.TP
\(bu
\fI%Creset\fR: reset color
.TP
\(bu
\fI%m\fR: left, right or boundary mark
.TP
\(bu
\fI%n\fR: newline
.RE
.SH "GENERATING PATCHES WITH \-P"
When "git\-diff\-index", "git\-diff\-tree", or "git\-diff\-files" are run with a \fI\-p\fR option, "git diff" without the \fI\-\-raw\fR option, or "git log" with the "\-p" option, they do not produce the output described above; instead they produce a patch file. You can customize the creation of such patches via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables.

What the \-p option produces is slightly different from the traditional diff format.
.TP 3
1.
It is preceded with a "git diff" header, that looks like this:
.sp
.nf
diff \-\-git a/file1 b/file2
.fi
The a/ and b/ filenames are the same unless rename/copy is involved. Especially, even for a creation or a deletion, /dev/null is _not_ used in place of a/ or b/ filenames.

When rename/copy is involved, file1 and file2 show the name of the source file of the rename/copy and the name of the file that rename/copy produces, respectively.
.TP
2.
It is followed by one or more extended header lines:
.sp
.nf
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>..<hash> <mode>
.fi
.TP
3.
TAB, LF, double quote and backslash characters in pathnames are represented as \\t, \\n, \\" and \\\\, respectively. If there is need for such substitution then the whole pathname is put in double quotes.

The similarity index is the percentage of unchanged lines, and the dissimilarity index is the percentage of changed lines. It is a rounded down integer, followed by a percent sign. The similarity index value of 100% is thus reserved for two equal files, while 100% dissimilarity means that no line from the old file made it into the new one.
.SH "COMBINED DIFF FORMAT"
"git\-diff\-tree", "git\-diff\-files" and "git\-diff" can take \fI\-c\fR or \fI\-\-cc\fR option to produce \fIcombined diff\fR. For showing a merge commit with "git log \-p", this is the default format. A \fIcombined diff\fR format looks like this:
.sp
.nf
.ft C
diff \-\-combined describe.c
index fabadb8,cc95eb0..4866510
\-\-\- a/describe.c
+++ b/describe.c
@@@ \-98,20 \-98,12 +98,20 @@@
        return (a_date > b_date) ? \-1 : (a_date == b_date) ? 0 : 1;
  }

\- static void describe(char *arg)
 \-static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  {
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) < 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) {
                initialized = 1;
                for_each_ref(get_name);
.ft

.fi
.TP 3
1.
It is preceded with a "git diff" header, that looks like this (when \fI\-c\fR option is used):
.sp
.nf
diff \-\-combined file
.fi
or like this (when \fI\-\-cc\fR option is used):
.sp
.nf
diff \-\-c file
.fi
.TP
2.
It is followed by one or more extended header lines (this example shows a merge with two parents):
.sp
.nf
index <hash>,<hash>..<hash>
mode <mode>,<mode>..<mode>
new file mode <mode>
deleted file mode <mode>,<mode>
.fi
The mode <mode>,<mode>..<mode> line appears only if at least one of the <mode> is different from the rest. Extended headers with information about detected contents movement (renames and copying detection) are designed to work with diff of two <tree\-ish> and are not used by combined diff format.
.TP
3.
It is followed by two\-line from\-file/to\-file header
.sp
.nf
\-\-\- a/file
+++ b/file
.fi
Similar to two\-line header for traditional \fIunified\fR diff format, /dev/null is used to signal created or deleted files.
.TP
4.
Chunk header format is modified to prevent people from accidentally feeding it to patch \-p1. Combined diff format was created for review of merge commit changes, and was not meant for apply. The change is similar to the change in the extended \fIindex\fR header:
.sp
.nf
@@@ <from\-file\-range> <from\-file\-range> <to\-file\-range> @@@
.fi
There are (number of parents + 1) @ characters in the chunk header for combined diff format.

Unlike the traditional \fIunified\fR diff format, which shows two files A and B with a single column that has \- (minus \(em appears in A but removed in B), + (plus \(em missing in A but added to B), or " " (space \(em unchanged) prefix, this format compares two or more files file1, file2,\&... with one file X, and shows how X differs from each of fileN. One column for each of fileN is prepended to the output line to note how X's line is different from it.

A \- character in the column N means that the line appears in fileN but it does not appear in the result. A + character in the column N means that the line appears in the last file, and fileN does not have that line (in other words, the line was added, from the point of view of that parent).

In the above example output, the function signature was changed from both files (hence two \- removals from both file1 and file2, plus ++ to mean one line that was added does not appear in either file1 nor file2). Also two other lines are the same from file1 but do not appear in file2 (hence prefixed with +).

When shown by git diff\-tree \-c, it compares the parents of a merge commit with the merge result (i.e. file1..fileN are the parents). When shown by git diff\-files \-c, it compares the two unresolved merge parents with the working tree file (i.e. file1 is stage 2 aka "our version", file2 is stage 3 aka "their version").
.SH "EXAMPLES"
.TP
git log \-\-no\-merges
Show the whole commit history, but skip any merges
.TP
git log v2.6.12.. include/scsi drivers/scsi
Show all commits since version \fIv2.6.12\fR that changed any file in the include/scsi or drivers/scsi subdirectories
.TP
git log \-\-since="2 weeks ago" \-\- gitk
Show the changes during the last two weeks to the file \fIgitk\fR. The "\-\-" is necessary to avoid confusion with the \fBbranch\fR named \fIgitk\fR
.TP
git log \-\-name\-status release..test
Show the commits that are in the "test" branch but not yet in the "release" branch, along with the list of paths each commit modifies.
.TP
git log \-\-follow builtin\-rev\-list.c
Shows the commits that changed builtin\-rev\-list.c, including those commits that occurred before the file was given its present name.
.SH "DISCUSSION"
At the core level, git is character encoding agnostic.
.TP 3
\(bu
The pathnames recorded in the index and in the tree objects are treated as uninterpreted sequences of non\-NUL bytes. What readdir(2) returns are what are recorded and compared with the data git keeps track of, which in turn are expected to be what lstat(2) and creat(2) accepts. There is no such thing as pathname encoding translation.
.TP
\(bu
The contents of the blob objects are uninterpreted sequence of bytes. There is no encoding translation at the core level.
.TP
\(bu
The commit log messages are uninterpreted sequence of non\-NUL bytes.

Although we encourage that the commit log messages are encoded in UTF\-8, both the core and git Porcelain are designed not to force UTF\-8 on projects. If all participants of a particular project find it more convenient to use legacy encodings, git does not forbid it. However, there are a few things to keep in mind.
.TP 3
1.
git\-commit\-tree (hence, git\-commit which uses it) issues an warning if the commit log message given to it does not look like a valid UTF\-8 string, unless you explicitly say your project uses a legacy encoding. The way to say this is to have i18n.commitencoding in .git/config file, like this:
.sp
.nf
.ft C
[i18n]
        commitencoding = ISO\-8859\-1
.ft

.fi
Commit objects created with the above setting record the value of i18n.commitencoding in its encoding header. This is to help other people who look at them later. Lack of this header implies that the commit log message is encoded in UTF\-8.
.TP
2.
git\-log, git\-show and friends looks at the encoding header of a commit object, and tries to re\-code the log message into UTF\-8 unless otherwise specified. You can specify the desired output encoding with i18n.logoutputencoding in .git/config file, like this:
.sp
.nf
.ft C
[i18n]
        logoutputencoding = ISO\-8859\-1
.ft

.fi
If you do not have this configuration variable, the value of i18n.commitencoding is used instead.

Note that we deliberately chose not to re\-code the commit log message when a commit is made to force UTF\-8 at the commit object level, because re\-coding to UTF\-8 is not necessarily a reversible operation.
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl.org>
.SH "DOCUMENTATION"
Documentation by David Greaves, Junio C Hamano and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(7) suite
.SH "REFERENCES"
.TP 3
1.\ diffcore documentation
\%diffcore.html
