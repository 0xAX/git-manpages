.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-LOG" "1" "01/15/2007" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-log \- Show commit logs
.SH "SYNOPSIS"
\fIgit\-log\fR <option>\&...
.SH "DESCRIPTION"
Shows the commit logs.

The command takes options applicable to the \fBgit\-rev\-list\fR(1) command to control what is shown and how, and options applicable to the \fBgit\-diff\-tree\fR(1) commands to control how the change each commit introduces are shown.

This manual page describes only the most frequently used options.
.SH "OPTIONS"
.TP
\-\-pretty[=\fI<format>\fR]
Pretty\-prints the details of a commit. \-\-pretty without an explicit =<format> defaults to \fImedium\fR. If the commit is a merge, and if the pretty\-format is not \fIoneline\fR, \fIemail\fR or \fIraw\fR, an additional line is inserted before the \fIAuthor:\fR line. This line begins with "Merge: " and the sha1s of ancestral commits are printed, separated by spaces. Note that the listed commits may not necessarily be the list of the \fBdirect\fR parent commits if you have limited your view of history: for example, if you are only interested in changes related to a certain directory or file. Here are some additional details for each format:
.RS
.TP 3
\(bu
\fIoneline\fR
.sp
.nf
<sha1> <title line>
.fi
This is designed to be as compact as possible.
.TP
\(bu
\fIshort\fR
.sp
.nf
commit <sha1>
Author: <author>
.fi
.sp
.nf
<title line>
.fi
.TP
\(bu
\fImedium\fR
.sp
.nf
commit <sha1>
Author: <author>
Date: <date>
.fi
.sp
.nf
<title line>
.fi
.sp
.nf
<full commit message>
.fi
.TP
\(bu
\fIfull\fR
.sp
.nf
commit <sha1>
Author: <author>
Commit: <committer>
.fi
.sp
.nf
<title line>
.fi
.sp
.nf
<full commit message>
.fi
.TP
\(bu
\fIfuller\fR
.sp
.nf
commit <sha1>
Author: <author>
AuthorDate: <date & time>
Commit: <committer>
CommitDate: <date & time>
.fi
.sp
.nf
<title line>
.fi
.sp
.nf
<full commit message>
.fi
.TP
\(bu
\fIemail\fR
.sp
.nf
From <sha1> <date>
From: <author>
Date: <date & time>
Subject: [PATCH] <title line>
.fi
.sp
.nf
full commit message>
.fi
.TP
\(bu
\fIraw\fR

The \fIraw\fR format shows the entire commit exactly as stored in the commit object. Notably, the SHA1s are displayed in full, regardless of whether \-\-abbrev or \-\-no\-abbrev are used, and \fIparents\fR information show the true parent commits, without taking grafts nor history simplification into account.
.RE
.TP
\-\-encoding[=<encoding>]
The commit objects record the encoding used for the log message in their encoding header; this option can be used to tell the command to re\-code the commit log message in the encoding preferred by the user. For non plumbing commands this defaults to UTF\-8.
.TP
\-<n>
Limits the number of commits to show.
.TP
<since>..<until>
Show only commits between the named two commits. When either <since> or <until> is omitted, it defaults to HEAD, i.e. the tip of the current branch.
.TP
\-p
Show the change the commit introduces in a patch form.
.TP
<paths>\&...
Show only commits that affect the specified paths.
.SH "EXAMPLES"
.TP
git log \-\-no\-merges
Show the whole commit history, but skip any merges
.TP
git log v2.6.12.. include/scsi drivers/scsi
Show all commits since version \fIv2.6.12\fR that changed any file in the include/scsi or drivers/scsi subdirectories
.TP
git log \-\-since="2 weeks ago" \-\- gitk
Show the changes during the last two weeks to the file \fIgitk\fR. The "\-\-" is necessary to avoid confusion with the \fBbranch\fR named \fIgitk\fR
.TP
git log \-r \-\-name\-status release..test
Show the commits that are in the "test" branch but not yet in the "release" branch, along with the list of paths each commit modifies.
.SH "DISCUSSION"
At the core level, git is character encoding agnostic.
.TP 3
\(bu
The pathnames recorded in the index and in the tree objects are treated as uninterpreted sequences of non\-NUL bytes. What readdir(2) returns are what are recorded and compared with the data git keeps track of, which in turn are expected to be what lstat(2) and creat(2) accepts. There is no such thing as pathname encoding translation.
.TP
\(bu
The contents of the blob objects are uninterpreted sequence of bytes. There is no encoding translation at the core level.
.TP
\(bu
The commit log messages are uninterpreted sequence of non\-NUL bytes.

Although we encourage that the commit log messages are encoded in UTF\-8, both the core and git Porcelain are designed not to force UTF\-8 on projects. If all participants of a particular project find it more convenient to use legacy encodings, git does not forbid it. However, there are a few things to keep in mind.
.TP 3
1.
git\-commit\-tree (hence, git\-commit which uses it) issues an warning if the commit log message given to it does not look like a valid UTF\-8 string, unless you explicitly say your project uses a legacy encoding. The way to say this is to have core.commitencoding in .git/config file, like this:
.sp
.nf
[core]
        commitencoding = ISO\-8859\-1
.fi
Commit objects created with the above setting record the value of core.commitencoding in its encoding header. This is to help other people who look at them later. Lack of this header implies that the commit log message is encoded in UTF\-8.
.TP
2.
git\-log, git\-show and friends looks at the encoding header of a commit object, and tries to re\-code the log message into UTF\-8 unless otherwise specified. You can specify the desired output encoding with core.logoutputencoding in .git/config file, like this:
.sp
.nf
[core]
        logoutputencoding = ISO\-8859\-1
.fi
If you do not have this configuration variable, the value of core.commitencoding is used instead.

Note that we deliberately chose not to re\-code the commit log message when a commit is made to force UTF\-8 at the commit object level, because re\-coding to UTF\-8 is not necessarily a reversible operation.
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl.org>
.SH "DOCUMENTATION"
Documentation by David Greaves, Junio C Hamano and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(7) suite

