.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-FETCH" "1" "01/01/2007" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-fetch \- Download objects and a head from another repository
.SH "SYNOPSIS"
\fIgit\-fetch\fR <options> <repository> <refspec>\&...
.SH "DESCRIPTION"
Fetches named heads or tags from another repository, along with the objects necessary to complete them.

The ref names and their object names of fetched refs are stored in .git/FETCH_HEAD. This information is left for a later merge operation done by "git merge".
.SH "OPTIONS"
.TP
\-a, \-\-append
Append ref names and object names of fetched refs to the existing contents of .git/FETCH_HEAD. Without this option old data in .git/FETCH_HEAD will be overwritten.
.TP
\-\-upload\-pack <upload\-pack>
When given, and the repository to fetch from is handled by \fIgit\-fetch\-pack\fR, \fI\-\-exec=<upload\-pack>\fR is passed to the command to specify non\-default path for the command run on the other end.
.TP
\-f, \-\-force
When git\-fetch is used with <rbranch>:<lbranch> refspec, it refuses to update the local branch <lbranch> unless the remote branch <rbranch> it fetches is a descendant of <lbranch>. This option overrides that check.
.TP
\-\-no\-tags
By default, git\-fetch fetches tags that point at objects that are downloaded from the remote repository and stores them locally. This option disables this automatic tag following.
.TP
\-t, \-\-tags
Most of the tags are fetched automatically as branch heads are downloaded, but tags that do not point at objects reachable from the branch heads that are being tracked will not be fetched by this mechanism. This flag lets all tags and their associated objects be downloaded.
.TP
\-k, \-\-keep
Keep downloaded pack.
.TP
\-u, \-\-update\-head\-ok
By default git\-fetch refuses to update the head which corresponds to the current branch. This flag disables the check. Note that fetching into the current branch will not update the index and working directory, so use it with care.
.TP
<repository>
The "remote" repository that is the source of a fetch or pull operation. See the section GIT URLS below.
.TP
<refspec>
The canonical format of a <refspec> parameter is +?<src>:<dst>; that is, an optional plus +, followed by the source ref, followed by a colon :, followed by the destination ref.

The remote ref that matches <src> is fetched, and if <dst> is not empty string, the local ref that matches it is fast forwarded using <src>. Again, if the optional plus + is used, the local ref is updated even if it does not result in a fast forward update.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBNote\fR
If the remote branch from which you want to pull is modified in non\-linear ways such as being rewound and rebased frequently, then a pull will attempt a merge with an older version of itself, likely conflict, and fail. It is under these conditions that you would want to use the + sign to indicate non\-fast\-forward updates will be needed. There is currently no easy way to determine or declare that a branch will be made available in a repository with this behavior; the pulling user simply must know this is the expected usage pattern for a branch.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBNote\fR
You never do your own development on branches that appear on the right hand side of a <refspec> colon on Pull: lines; they are to be updated by git\-fetch. If you intend to do development derived from a remote branch B, have a Pull: line to track it (i.e. Pull: B:remote\-B), and have a separate branch my\-B to do your development on top of it. The latter is created by git branch my\-B remote\-B (or its equivalent git checkout \-b my\-B remote\-B). Run git fetch to keep track of the progress of the remote side, and when you see something new on the remote branch, merge it into your development branch with git pull . remote\-B, while you are on my\-B branch. The common Pull: master:origin mapping of a remote master branch to a local origin branch, which is then merged to a local development branch, again typically named master, is made when you run git clone for you to follow this pattern.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBNote\fR
There is a difference between listing multiple <refspec> directly on git\-pull command line and having multiple Pull: <refspec> lines for a <repository> and running git\-pull command without any explicit <refspec> parameters. <refspec> listed explicitly on the command line are always merged into the current branch after fetching. In other words, if you list more than one remote refs, you would be making an Octopus. While git\-pull run without any explicit <refspec> parameter takes default <refspec>s from Pull: lines, it merges only the first <refspec> found into the current branch, after fetching all the remote refs. This is because making an Octopus from remote refs is rarely done, while keeping track of multiple remote heads in one\-go by fetching more than one is often useful.

Some short\-cut notations are also supported.
.RS
.TP 3
\(bu
tag <tag> means the same as refs/tags/<tag>:refs/tags/<tag>; it requests fetching everything up to the given tag.
.TP
\(bu
A parameter <ref> without a colon is equivalent to <ref>: when pulling/fetching, so it merges <ref> into the current branch without storing the remote branch anywhere locally
.RE
.SH "GIT URLS"
One of the following notations can be used to name the remote repository:
.IP
.TP 3
\(bu
rsync://host.xz/path/to/repo.git/
.TP
\(bu
http://host.xz/path/to/repo.git/
.TP
\(bu
https://host.xz/path/to/repo.git/
.TP
\(bu
git://host.xz/path/to/repo.git/
.TP
\(bu
git://host.xz/~user/path/to/repo.git/
.TP
\(bu
ssh://[user@]host.xz/path/to/repo.git/
.TP
\(bu
ssh://[user@]host.xz/~user/path/to/repo.git/
.TP
\(bu
ssh://[user@]host.xz/~/path/to/repo.git

SSH is the default transport protocol. You can optionally specify which user to log\-in as, and an alternate, scp\-like syntax is also supported. Both syntaxes support username expansion, as does the native git protocol. The following three are identical to the last three above, respectively:
.IP
.TP 3
\(bu
[user@]host.xz:/path/to/repo.git/
.TP
\(bu
[user@]host.xz:~user/path/to/repo.git/
.TP
\(bu
[user@]host.xz:path/to/repo.git

To sync with a local directory, use:
.IP
.TP 3
\(bu
/path/to/repo.git/
.SH "REMOTES"
In addition to the above, as a short\-hand, the name of a file in $GIT_DIR/remotes directory can be given; the named file should be in the following format:
.sp
.nf
        URL: one of the above URL format
        Push: <refspec>
        Pull: <refspec>
.fi
Then such a short\-hand is specified in place of <repository> without <refspec> parameters on the command line, <refspec> specified on Push: lines or Pull: lines are used for git\-push and git\-fetch/git\-pull, respectively. Multiple Push: and Pull: lines may be specified for additional branch mappings.

Or, equivalently, in the $GIT_DIR/config (note the use of fetch instead of Pull:):
.sp
.nf
        [remote "<remote>"]
                url = <url>
                push = <refspec>
                fetch = <refspec>
.fi
The name of a file in $GIT_DIR/branches directory can be specified as an older notation short\-hand; the named file should contain a single line, a URL in one of the above formats, optionally followed by a hash # and the name of remote head (URL fragment notation). $GIT_DIR/branches/<remote> file that stores a <url> without the fragment is equivalent to have this in the corresponding file in the $GIT_DIR/remotes/ directory.
.sp
.nf
        URL: <url>
        Pull: refs/heads/master:<remote>
.fi
while having <url>#<head> is equivalent to
.sp
.nf
        URL: <url>
        Pull: refs/heads/<head>:<remote>
.fi
.SH "SEE ALSO"
\fBgit\-pull\fR(1)
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl.org> and Junio C Hamano <junkio@cox.net>
.SH "DOCUMENTATION"
Documentation by David Greaves, Junio C Hamano and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(7) suite

