.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-COMMIT" "1" "01/17/2007" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-commit \- Record your changes
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-commit\fR [\-a] [\-s] [\-v] [(\-c | \-C) <commit> | \-F <file> | \-m <msg>]
           [\-\-no\-verify] [\-\-amend] [\-e] [\-\-author <author>]
           [\-\-] [[\-i | \-o ]<file>\&...]
.fi
.SH "DESCRIPTION"
Use \fIgit commit\fR when you want to record your changes into the repository along with a log message describing what the commit is about. All changes to be committed must be explicitly identified using one of the following methods:
.TP 3
1.
by using \fBgit\-add\fR(1) to incrementally "add" changes to the next commit before using the \fIcommit\fR command (Note: even modified files must be "added");
.TP
2.
by using \fBgit\-rm\fR(1) to identify content removal for the next commit, again before using the \fIcommit\fR command;
.TP
3.
by directly listing files containing changes to be committed as arguments to the \fIcommit\fR command, in which cases only those files alone will be considered for the commit;
.TP
4.
by using the \-a switch with the \fIcommit\fR command to automatically "add" changes from all known files i.e. files that have already been committed before, and to automatically "rm" files that have been removed from the working tree, and perform the actual commit.

The \fBgit\-status\fR(1) command can be used to obtain a summary of what is included by any of the above for the next commit by giving the same set of parameters you would give to this command.

If you make a commit and then found a mistake immediately after that, you can recover from it with \fBgit\-reset\fR(1).
.SH "OPTIONS"
.TP
\-a|\-\-all
Tell the command to automatically stage files that have been modified and deleted, but new files you have not told git about are not affected.
.TP
\-c or \-C <commit>
Take existing commit object, and reuse the log message and the authorship information (including the timestamp) when creating the commit. With \fI\-C\fR, the editor is not invoked; with \fI\-c\fR the user can further edit the commit message.
.TP
\-F <file>
Take the commit message from the given file. Use \fI\-\fR to read the message from the standard input.
.TP
\-\-author <author>
Override the author name used in the commit. Use A U Thor <author@example.com> format.
.TP
\-m <msg>
Use the given <msg> as the commit message.
.TP
\-s|\-\-signoff
Add Signed\-off\-by line at the end of the commit message.
.TP
\-\-no\-verify
This option bypasses the pre\-commit hook. See also [1]\&\fIhooks\fR.
.TP
\-e|\-\-edit
The message taken from file with \-F, command line with \-m, and from file with \-C are usually used as the commit log message unmodified. This option lets you further edit the message taken from these sources.
.TP
\-\-amend
Used to amend the tip of the current branch. Prepare the tree object you would want to replace the latest commit as usual (this includes the usual \-i/\-o and explicit paths), and the commit log editor is seeded with the commit message from the tip of the current branch. The commit you create replaces the current tip \(em if it was a merge, it will have the parents of the current tip as parents \(em so the current top commit is discarded.

It is a rough equivalent for:
.sp
.nf
        $ git reset \-\-soft HEAD^
        $ ... do something else to come up with the right tree ...
        $ git commit \-c ORIG_HEAD
.fi
but can be used to amend a merge commit.
.TP
\-i|\-\-include
Before making a commit out of staged contents so far, stage the contents of paths given on the command line as well. This is usually not what you want unless you are concluding a conflicted merge.
.TP
\-q|\-\-quiet
Suppress commit summary message.
.TP
\-\-
Do not interpret any more arguments as options.
.TP
<file>\&...
When files are given on the command line, the command commits the contents of the named files, without recording the changes already staged. The contents of these files are also staged for the next commit on top of what have been staged before.
.SH "EXAMPLES"
When recording your own work, the contents of modified files in your working tree are temporarily stored to a staging area called the "index" with \fBgit\-add\fR(1). Removal of a file is staged with \fBgit\-rm\fR(1). After building the state to be committed incrementally with these commands, git commit (without any pathname parameter) is used to record what has been staged so far. This is the most basic form of the command. An example:
.sp
.nf
$ edit hello.c
$ git rm goodbye.c
$ git add hello.c
$ git commit
.fi
Instead of staging files after each individual change, you can tell git commit to notice the changes to the files whose contents are tracked in your working tree and do corresponding git add and git rm for you. That is, this example does the same as the earlier example if there is no other change in your working tree:
.sp
.nf
$ edit hello.c
$ rm goodbye.c
$ git commit \-a
.fi
The command git commit \-a first looks at your working tree, notices that you have modified hello.c and removed goodbye.c, and performs necessary git add and git rm for you.

After staging changes to many files, you can alter the order the changes are recorded in, by giving pathnames to git commit. When pathnames are given, the command makes a commit that only records the changes made to the named paths:
.sp
.nf
$ edit hello.c hello.h
$ git add hello.c hello.h
$ edit Makefile
$ git commit Makefile
.fi
This makes a commit that records the modification to Makefile. The changes staged for hello.c and hello.h are not included in the resulting commit. However, their changes are not lost \(em they are still staged and merely held back. After the above sequence, if you do:
.sp
.nf
$ git commit
.fi
this second commit would record the changes to hello.c and hello.h as expected.

After a merge (initiated by either \fBgit\-merge\fR(1) or \fBgit\-pull\fR(1)) stops because of conflicts, cleanly merged paths are already staged to be committed for you, and paths that conflicted are left in unmerged state. You would have to first check which paths are conflicting with \fBgit\-status\fR(1) and after fixing them manually in your working tree, you would stage the result as usual with \fBgit\-add\fR(1):
.sp
.nf
$ git status | grep unmerged
unmerged: hello.c
$ edit hello.c
$ git add hello.c
.fi
After resolving conflicts and staging the result, git ls\-files \-u would stop mentioning the conflicted path. When you are done, run git commit to finally record the merge:
.sp
.nf
$ git commit
.fi
As with the case to record your own changes, you can use \-a option to save typing. One difference is that during a merge resolution, you cannot use git commit with pathnames to alter the order the changes are committed, because the merge should be recorded as a single commit. In fact, the command refuses to run when given pathnames (but see \-i option).
.SH "DISCUSSION"
Though not required, it's a good idea to begin the commit message with a single short (less than 50 character) line summarizing the change, followed by a blank line and then a more thorough description. Tools that turn commits into email, for example, use the first line on the Subject: line and the rest of the commit in the body.

At the core level, git is character encoding agnostic.
.TP 3
\(bu
The pathnames recorded in the index and in the tree objects are treated as uninterpreted sequences of non\-NUL bytes. What readdir(2) returns are what are recorded and compared with the data git keeps track of, which in turn are expected to be what lstat(2) and creat(2) accepts. There is no such thing as pathname encoding translation.
.TP
\(bu
The contents of the blob objects are uninterpreted sequence of bytes. There is no encoding translation at the core level.
.TP
\(bu
The commit log messages are uninterpreted sequence of non\-NUL bytes.

Although we encourage that the commit log messages are encoded in UTF\-8, both the core and git Porcelain are designed not to force UTF\-8 on projects. If all participants of a particular project find it more convenient to use legacy encodings, git does not forbid it. However, there are a few things to keep in mind.
.TP 3
1.
git\-commit\-tree (hence, git\-commit which uses it) issues an warning if the commit log message given to it does not look like a valid UTF\-8 string, unless you explicitly say your project uses a legacy encoding. The way to say this is to have core.commitencoding in .git/config file, like this:
.sp
.nf
[core]
        commitencoding = ISO\-8859\-1
.fi
Commit objects created with the above setting record the value of core.commitencoding in its encoding header. This is to help other people who look at them later. Lack of this header implies that the commit log message is encoded in UTF\-8.
.TP
2.
git\-log, git\-show and friends looks at the encoding header of a commit object, and tries to re\-code the log message into UTF\-8 unless otherwise specified. You can specify the desired output encoding with core.logoutputencoding in .git/config file, like this:
.sp
.nf
[core]
        logoutputencoding = ISO\-8859\-1
.fi
If you do not have this configuration variable, the value of core.commitencoding is used instead.

Note that we deliberately chose not to re\-code the commit log message when a commit is made to force UTF\-8 at the commit object level, because re\-coding to UTF\-8 is not necessarily a reversible operation.
.SH "ENVIRONMENT VARIABLES"
The command specified by either the VISUAL or EDITOR environment variables is used to edit the commit log message.
.SH "HOOKS"
This command can run commit\-msg, pre\-commit, and post\-commit hooks. See [1]\&\fIhooks\fR for more information.
.SH "SEE ALSO"
\fBgit\-add\fR(1), \fBgit\-rm\fR(1), \fBgit\-mv\fR(1), \fBgit\-merge\fR(1), \fBgit\-commit\-tree\fR(1)
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl.org> and Junio C Hamano <junkio@cox.net>
.SH "GIT"
Part of the \fBgit\fR(7) suite
.SH "REFERENCES"
.TP 3
1.\ hooks
\%hooks.html
