.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-PUSH" "1" "09/06/2007" "Git 1.5.3.1.19.gb5ef6" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-push \- Update remote refs along with associated objects
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-push\fR [\-\-all] [\-\-tags] [\-\-receive\-pack=<git\-receive\-pack>]
           [\-\-repo=all] [\-f | \-\-force] [\-v] [<repository> <refspec>\&...]
.fi
.SH "DESCRIPTION"
Updates remote refs using local refs, while sending objects necessary to complete the given refs.

You can make interesting things happen to a repository every time you push into it, by setting up \fIhooks\fR there. See documentation for \fBgit\-receive\-pack\fR(1).
.SH "OPTIONS"
.TP
<repository>
The "remote" repository that is destination of a push operation. See the section GIT URLS below.
.TP
<refspec>
The canonical format of a <refspec> parameter is +?<src>:<dst>; that is, an optional plus +, followed by the source ref, followed by a colon :, followed by the destination ref.

The <src> side can be an arbitrary "SHA1 expression" that can be used as an argument to git\-cat\-file \-t. E.g. master~4 (push four parents before the current master head).

The local ref that matches <src> is used to fast forward the remote ref that matches <dst>. If the optional plus + is used, the remote ref is updated even if it does not result in a fast forward update.

Note: If no explicit refspec is found, (that is neither on the command line nor in any Push line of the corresponding remotes file\-\-\-see below), then all the refs that exist both on the local side and on the remote side are updated.

tag <tag> means the same as refs/tags/<tag>:refs/tags/<tag>.

A parameter <ref> without a colon pushes the <ref> from the source repository to the destination repository under the same name.

Pushing an empty <src> allows you to delete the <dst> ref from the remote repository.
.TP
\-\-all
Instead of naming each ref to push, specifies that all refs be pushed.
.TP
\-\-tags
All refs under $GIT_DIR/refs/tags are pushed, in addition to refspecs explicitly listed on the command line.
.TP
\-\-receive\-pack=<git\-receive\-pack>
Path to the \fIgit\-receive\-pack\fR program on the remote end. Sometimes useful when pushing to a remote repository over ssh, and you do not have the program in a directory on the default $PATH.
.TP
\-\-exec=<git\-receive\-pack>
Same as \-\-receive\-pack=<git\-receive\-pack>.
.TP
\-f, \-\-force
Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. This flag disables the check. This can cause the remote repository to lose commits; use it with care.
.TP
\-\-repo=<repo>
When no repository is specified the command defaults to "origin"; this overrides it.
.TP
\-\-thin, \-\-no\-thin
These options are passed to git\-send\-pack. Thin transfer spends extra cycles to minimize the number of objects to be sent and meant to be used on slower connection.
.TP
\-v
Run verbosely.
.SH "GIT URLS"
One of the following notations can be used to name the remote repository:
.IP
.TP 3
\(bu
rsync://host.xz/path/to/repo.git/
.TP
\(bu
http://host.xz/path/to/repo.git/
.TP
\(bu
https://host.xz/path/to/repo.git/
.TP
\(bu
git://host.xz/path/to/repo.git/
.TP
\(bu
git://host.xz/~user/path/to/repo.git/
.TP
\(bu
ssh://[user@]host.xz[:port]/path/to/repo.git/
.TP
\(bu
ssh://[user@]host.xz/path/to/repo.git/
.TP
\(bu
ssh://[user@]host.xz/~user/path/to/repo.git/
.TP
\(bu
ssh://[user@]host.xz/~/path/to/repo.git

SSH is the default transport protocol over the network. You can optionally specify which user to log\-in as, and an alternate, scp\-like syntax is also supported. Both syntaxes support username expansion, as does the native git protocol, but only the former supports port specification. The following three are identical to the last three above, respectively:
.IP
.TP 3
\(bu
[user@]host.xz:/path/to/repo.git/
.TP
\(bu
[user@]host.xz:~user/path/to/repo.git/
.TP
\(bu
[user@]host.xz:path/to/repo.git

To sync with a local directory, you can use:
.IP
.TP 3
\(bu
/path/to/repo.git/
.TP
\(bu
file:///path/to/repo.git/

They are mostly equivalent, except when cloning. See \fBgit\-clone\fR(1) for details.
.SH "REMOTES"
In addition to the above, as a short\-hand, the name of a file in $GIT_DIR/remotes directory can be given; the named file should be in the following format:
.sp
.nf
.ft C
        URL: one of the above URL format
        Push: <refspec>
        Pull: <refspec>
.ft

.fi
Then such a short\-hand is specified in place of <repository> without <refspec> parameters on the command line, <refspec> specified on Push: lines or Pull: lines are used for git\-push and git\-fetch/git\-pull, respectively. Multiple Push: and Pull: lines may be specified for additional branch mappings.

Or, equivalently, in the $GIT_DIR/config (note the use of fetch instead of Pull:):
.sp
.nf
.ft C
        [remote "<remote>"]
                url = <url>
                push = <refspec>
                fetch = <refspec>
.ft

.fi
The name of a file in $GIT_DIR/branches directory can be specified as an older notation short\-hand; the named file should contain a single line, a URL in one of the above formats, optionally followed by a hash # and the name of remote head (URL fragment notation). $GIT_DIR/branches/<remote> file that stores a <url> without the fragment is equivalent to have this in the corresponding file in the $GIT_DIR/remotes/ directory.
.sp
.nf
.ft C
        URL: <url>
        Pull: refs/heads/master:<remote>
.ft

.fi
while having <url>#<head> is equivalent to
.sp
.nf
.ft C
        URL: <url>
        Pull: refs/heads/<head>:<remote>
.ft

.fi
.SH "EXAMPLES"
.TP
git push origin master
Find a ref that matches master in the source repository (most likely, it would find refs/heads/master), and update the same ref (e.g. refs/heads/master) in origin repository with it.
.TP
git push origin :experimental
Find a ref that matches experimental in the origin repository (e.g. refs/heads/experimental), and delete it.
.TP
git push origin master:satellite/master
Find a ref that matches master in the source repository (most likely, it would find refs/heads/master), and update the ref that matches satellite/master (most likely, it would be refs/remotes/satellite/master) in origin repository with it.
.TP
git push origin master:refs/heads/experimental
Create the branch experimental in the origin repository by copying the current master branch. This form is usually needed to create a new branch in the remote repository as there is no experimental branch to match.
.SH "AUTHOR"
Written by Junio C Hamano <junkio@cox.net>, later rewritten in C by Linus Torvalds <torvalds@osdl.org>
.SH "DOCUMENTATION"
Documentation by Junio C Hamano and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(7) suite

