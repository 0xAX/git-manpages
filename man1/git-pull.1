.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "GIT-PULL" 1 "" "" ""
.SH NAME
git-pull \- Pull and merge from another repository.
.SH "SYNOPSIS"


git\-pull <options> <repository> <refspec>...

.SH "DESCRIPTION"


Runs git\-fetch with the given parameters, and calls git\-merge to merge the retrieved head(s) into the current branch\&.


Note that you can use \&. (current directory) as the <repository> to pull from the local repository -- this is useful when merging local branches into the current branch\&.

.SH "OPTIONS"

.TP
\-n, \-\-no\-summary
Do not show diffstat at the end of the merge\&.

.TP
\-\-no\-commit
Perform the merge but pretend the merge failed and do not autocommit, to give the user a chance to inspect and further tweak the merge result before committing\&.

.TP
\-s <strategy>, \-\-strategy=<strategy>
Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried\&. If there is no \-s option, a built\-in list of strategies is used instead (git\-merge\-recursive when merging a single head, git\-merge\-octopus otherwise)\&.

.TP
\-a, \-\-append
Append ref names and object names of fetched refs to the existing contents of \&.git/FETCH_HEAD\&. Without this option old data in \&.git/FETCH_HEAD will be overwritten\&.

.TP
\-f, \-\-force
When git\-fetch is used with <rbranch>:<lbranch> refspec, it refuses to update the local branch <lbranch> unless the remote branch <rbranch> it fetches is a descendant of <lbranch>\&. This option overrides that check\&.

.TP
\-\-no\-tags
By default, git\-fetch fetches tags that point at objects that are downloaded from the remote repository and stores them locally\&. This option disables this automatic tag following\&.

.TP
\-t, \-\-tags
Most of the tags are fetched automatically as branch heads are downloaded, but tags that do not point at objects reachable from the branch heads that are being tracked will not be fetched by this mechanism\&. This flag lets all tags and their associated objects be downloaded\&.

.TP
\-k, \-\-keep
Keep downloaded pack\&.

.TP
\-u, \-\-update\-head\-ok
By default git\-fetch refuses to update the head which corresponds to the current branch\&. This flag disables the check\&. Note that fetching into the current branch will not update the index and working directory, so use it with care\&.

.TP
<repository>
The "remote" repository that is the source of a fetch or pull operation, or the destination of a push operation\&. One of the following notations can be used to name the remote repository:


.IP

.RS
.TP 3
\(bu
rsync://host\&.xz/path/to/repo\&.git/
.TP
\(bu
http://host\&.xz/path/to/repo\&.git/
.TP
\(bu
https://host\&.xz/path/to/repo\&.git/
.TP
\(bu
git://host\&.xz/path/to/repo\&.git/
.TP
\(bu
git://host\&.xz/~user/path/to/repo\&.git/
.TP
\(bu
ssh://host\&.xz/path/to/repo\&.git/
.TP
\(bu
ssh://host\&.xz/~user/path/to/repo\&.git/
.TP
\(bu
ssh://host\&.xz/~/path/to/repo\&.git
.LP
.RE
.IP
SSH Is the default transport protocol and also supports an scp\-like syntax\&. Both syntaxes support username expansion, as does the native git protocol\&. The following three are identical to the last three above, respectively:


.IP

.RS
.TP 3
\(bu
host\&.xz:/path/to/repo\&.git/
.TP
\(bu
host\&.xz:~user/path/to/repo\&.git/
.TP
\(bu
host\&.xz:path/to/repo\&.git
.LP
.RE
.IP
To sync with a local directory, use:


.IP

.RS
.TP 3
\(bu
/path/to/repo\&.git/
.LP
.RE
.IP
In addition to the above, as a short\-hand, the name of a file in $GIT_DIR/remotes directory can be given; the named file should be in the following format:


.nf
URL: one of the above URL format
Push: <refspec>
Pull: <refspec>
.fi
When such a short\-hand is specified in place of <repository> without <refspec> parameters on the command line, <refspec> specified on Push: lines or Pull: lines are used for git\-push and git\-fetch/git\-pull, respectively\&. Multiple Push: and and Pull: lines may be specified for additional branch mappings\&.

The name of a file in $GIT_DIR/branches directory can be specified as an older notation short\-hand; the named file should contain a single line, a URL in one of the above formats, optionally followed by a hash # and the name of remote head (URL fragment notation)\&. $GIT_DIR/branches/<remote> file that stores a <url> without the fragment is equivalent to have this in the corresponding file in the $GIT_DIR/remotes/ directory\&.


.nf
URL: <url>
Pull: refs/heads/master:<remote>
.fi
while having <url>#<head> is equivalent to

.nf
URL: <url>
Pull: refs/heads/<head>:<remote>
.fi

.TP
<refspec>
The canonical format of a <refspec> parameter is +?<src>:<dst>; that is, an optional plus +, followed by the source ref, followed by a colon :, followed by the destination ref\&.

When used in git\-push, the <src> side can be an arbitrary "SHA1 expression" that can be used as an argument to git\-cat\-file \-t\&. E\&.g\&. master~4 (push four parents before the current master head)\&.

For git\-push, the local ref that matches <src> is used to fast forward the remote ref that matches <dst>\&. If the optional plus + is used, the remote ref is updated even if it does not result in a fast forward update\&.

For git\-fetch and git\-pull, the remote ref that matches <src> is fetched, and if <dst> is not empty string, the local ref that matches it is fast forwarded using <src>\&. Again, if the optional plus + is used, the local ref is updated even if it does not result in a fast forward update\&.


.RS
.Sh "Note"
If the remote branch from which you want to pull is modified in non\-linear ways such as being rewound and rebased frequently, then a pull will attempt a merge with an older version of itself, likely conflict, and fail\&. It is under these conditions that you would want to use the + sign to indicate non\-fast\-forward updates will be needed\&. There is currently no easy way to determine or declare that a branch will be made available in a repository with this behavior; the pulling user simply must know this is the expected usage pattern for a branch\&.

.RE

.RS
.Sh "Note"
You never do your own development on branches that appear on the right hand side of a <refspec> colon on Pull: lines; they are to be updated by git\-fetch\&. If you intend to do development derived from a remote branch B, have a Pull: line to track it (i\&.e\&. Pull: B:remote\-B), and have a separate branch my\-B to do your development on top of it\&. The latter is created by git branch my\-B remote\-B (or its equivalent git checkout \-b my\-B remote\-B)\&. Run git fetch to keep track of the progress of the remote side, and when you see something new on the remote branch, merge it into your development branch with git pull \&. remote\-B, while you are on my\-B branch\&. The common Pull: master:origin mapping of a remote master branch to a local origin branch, which is then merged to a local development branch, again typically named master, is made when you run git clone for you to follow this pattern\&.

.RE

.RS
.Sh "Note"
There is a difference between listing multiple <refspec> directly on git\-pull command line and having multiple Pull: <refspec> lines for a <repository> and running git\-pull command without any explicit <refspec> parameters\&. <refspec> listed explicitly on the command line are always merged into the current branch after fetching\&. In other words, if you list more than one remote refs, you would be making an Octopus\&. While git\-pull run without any explicit <refspec> parameter takes default <refspec>s from Pull: lines, it merges only the first <refspec> found into the current branch, after fetching all the remote refs\&. This is because making an Octopus from remote refs is rarely done, while keeping track of multiple remote heads in one\-go by fetching more than one is often useful\&.

.RE
Some short\-cut notations are also supported\&.

.RS
.TP 3
\(bu
For backward compatibility, tag is almost ignored; it just makes the following parameter <tag> to mean a refspec refs/tags/<tag>:refs/tags/<tag>\&.
.TP
\(bu
A parameter <ref> without a colon is equivalent to <ref>: when pulling/fetching, and <ref>:<ref> when pushing\&. That is, do not store it locally if fetching, and update the same name if pushing\&.
.LP
.RE
.IP

.SH "MERGE STRATEGIES"

.TP
resolve
This can only resolve two heads (i\&.e\&. the current branch and another branch you pulled from) using 3\-way merge algorithm\&. It tries to carefully detect criss\-cross merge ambiguities and is considered generally safe and fast\&.

.TP
recursive
This can only resolve two heads using 3\-way merge algorithm\&. When there are more than one common ancestors that can be used for 3\-way merge, it creates a merged tree of the common ancestors and uses that as the reference tree for the 3\-way merge\&. This has been reported to result in fewer merge conflicts without causing mis\-merges by tests done on actual merge commits taken from Linux 2\&.6 kernel development history\&. Additionally this can detect and handle merges involving renames\&. This is the default merge strategy when pulling or merging one branch\&.

.TP
octopus
This resolves more than two\-head case, but refuses to do complex merge that needs manual resolution\&. It is primarily meant to be used for bundling topic branch heads together\&. This is the default merge strategy when pulling or merging more than one branches\&.

.TP
ours
This resolves any number of heads, but the result of the merge is always the current branch head\&. It is meant to be used to supersede old development history of side branches\&.

.SH "EXAMPLES"

.TP
git pull, git pull origin
Fetch the default head from the repository you cloned from and merge it into your current branch\&.

.TP
git pull \-s ours \&. obsolete
Merge local branch obsolete into the current branch, using ours merge strategy\&.

.TP
git pull \&. fixes enhancements
Bundle local branch fixes and enhancements on top of the current branch, making an Octopus merge\&.

.TP
git pull \-\-no\-commit \&. maint
Merge local branch maint into the current branch, but do not make a commit automatically\&. This can be used when you want to include further changes to the merge, or want to write your own merge commit message\&.

You should refrain from abusing this option to sneak substantial changes into a merge commit\&. Small fixups like bumping release/version name would be acceptable\&.

.TP
Command line pull of multiple branches from one repository

.IP
$ cat \&.git/remotes/origin
URL: git://git\&.kernel\&.org/pub/scm/git/git\&.git
Pull: master:origin

$ git checkout master
$ git fetch origin master:origin +pu:pu maint:maint
$ git pull \&. originHere, a typical \&.git/remotes/origin file from a git\-clone operation is used in combination with command line options to git\-fetch to first update multiple branches of the local repository and then to merge the remote origin branch into the local master branch\&. The local pu branch is updated even if it does not result in a fast forward update\&. Here, the pull can obtain its objects from the local repository using \&., as the previous git\-fetch is known to have already obtained and made available all the necessary objects\&.

.TP
Pull of multiple branches from one repository using \&.git/remotes file

.IP
$ cat \&.git/remotes/origin
URL: git://git\&.kernel\&.org/pub/scm/git/git\&.git
Pull: master:origin
Pull: +pu:pu
Pull: maint:maint

$ git checkout master
$ git pull originHere, a typical \&.git/remotes/origin file from a git\-clone operation has been hand\-modified to include the branch\-mapping of additional remote and local heads directly\&. A single git\-pull operation while in the master branch will fetch multiple heads and merge the remote origin head into the current, local master branch\&.


If you tried a pull which resulted in a complex conflicts and would want to start over, you can recover with \fBgit\-reset\fR(1)\&.

.SH "SEE ALSO"


\fBgit\-fetch\fR(1), \fBgit\-merge\fR(1)

.SH "AUTHOR"


Written by Linus Torvalds <torvalds@osdl\&.org> and Junio C Hamano <junkio@cox\&.net>

.SH "DOCUMENTATION"


Documentation by Jon Loeliger, David Greaves, Junio C Hamano and the git\-list <git@vger\&.kernel\&.org>\&.

.SH "GIT"


Part of the \fBgit\fR(7) suite

