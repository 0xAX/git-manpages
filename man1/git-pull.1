.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-PULL" "1" "01/27/2008" "Git 1.5.4.rc5" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-pull \- Fetch from and merge with another repository or a local branch
.SH "SYNOPSIS"
\fIgit\-pull\fR <options> <repository> <refspec>\&...
.SH "DESCRIPTION"
Runs git\-fetch with the given parameters, and calls git\-merge to merge the retrieved head(s) into the current branch.

Note that you can use . (current directory) as the <repository> to pull from the local repository \(em this is useful when merging local branches into the current branch.
.SH "OPTIONS"
.TP
\-\-summary
Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.diffstat.
.TP
\-n, \-\-no\-summary
Do not show diffstat at the end of the merge.
.TP
\-\-no\-commit
Perform the merge but pretend the merge failed and do not autocommit, to give the user a chance to inspect and further tweak the merge result before committing.
.TP
\-\-commit
Perform the merge and commit the result. This option can be used to override \-\-no\-commit.
.TP
\-\-squash
Produce the working tree and index state as if a real merge happened, but do not actually make a commit or move the HEAD, nor record $GIT_DIR/MERGE_HEAD to cause the next git commit command to create a merge commit. This allows you to create a single commit on top of the current branch whose effect is the same as merging another branch (or more in case of an octopus).
.TP
\-\-no\-squash
Perform the merge and commit the result. This option can be used to override \-\-squash.
.TP
\-\-no\-ff
Generate a merge commit even if the merge resolved as a fast\-forward.
.TP
\-\-ff
Do not generate a merge commit if the merge resolved as a fast\-forward, only update the branch pointer. This is the default behavior of git\-merge.
.TP
\-s <strategy>, \-\-strategy=<strategy>
Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried. If there is no \-s option, a built\-in list of strategies is used instead (git\-merge\-recursive when merging a single head, git\-merge\-octopus otherwise).
.TP
\-q, \-\-quiet
Pass \-\-quiet to git\-fetch\-pack and silence any other internally used programs.
.TP
\-v, \-\-verbose
Be verbose.
.TP
\-a, \-\-append
Append ref names and object names of fetched refs to the existing contents of .git/FETCH_HEAD. Without this option old data in .git/FETCH_HEAD will be overwritten.
.TP
\-\-upload\-pack <upload\-pack>
When given, and the repository to fetch from is handled by \fIgit\-fetch\-pack\fR, \fI\-\-exec=<upload\-pack>\fR is passed to the command to specify non\-default path for the command run on the other end.
.TP
\-f, \-\-force
When git\-fetch is used with <rbranch>:<lbranch> refspec, it refuses to update the local branch <lbranch> unless the remote branch <rbranch> it fetches is a descendant of <lbranch>. This option overrides that check.
.TP
\-\-no\-tags
By default, tags that point at objects that are downloaded from the remote repository are fetched and stored locally. This option disables this automatic tag following.
.TP
\-t, \-\-tags
Most of the tags are fetched automatically as branch heads are downloaded, but tags that do not point at objects reachable from the branch heads that are being tracked will not be fetched by this mechanism. This flag lets all tags and their associated objects be downloaded.
.TP
\-k, \-\-keep
Keep downloaded pack.
.TP
\-u, \-\-update\-head\-ok
By default git\-fetch refuses to update the head which corresponds to the current branch. This flag disables the check. This is purely for the internal use for git\-pull to communicate with git\-fetch, and unless you are implementing your own Porcelain you are not supposed to use it.
.TP
\-\-depth=<depth>
Deepen the history of a \fIshallow\fR repository created by git clone with \-\-depth=<depth> option (see \fBgit\-clone\fR(1)) by the specified number of commits.
.TP
<repository>
The "remote" repository that is the source of a fetch or pull operation. See the section GIT URLS below.
.TP
<refspec>
The canonical format of a <refspec> parameter is +?<src>:<dst>; that is, an optional plus +, followed by the source ref, followed by a colon :, followed by the destination ref.

The remote ref that matches <src> is fetched, and if <dst> is not empty string, the local ref that matches it is fast forwarded using <src>. Again, if the optional plus + is used, the local ref is updated even if it does not result in a fast forward update.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBNote\fR
If the remote branch from which you want to pull is modified in non\-linear ways such as being rewound and rebased frequently, then a pull will attempt a merge with an older version of itself, likely conflict, and fail. It is under these conditions that you would want to use the + sign to indicate non\-fast\-forward updates will be needed. There is currently no easy way to determine or declare that a branch will be made available in a repository with this behavior; the pulling user simply must know this is the expected usage pattern for a branch.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBNote\fR
You never do your own development on branches that appear on the right hand side of a <refspec> colon on Pull: lines; they are to be updated by git\-fetch. If you intend to do development derived from a remote branch B, have a Pull: line to track it (i.e. Pull: B:remote\-B), and have a separate branch my\-B to do your development on top of it. The latter is created by git branch my\-B remote\-B (or its equivalent git checkout \-b my\-B remote\-B). Run git fetch to keep track of the progress of the remote side, and when you see something new on the remote branch, merge it into your development branch with git pull . remote\-B, while you are on my\-B branch.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBNote\fR
There is a difference between listing multiple <refspec> directly on git\-pull command line and having multiple Pull: <refspec> lines for a <repository> and running git\-pull command without any explicit <refspec> parameters. <refspec> listed explicitly on the command line are always merged into the current branch after fetching. In other words, if you list more than one remote refs, you would be making an Octopus. While git\-pull run without any explicit <refspec> parameter takes default <refspec>s from Pull: lines, it merges only the first <refspec> found into the current branch, after fetching all the remote refs. This is because making an Octopus from remote refs is rarely done, while keeping track of multiple remote heads in one\-go by fetching more than one is often useful.

Some short\-cut notations are also supported.
.RS
.TP 3
\(bu
tag <tag> means the same as refs/tags/<tag>:refs/tags/<tag>; it requests fetching everything up to the given tag.
.TP
\(bu
A parameter <ref> without a colon is equivalent to <ref>: when pulling/fetching, so it merges <ref> into the current branch without storing the remote branch anywhere locally
.RE
.SH "GIT URLS"
One of the following notations can be used to name the remote repository:
.IP
.TP 3
\(bu
rsync://host.xz/path/to/repo.git/
.TP
\(bu
http://host.xz/path/to/repo.git/
.TP
\(bu
https://host.xz/path/to/repo.git/
.TP
\(bu
git://host.xz/path/to/repo.git/
.TP
\(bu
git://host.xz/~user/path/to/repo.git/
.TP
\(bu
ssh://[user@]host.xz[:port]/path/to/repo.git/
.TP
\(bu
ssh://[user@]host.xz/path/to/repo.git/
.TP
\(bu
ssh://[user@]host.xz/~user/path/to/repo.git/
.TP
\(bu
ssh://[user@]host.xz/~/path/to/repo.git

SSH is the default transport protocol over the network. You can optionally specify which user to log\-in as, and an alternate, scp\-like syntax is also supported. Both syntaxes support username expansion, as does the native git protocol, but only the former supports port specification. The following three are identical to the last three above, respectively:
.IP
.TP 3
\(bu
[user@]host.xz:/path/to/repo.git/
.TP
\(bu
[user@]host.xz:~user/path/to/repo.git/
.TP
\(bu
[user@]host.xz:path/to/repo.git

To sync with a local directory, you can use:
.IP
.TP 3
\(bu
/path/to/repo.git/
.TP
\(bu
file:///path/to/repo.git/

They are mostly equivalent, except when cloning. See \fBgit\-clone\fR(1) for details.
.SH "REMOTES"
In addition to the above, as a short\-hand, the name of a file in $GIT_DIR/remotes directory can be given; the named file should be in the following format:
.sp
.nf
.ft C
        URL: one of the above URL format
        Push: <refspec>
        Pull: <refspec>
.ft

.fi
Then such a short\-hand is specified in place of <repository> without <refspec> parameters on the command line, <refspec> specified on Push: lines or Pull: lines are used for git\-push and git\-fetch/git\-pull, respectively. Multiple Push: and Pull: lines may be specified for additional branch mappings.

Or, equivalently, in the $GIT_DIR/config (note the use of fetch instead of Pull:):
.sp
.nf
.ft C
        [remote "<remote>"]
                url = <url>
                push = <refspec>
                fetch = <refspec>
.ft

.fi
The name of a file in $GIT_DIR/branches directory can be specified as an older notation short\-hand; the named file should contain a single line, a URL in one of the above formats, optionally followed by a hash # and the name of remote head (URL fragment notation). $GIT_DIR/branches/<remote> file that stores a <url> without the fragment is equivalent to have this in the corresponding file in the $GIT_DIR/remotes/ directory.
.sp
.nf
.ft C
        URL: <url>
        Pull: refs/heads/master:<remote>
.ft

.fi
while having <url>#<head> is equivalent to
.sp
.nf
.ft C
        URL: <url>
        Pull: refs/heads/<head>:<remote>
.ft

.fi
.SH "MERGE STRATEGIES"
.TP
resolve
This can only resolve two heads (i.e. the current branch and another branch you pulled from) using 3\-way merge algorithm. It tries to carefully detect criss\-cross merge ambiguities and is considered generally safe and fast.
.TP
recursive
This can only resolve two heads using 3\-way merge algorithm. When there are more than one common ancestors that can be used for 3\-way merge, it creates a merged tree of the common ancestors and uses that as the reference tree for the 3\-way merge. This has been reported to result in fewer merge conflicts without causing mis\-merges by tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.
.TP
octopus
This resolves more than two\-head case, but refuses to do complex merge that needs manual resolution. It is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when pulling or merging more than one branches.
.TP
ours
This resolves any number of heads, but the result of the merge is always the current branch head. It is meant to be used to supersede old development history of side branches.
.TP
\-\-rebase
Instead of a merge, perform a rebase after fetching. If there is a remote ref for the upstream branch, and this branch was rebased since last fetched, the rebase uses that information to avoid rebasing non\-local changes.
.sp
.nf
*NOTE:* This is a potentially _dangerous_ mode of operation.
It rewrites history, which does not bode well when you
published that history already.  Do *not* use this option
unless you have read linkgit:git\-rebase[1] carefully.
.fi
.TP
\-\-no\-rebase
Override earlier \-\-rebase.
.SH "DEFAULT BEHAVIOUR"
Often people use git pull without giving any parameter. Traditionally, this has been equivalent to saying git pull origin. However, when configuration branch.<name>.remote is present while on branch <name>, that value is used instead of origin.

In order to determine what URL to use to fetch from, the value of the configuration remote.<origin>.url is consulted and if there is not any such variable, the value on URL: line in $GIT_DIR/remotes/<origin> file is used.

In order to determine what remote branches to fetch (and optionally store in the tracking branches) when the command is run without any refspec parameters on the command line, values of the configuration variable remote.<origin>.fetch are consulted, and if there aren't any, $GIT_DIR/remotes/<origin> file is consulted and its Pull: lines are used. In addition to the refspec formats described in the OPTIONS section, you can have a globbing refspec that looks like this:
.sp
.nf
.ft C
refs/heads/*:refs/remotes/origin/*
.ft

.fi
A globbing refspec must have a non\-empty RHS (i.e. must store what were fetched in tracking branches), and its LHS and RHS must end with /*. The above specifies that all remote branches are tracked using tracking branches in refs/remotes/origin/ hierarchy under the same name.

The rule to determine which remote branch to merge after fetching is a bit involved, in order not to break backward compatibility.

If explicit refspecs were given on the command line of git pull, they are all merged.

When no refspec was given on the command line, then git pull uses the refspec from the configuration or $GIT_DIR/remotes/<origin>. In such cases, the following rules apply:
.TP 3
1.
If branch.<name>.merge configuration for the current branch <name> exists, that is the name of the branch at the remote site that is merged.
.TP
2.
If the refspec is a globbing one, nothing is merged.
.TP
3.
Otherwise the remote branch of the first refspec is merged.
.SH "EXAMPLES"
.TP
git pull, git pull origin
Update the remote\-tracking branches for the repository you cloned from, then merge one of them into your current branch. Normally the branch merged in is the HEAD of the remote repository, but the choice is determined by the branch.<name>.remote and branch.<name>.merge options; see \fBgit\-config\fR(1) for details.
.TP
git pull origin next
Merge into the current branch the remote branch next; leaves a copy of next temporarily in FETCH_HEAD, but does not update any remote\-tracking branches.
.TP
git pull . fixes enhancements
Bundle local branch fixes and enhancements on top of the current branch, making an Octopus merge. This git pull . syntax is equivalent to git merge.
.TP
git pull \-s ours . obsolete
Merge local branch obsolete into the current branch, using ours merge strategy.
.TP
git pull \-\-no\-commit . maint
Merge local branch maint into the current branch, but do not make a commit automatically. This can be used when you want to include further changes to the merge, or want to write your own merge commit message.

You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like bumping release/version name would be acceptable.
.TP
Command line pull of multiple branches from one repository
.sp
.nf
.ft C
$ git checkout master
$ git fetch origin +pu:pu maint:tmp
$ git pull . tmp
.ft

.fi
This updates (or creates, as necessary) branches pu and tmp in the local repository by fetching from the branches (respectively) pu and maint from the remote repository.

The pu branch will be updated even if it is does not fast\-forward; the others will not be.

The final command then merges the newly fetched tmp into master.

If you tried a pull which resulted in a complex conflicts and would want to start over, you can recover with \fBgit\-reset\fR(1).
.SH "SEE ALSO"
\fBgit\-fetch\fR(1), \fBgit\-merge\fR(1), \fBgit\-config\fR(1)
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl.org> and Junio C Hamano <junkio@cox.net>
.SH "DOCUMENTATION"
Documentation by Jon Loeliger, David Greaves, Junio C Hamano and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(7) suite

