.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-FORMAT\-PATCH" "1" "07/19/2007" "Git 1.5.3.rc0.11.ge2b1a" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-format\-patch \- Prepare patches for e\-mail submission
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-format\-patch\fR [\-n | \-k] [\-o <dir> | \-\-stdout] [\-\-thread]
                   [\-\-attach[=<boundary>] | \-\-inline[=<boundary>]]
                   [\-s | \-\-signoff] [<common diff options>]
                   [\-\-start\-number <n>] [\-\-numbered\-files]
                   [\-\-in\-reply\-to=Message\-Id] [\-\-suffix=.<sfx>]
                   [\-\-ignore\-if\-in\-upstream]
                   [\-\-subject\-prefix=Subject\-Prefix]
                   <since>[..<until>]
.fi
.SH "DESCRIPTION"
Prepare each commit between <since> and <until> with its patch in one file per commit, formatted to resemble UNIX mailbox format. If ..<until> is not specified, the head of the current working tree is implied. For a more complete list of ways to spell <since> and <until>, see "SPECIFYING REVISIONS" section in \fBgit\-rev\-parse\fR(1).

The output of this command is convenient for e\-mail submission or for use with \fBgit\-am\fR(1).

By default, each output file is numbered sequentially from 1, and uses the first line of the commit message (massaged for pathname safety) as the filename. With the \-\-numbered\-files option, the output file names will only be numbers, without the first line of the commit appended. The names of the output files are printed to standard output, unless the \-\-stdout option is specified.

If \-o is specified, output files are created in <dir>. Otherwise they are created in the current working directory.

If \-n is specified, instead of "[PATCH] Subject", the first line is formatted as "[PATCH n/m] Subject".

If given \-\-thread, git\-format\-patch will generate In\-Reply\-To and References headers to make the second and subsequent patch mails appear as replies to the first mail; this also generates a Message\-Id header to reference.
.SH "OPTIONS"
.TP
\-p
Generate patch (see section on generating patches)
.TP
\-u
Synonym for "\-p".
.TP
\-\-raw
Generate the raw format.
.TP
\-\-patch\-with\-raw
Synonym for "\-p \-\-raw".
.TP
\-\-stat[=width[,name\-width]]
Generate a diffstat. You can override the default output width for 80\-column terminal by "\-\-stat=width". The width of the filename part can be controlled by giving another width to it separated by a comma.
.TP
\-\-numstat
Similar to \-\-stat, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two \- instead of saying 0 0.
.TP
\-\-shortstat
Output only the last line of the \-\-stat format containing total number of modified files, as well as number of added and deleted lines.
.TP
\-\-summary
Output a condensed summary of extended header information such as creations, renames and mode changes.
.TP
\-\-patch\-with\-stat
Synonym for "\-p \-\-stat".
.TP
\-z
\\0 line termination on output
.TP
\-\-name\-only
Show only names of changed files.
.TP
\-\-name\-status
Show only names and status of changed files.
.TP
\-\-color
Show colored diff.
.TP
\-\-no\-color
Turn off colored diff, even when the configuration file gives the default to color output.
.TP
\-\-color\-words
Show colored word diff, i.e. color words which have changed.
.TP
\-\-no\-renames
Turn off rename detection, even when the configuration file gives the default to do so.
.TP
\-\-check
Warn if changes introduce trailing whitespace or an indent that uses a space before a tab.
.TP
\-\-full\-index
Instead of the first handful characters, show full object name of pre\- and post\-image blob on the "index" line when generating a patch format output.
.TP
\-\-binary
In addition to \-\-full\-index, output "binary diff" that can be applied with "git apply".
.TP
\-\-abbrev[=<n>]
Instead of showing the full 40\-byte hexadecimal object name in diff\-raw format output and diff\-tree header lines, show only handful hexdigits prefix. This is independent of \-\-full\-index option above, which controls the diff\-patch output format. Non default number of digits can be specified with \-\-abbrev=<n>.
.TP
\-B
Break complete rewrite changes into pairs of delete and create.
.TP
\-M
Detect renames.
.TP
\-C
Detect copies as well as renames. See also \-\-find\-copies\-harder.
.TP
\-\-diff\-filter=[ACDMRTUXB*]
Select only files that are Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R), have their type (mode) changed (T), are Unmerged (U), are Unknown (X), or have had their pairing Broken (B). Any combination of the filter characters may be used. When * (All\-or\-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected.
.TP
\-\-find\-copies\-harder
For performance reasons, by default, \-C option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one \-C option has the same effect.
.TP
\-l<num>
\-M and \-C options require O(n^2) processing time where n is the number of potential rename/copy targets. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number.
.TP
\-S<string>
Look for differences that contain the change in <string>.
.TP
\-\-pickaxe\-all
When \-S finds a change, show all the changes in that changeset, not just the files that contain the change in <string>.
.TP
\-\-pickaxe\-regex
Make the <string> not a plain string but an extended POSIX regex to match.
.TP
\-O<orderfile>
Output the patch in the order specified in the <orderfile>, which has one shell glob pattern per line.
.TP
\-R
Swap two inputs; that is, show differences from index or on\-disk file to tree contents.
.TP
\-\-text
Treat all files as text.
.TP
\-a
Shorthand for "\-\-text".
.TP
\-\-ignore\-space\-at\-eol
Ignore changes in white spaces at EOL.
.TP
\-\-ignore\-space\-change
Ignore changes in amount of white space. This ignores white space at line end, and consider all other sequences of one or more white space characters to be equivalent.
.TP
\-b
Shorthand for "\-\-ignore\-space\-change".
.TP
\-\-ignore\-all\-space
Ignore white space when comparing lines. This ignores difference even if one line has white space where the other line has none.
.TP
\-w
Shorthand for "\-\-ignore\-all\-space".
.TP
\-\-exit\-code
Make the program exit with codes similar to diff(1). That is, it exits with 1 if there were differences and 0 means no differences.
.TP
\-\-quiet
Disable all output of the program. Implies \-\-exit\-code.
.TP
\-\-ext\-diff
Allow an external diff helper to be executed. If you set an external diff driver with gitlink:gitattributes(5), you need to use this option with gitlink:git\-log(1) and friends.
.TP
\-\-no\-ext\-diff
Disallow external diff drivers.

For more detailed explanation on these common options, see also [1]\&\fIdiffcore documentation\fR.
.TP
\-<n>
Limits the number of patches to prepare.
.TP
\-o|\-\-output\-directory <dir>
Use <dir> to store the resulting files, instead of the current working directory.
.TP
\-n|\-\-numbered
Name output in \fI[PATCH n/m]\fR format.
.TP
\-\-start\-number <n>
Start numbering the patches at <n> instead of 1.
.TP
\-\-numbered\-files
Output file names will be a simple number sequence without the default first line of the commit appended. Mutually exclusive with the \-\-stdout option.
.TP
\-k|\-\-keep\-subject
Do not strip/add \fI[PATCH]\fR from the first line of the commit log message.
.TP
\-s|\-\-signoff
Add Signed\-off\-by: line to the commit message, using the committer identity of yourself.
.TP
\-\-stdout
Print all commits to the standard output in mbox format, instead of creating a file for each one.
.TP
\-\-attach[=<boundary>]
Create multipart/mixed attachment, the first part of which is the commit message and the patch itself in the second part, with "Content\-Disposition: attachment".
.TP
\-\-inline[=<boundary>]
Create multipart/mixed attachment, the first part of which is the commit message and the patch itself in the second part, with "Content\-Disposition: inline".
.TP
\-\-thread
Add In\-Reply\-To and References headers to make the second and subsequent mails appear as replies to the first. Also generates the Message\-Id header to reference.
.TP
\-\-in\-reply\-to=Message\-Id
Make the first mail (or all the mails with \-\-no\-thread) appear as a reply to the given Message\-Id, which avoids breaking threads to provide a new patch series.
.TP
\-\-ignore\-if\-in\-upstream
Do not include a patch that matches a commit in <until>..<since>. This will examine all patches reachable from <since> but not from <until> and compare them with the patches being generated, and any patch that matches is ignored.
.TP
\-\-subject\-prefix=<Subject\-Prefix>
Instead of the standard \fI[PATCH]\fR prefix in the subject line, instead use \fI[<Subject\-Prefix>]\fR. This allows for useful naming of a patch series, and can be combined with the \-\-numbered option.
.TP
\-\-suffix=.<sfx>
Instead of using .patch as the suffix for generated filenames, use specifed suffix. A common alternative is \-\-suffix=.txt.

Note that you would need to include the leading dot . if you want a filename like 0001\-description\-of\-my\-change.patch, and the first letter does not have to be a dot. Leaving it empty would not add any suffix.
.SH "CONFIGURATION"
You can specify extra mail header lines to be added to each message in the repository configuration. You can also specify new defaults for the subject prefix and file suffix.
.sp
.nf
[format]
        headers = "Organization: git\-foo\\n"
        subjectprefix = CHANGE
        suffix = .txt
.fi
.SH "EXAMPLES"
.TP
git\-format\-patch \-k \-\-stdout R1..R2 | git\-am \-3 \-k
Extract commits between revisions R1 and R2, and apply them on top of the current branch using git\-am to cherry\-pick them.
.TP
git\-format\-patch origin
Extract all commits which are in the current branch but not in the origin branch. For each commit a separate file is created in the current directory.
.TP
git\-format\-patch \-M \-B origin
The same as the previous one. Additionally, it detects and handles renames and complete rewrites intelligently to produce a renaming patch. A renaming patch reduces the amount of text output, and generally makes it easier to review it. Note that the "patch" program does not understand renaming patches, so use it only when you know the recipient uses git to apply your patch.
.TP
git\-format\-patch \-3
Extract three topmost commits from the current branch and format them as e\-mailable patches.
.SH "SEE ALSO"
\fBgit\-am\fR(1), \fBgit\-send\-email\fR(1)
.SH "AUTHOR"
Written by Junio C Hamano <junkio@cox.net>
.SH "DOCUMENTATION"
Documentation by Junio C Hamano and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(7) suite
.SH "REFERENCES"
.TP 3
1.\ diffcore documentation
\%diffcore.html
