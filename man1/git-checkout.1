.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-CHECKOUT" "1" "02/18/2007" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-checkout \- Checkout and switch to a branch
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-checkout\fR [\-q] [\-f] [\-b <new_branch> [\-l]] [\-m] [<branch>]
\fIgit\-checkout\fR [<tree\-ish>] <paths>\&...
.fi
.SH "DESCRIPTION"
When <paths> are not given, this command switches branches by updating the index and working tree to reflect the specified branch, <branch>, and updating HEAD to be <branch> or, if specified, <new_branch>. Using \-b will cause <new_branch> to be created.

When <paths> are given, this command does \fBnot\fR switch branches. It updates the named paths in the working tree from the index file (i.e. it runs git\-checkout\-index \-f \-u), or a named commit. In this case, \-f and \-b options are meaningless and giving either of them results in an error. <tree\-ish> argument can be used to specify a specific tree\-ish (i.e. commit, tag or tree) to update the index for the given paths before updating the working tree.
.SH "OPTIONS"
.TP
\-q
Quiet, supress feedback messages.
.TP
\-f
Force a re\-read of everything.
.TP
\-b
Create a new branch named <new_branch> and start it at <branch>. The new branch name must pass all checks defined by \fBgit\-check\-ref\-format\fR(1). Some of these checks may restrict the characters allowed in a branch name.
.TP
\-l
Create the new branch's ref log. This activates recording of all changes to made the branch ref, enabling use of date
.TP
\-m
If you have local modifications to one or more files that are different between the current branch and the branch to which you are switching, the command refuses to switch branches in order to preserve your modifications in context. However, with this option, a three\-way merge between the current branch, your working tree contents, and the new branch is done, and you will be on the new branch.

When a merge conflict happens, the index entries for conflicting paths are left unmerged, and you need to resolve the conflicts and mark the resolved paths with git add (or git rm if the merge should result in deletion of the path).
.TP
<new_branch>
Name for the new branch.
.TP
<branch>
Branch to checkout; may be any object ID that resolves to a commit. Defaults to HEAD.

When this parameter names a non\-branch (but still a valid commit object), your HEAD becomes \fIdetached\fR.
.SH "DETACHED HEAD"
It is sometimes useful to be able to \fIcheckout\fR a commit that is not at the tip of one of your branches. The most obvious example is to check out the commit at a tagged official release point, like this:
.sp
.nf
$ git checkout v2.6.18
.fi
Earlier versions of git did not allow this and asked you to create a temporary branch using \-b option, but starting from version 1.5.0, the above command \fIdetaches\fR your HEAD from the current branch and directly point at the commit named by the tag (v2.6.18 in the above example).

You can use usual git commands while in this state. You can use git\-reset \-\-hard $othercommit to further move around, for example. You can make changes and create a new commit on top of a detached HEAD. You can even create a merge by using git merge $othercommit.

The state you are in while your HEAD is detached is not recorded by any branch (which is natural \-\-\- you are not on any branch). What this means is that you can discard your temporary commits and merges by switching back to an existing branch (e.g. git checkout master), and a later git prune or git gc would garbage\-collect them. If you did this by mistake, you can ask the reflog for HEAD where you were, e.g.
.sp
.nf
$ git log \-g \-2 HEAD
.fi
.SH "EXAMPLES"
.TP 3
1.
The following sequence checks out the master branch, reverts the Makefile to two revisions back, deletes hello.c by mistake, and gets it back from the index.
.sp
.nf
$ git checkout master             \fB(1)\fR
$ git checkout master~2 Makefile  \fB(2)\fR
$ rm \-f hello.c
$ git checkout hello.c            \fB(3)\fR
.fi
.sp
\fB1. \fRswitch branch
.br
\fB2. \fRtake out a file out of other commit
.br
\fB3. \fRrestore hello.c from HEAD of current branch

If you have an unfortunate branch that is named hello.c, this step would be confused as an instruction to switch to that branch. You should instead write:
.sp
.nf
$ git checkout \-\- hello.c
.fi
.br
.TP
2.
After working in a wrong branch, switching to the correct branch would be done using:
.sp
.nf
$ git checkout mytopic
.fi
However, your "wrong" branch and correct "mytopic" branch may differ in files that you have locally modified, in which case, the above checkout would fail like this:
.sp
.nf
$ git checkout mytopic
fatal: Entry 'frotz' not uptodate. Cannot merge.
.fi
You can give the \-m flag to the command, which would try a three\-way merge:
.sp
.nf
$ git checkout \-m mytopic
Auto\-merging frotz
.fi
After this three\-way merge, the local modifications are _not_ registered in your index file, so git diff would show you what changes you made since the tip of the new branch.
.TP
3.
When a merge conflict happens during switching branches with the \-m option, you would see something like this:
.sp
.nf
$ git checkout \-m mytopic
Auto\-merging frotz
merge: warning: conflicts during merge
ERROR: Merge conflict in frotz
fatal: merge program failed
.fi
At this point, git diff shows the changes cleanly merged as in the previous example, as well as the changes in the conflicted files. Edit and resolve the conflict and mark it resolved with git add as usual:
.sp
.nf
$ edit frotz
$ git add frotz
.fi
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl.org>
.SH "DOCUMENTATION"
Documentation by Junio C Hamano and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(7) suite

