.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "GIT-CHECKOUT" 1 "" "" ""
.SH NAME
git-checkout \- Checkout and switch to a branch
.SH "SYNOPSIS"

.nf
\fIgit\-checkout\fR [\-f] [\-b <new_branch>] [\-m] [<branch>]
\fIgit\-checkout\fR [\-m] [<branch>] <paths>...
.fi

.SH "DESCRIPTION"


When <paths> are not given, this command switches branches by updating the index and working tree to reflect the specified branch, <branch>, and updating HEAD to be <branch> or, if specified, <new_branch>\&. Using \-b will cause <new_branch> to be created\&.


When <paths> are given, this command does \fInot\fR switch branches\&. It updates the named paths in the working tree from the index file (i\&.e\&. it runs git\-checkout\-index \-f \-u)\&. In this case, \-f and \-b options are meaningless and giving either of them results in an error\&. <branch> argument can be used to specify a specific tree\-ish to update the index for the given paths before updating the working tree\&.

.SH "OPTIONS"

.TP
\-f
Force a re\-read of everything\&.

.TP
\-b
Create a new branch and start it at <branch>\&.

.TP
\-m
If you have local modifications to one or more files that are different between the current branch and the branch to which you are switching, the command refuses to switch branches in order to preserve your modifications in context\&. However, with this option, a three\-way merge between the current branch, your working tree contents, and the new branch is done, and you will be on the new branch\&.

When a merge conflict happens, the index entries for conflicting paths are left unmerged, and you need to resolve the conflicts and mark the resolved paths with git update\-index\&.

.TP
<new_branch>
Name for the new branch\&.

.TP
<branch>
Branch to checkout; may be any object ID that resolves to a commit\&. Defaults to HEAD\&.

.SH "EXAMPLES"

.TP 3
1.
The following sequence checks out the master branch, reverts the Makefile to two revisions back, deletes hello\&.c by mistake, and gets it back from the index\&.


.nf
$ git checkout master 
$ git checkout master~2 Makefile 
$ rm \-f hello\&.c
$ git checkout hello\&.c 

 switch branch
 take out a file out of other commit
 or "git checkout \-\- hello\&.c", as in the next example\&.
.fi
If you have an unfortunate branch that is named hello\&.c, the last step above would be confused as an instruction to switch to that branch\&. You should instead write:

.nf
$ git checkout \-\- hello\&.c
.fi
.TP
2.
After working in a wrong branch, switching to the correct branch would be done using:


.nf
$ git checkout mytopic
.fi
However, your "wrong" branch and correct "mytopic" branch may differ in files that you have locally modified, in which case, the above checkout would fail like this:


.nf
$ git checkout mytopic
fatal: Entry 'frotz' not uptodate\&. Cannot merge\&.
.fi
You can give the \-m flag to the command, which would try a three\-way merge:


.nf
$ git checkout \-m mytopic
Auto\-merging frotz
.fi
After this three\-way merge, the local modifications are _not_ registered in your index file, so git diff would show you what changes you made since the tip of the new branch\&.
.TP
3.
When a merge conflict happens during switching branches with the \-m option, you would see something like this:


.nf
$ git checkout \-m mytopic
Auto\-merging frotz
merge: warning: conflicts during merge
ERROR: Merge conflict in frotz
fatal: merge program failed
.fi
At this point, git diff shows the changes cleanly merged as in the previous example, as well as the changes in the conflicted files\&. Edit and resolve the conflict and mark it resolved with git update\-index as usual:

.nf
$ edit frotz
$ git update\-index frotz
.fi
.LP

.SH "AUTHOR"


Written by Linus Torvalds <torvalds@osdl\&.org>

.SH "DOCUMENTATION"


Documentation by Junio C Hamano and the git\-list <git@vger\&.kernel\&.org>\&.

.SH "GIT"


Part of the \fBgit\fR(7) suite

