.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-GREP" "1" "09/16/2006" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-grep \- Print lines matching a pattern
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-grep\fR [\-\-cached]
           [\-a | \-\-text] [\-I] [\-i | \-\-ignore\-case] [\-w | \-\-word\-regexp]
           [\-v | \-\-invert\-match] [\-h|\-H] [\-\-full\-name]
           [\-E | \-\-extended\-regexp] [\-G | \-\-basic\-regexp] [\-F | \-\-fixed\-strings]
           [\-n] [\-l | \-\-files\-with\-matches] [\-L | \-\-files\-without\-match]
           [\-c | \-\-count]
           [\-A <post\-context>] [\-B <pre\-context>] [\-C <context>]
           [\-f <file>] [\-e] <pattern> [\-\-and|\-\-or|\-\-not|(|)|\-e <pattern>\&...]
           [<tree>\&...]
           [\-\-] [<path>\&...]
.fi
.SH "DESCRIPTION"
Look for specified patterns in the working tree files, blobs registered in the index file, or given tree objects.
.sp
.SH "OPTIONS"
.TP
\-\-cached
Instead of searching in the working tree files, check the blobs registered in the index file.
.TP
\-a | \-\-text
Process binary files as if they were text.
.TP
\-i | \-\-ignore\-case
Ignore case differences between the patterns and the files.
.TP
\-w | \-\-word\-regexp
Match the pattern only at word boundary (either begin at the beginning of a line, or preceded by a non\-word character; end at the end of a line or followed by a non\-word character).
.TP
\-v | \-\-invert\-match
Select non\-matching lines.
.TP
\-h | \-H
By default, the command shows the filename for each match.
\-h
option is used to suppress this output.
\-H
is there for completeness and does not do anything except it overrides
\-h
given earlier on the command line.
.TP
\-\-full\-name
When run from a subdirectory, the command usually outputs paths relative to the current directory. This option forces paths to be output relative to the project top directory.
.TP
\-E | \-\-extended\-regexp | \-G | \-\-basic\-regexp
Use POSIX extended/basic regexp for patterns. Default is to use basic regexp.
.TP
\-n
Prefix the line number to matching lines.
.TP
\-l | \-\-files\-with\-matches | \-L | \-\-files\-without\-match
Instead of showing every matched line, show only the names of files that contain (or do not contain) matches.
.TP
\-c | \-\-count
Instead of showing every matched line, show the number of lines that match.
.TP
\-[ABC] <context>
Show
context
trailing (A
\(em after), or leading (B
\(em before), or both (C
\(em context) lines, and place a line containing
\-\-
between contiguous groups of matches.
.TP
\-f <file>
Read patterns from <file>, one per line.
.TP
\-e
The next parameter is the pattern. This option has to be used for patterns starting with \- and should be used in scripts passing user input to grep. Multiple patterns are combined by
\fIor\fR.
.TP
\-\-and | \-\-or | \-\-not | ( | )
Specify how multiple patterns are combined using boolean expressions.
\-\-or
is the default operator.
\-\-and
has higher precedence than
\-\-or.
\-e
has to be used for all patterns.
.TP
<tree>\&...
Search blobs in the trees for specified patterns.
.TP
\-\-
Signals the end of options; the rest of the parameters are <path> limiters.
.SH "EXAMPLE"
.TP
git grep \-e '#define' \-\-and \\( \-e MAX_PATH \-e PATH_MAX \\)
Looks for a line that has
#define
and either
MAX_PATH
or
PATH_MAX.
.SH "AUTHOR"
Originally written by Linus Torvalds <torvalds@osdl.org>, later revamped by Junio C Hamano.
.sp
.SH "DOCUMENTATION"
Documentation by Junio C Hamano and the git\-list <git@vger.kernel.org>.
.sp
.SH "GIT"
Part of the \fBgit\fR(7) suite
.sp
