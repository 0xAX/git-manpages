.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-CHERRY\-PICK" "1" "10/03/2006" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-cherry\-pick \- Apply the change introduced by an existing commit
.SH "SYNOPSIS"
\fIgit\-cherry\-pick\fR [\-\-edit] [\-n] [\-r] <commit>
.sp
.SH "DESCRIPTION"
Given one existing commit, apply the change the patch introduces, and record a new commit that records it. This requires your working tree to be clean (no modifications from the HEAD commit).
.sp
.SH "OPTIONS"
.TP
<commit>
Commit to cherry\-pick.
.TP
\-e|\-\-edit
With this option,
git\-cherry\-pick
will let you edit the commit message prior committing.
.TP
\-r|\-\-replay
Usually the command appends which commit was cherry\-picked after the original commit message when making a commit. This option,
\fI\-\-replay\fR, causes it to use the original commit message intact. This is useful when you are reordering the patches in your private tree before publishing.
.TP
\-n|\-\-no\-commit
Usually the command automatically creates a commit with a commit log message stating which commit was cherry\-picked. This flag applies the change necessary to cherry\-pick the named commit to your working tree, but does not make the commit. In addition, when this option is used, your working tree does not have to match the HEAD commit. The cherry\-pick is done against the beginning state of your working tree.
.sp
This is useful when cherry\-picking more than one commits' effect to your working tree in a row.
.SH "AUTHOR"
Written by Junio C Hamano <junkio@cox.net>
.sp
.SH "DOCUMENTATION"
Documentation by Junio C Hamano and the git\-list <git@vger.kernel.org>.
.sp
.SH "GIT"
Part of the \fBgit\fR(7) suite
.sp
