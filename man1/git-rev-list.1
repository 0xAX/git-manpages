.\"     Title: git-rev-list
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.73.2 <http://docbook.sf.net/>
.\"      Date: 11/19/2008
.\"    Manual: Git Manual
.\"    Source: Git 1.6.0.4.766.g6fc4a
.\"
.TH "GIT\-REV\-LIST" "1" "11/19/2008" "Git 1\.6\.0\.4\.766\.g6fc4a" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git-rev-list - Lists commit objects in reverse chronological order
.SH "SYNOPSIS"
.sp
.RS 4
.nf
\fIgit\-rev\-list\fR [ \-\-max\-count=number ]
             [ \-\-skip=number ]
             [ \-\-max\-age=timestamp ]
             [ \-\-min\-age=timestamp ]
             [ \-\-sparse ]
             [ \-\-no\-merges ]
             [ \-\-first\-parent ]
             [ \-\-remove\-empty ]
             [ \-\-full\-history ]
             [ \-\-not ]
             [ \-\-all ]
             [ \-\-branches ]
             [ \-\-tags ]
             [ \-\-remotes ]
             [ \-\-stdin ]
             [ \-\-quiet ]
             [ \-\-topo\-order ]
             [ \-\-parents ]
             [ \-\-timestamp ]
             [ \-\-left\-right ]
             [ \-\-cherry\-pick ]
             [ \-\-encoding[=<encoding>] ]
             [ \-\-(author|committer|grep)=<pattern> ]
             [ \-\-regexp\-ignore\-case | \-i ]
             [ \-\-extended\-regexp | \-E ]
             [ \-\-fixed\-strings | \-F ]
             [ \-\-date={local|relative|default|iso|rfc|short} ]
             [ [\-\-objects | \-\-objects\-edge] [ \-\-unpacked ] ]
             [ \-\-pretty | \-\-header ]
             [ \-\-bisect ]
             [ \-\-bisect\-vars ]
             [ \-\-bisect\-all ]
             [ \-\-merge ]
             [ \-\-reverse ]
             [ \-\-walk\-reflogs ]
             [ \-\-no\-walk ] [ \-\-do\-walk ]
             <commit>\&... [ \-\- <paths>\&... ]
.fi
.RE
.SH "DESCRIPTION"
Lists commit objects in reverse chronological order starting at the given commit(s), taking ancestry relationship into account\. This is useful to produce human\-readable log output\.

Commits which are stated with a preceding \fI^\fR cause listing to stop at that point\. Their parents are implied\. Thus the following command:

.sp
.RS 4
.nf

\.ft C
        $ git rev\-list foo bar ^baz
\.ft

.fi
.RE
means "list all the commits which are included in \fIfoo\fR and \fIbar\fR, but not in \fIbaz\fR"\.

A special notation "\fI<commit1>\fR\.\.\fI<commit2>\fR" can be used as a short\-hand for "^\fI<commit1>\fR \fI<commit2>\fR"\. For example, either of the following may be used interchangeably:

.sp
.RS 4
.nf

\.ft C
        $ git rev\-list origin\.\.HEAD
        $ git rev\-list HEAD ^origin
\.ft

.fi
.RE
Another special notation is "\fI<commit1>\fR\&...\fI<commit2>\fR" which is useful for merges\. The resulting set of commits is the symmetric difference between the two operands\. The following two commands are equivalent:

.sp
.RS 4
.nf

\.ft C
        $ git rev\-list A B \-\-not $(git merge\-base \-\-all A B)
        $ git rev\-list A\.\.\.B
\.ft

.fi
.RE
\fIgit\-rev\-list\fR is a very essential git program, since it provides the ability to build and traverse commit ancestry graphs\. For this reason, it has a lot of different options that enables it to be used by commands as different as \fIgit\-bisect\fR and \fIgit\-repack\fR\.
.SH "OPTIONS"
.SS "Commit Formatting"
Using these options, \fBgit-rev-list\fR(1) will act similar to the more specialized family of commit log tools: \fBgit-log\fR(1), \fBgit-show\fR(1), and \fBgit-whatchanged\fR(1)
.PP
\-\-pretty[=\fI<format>\fR]
.RS 4
Pretty\-print the contents of the commit logs in a given format, where \fI<format>\fR can be one of \fIoneline\fR, \fIshort\fR, \fImedium\fR, \fIfull\fR, \fIfuller\fR, \fIemail\fR, \fIraw\fR and \fIformat:<string>\fR\. When omitted, the format defaults to \fImedium\fR\.

Note: you can specify the default pretty format in the repository configuration (see \fBgit-config\fR(1))\.
.RE
.PP
\-\-abbrev\-commit
.RS 4
Instead of showing the full 40\-byte hexadecimal commit object name, show only handful hexdigits prefix\. Non default number of digits can be specified with "\-\-abbrev=<n>" (which also modifies diff output, if it is displayed)\.

This should make "\-\-pretty=oneline" a whole lot more readable for people using 80\-column terminals\.
.RE
.PP
\-\-encoding[=<encoding>]
.RS 4
The commit objects record the encoding used for the log message in their encoding header; this option can be used to tell the command to re\-code the commit log message in the encoding preferred by the user\. For non plumbing commands this defaults to UTF\-8\.
.RE
.PP
\-\-relative\-date
.RS 4
Synonym for \-\-date=relative\.
.RE
.PP
\-\-date={relative,local,default,iso,rfc,short}
.RS 4
Only takes effect for dates shown in human\-readable format, such as when using "\-\-pretty"\. log\.date config variable sets a default value for log command\'s \-\-date option\.

\-\-date=relative shows dates relative to the current time, e\.g\. "2 hours ago"\.

\-\-date=local shows timestamps in user\'s local timezone\.

\-\-date=iso (or \-\-date=iso8601) shows timestamps in ISO 8601 format\.

\-\-date=rfc (or \-\-date=rfc2822) shows timestamps in RFC 2822 format, often found in E\-mail messages\.

\-\-date=short shows only date but not time, in YYYY\-MM\-DD format\.

\-\-date=default shows timestamps in the original timezone (either committer\'s or author\'s)\.
.RE
.PP
\-\-header
.RS 4
Print the contents of the commit in raw\-format; each record is separated with a NUL character\.
.RE
.PP
\-\-parents
.RS 4
Print the parents of the commit\. Also enables parent rewriting, see \fIHistory Simplification\fR below\.
.RE
.PP
\-\-children
.RS 4
Print the children of the commit\. Also enables parent rewriting, see \fIHistory Simplification\fR below\.
.RE
.PP
\-\-timestamp
.RS 4
Print the raw commit timestamp\.
.RE
.PP
\-\-left\-right
.RS 4
Mark which side of a symmetric diff a commit is reachable from\. Commits from the left side are prefixed with < and those from the right with >\. If combined with \-\-boundary, those commits are prefixed with \-\.

For example, if you have this topology:

.sp
.RS 4
.nf

\.ft C
             y\-\-\-b\-\-\-b  branch B
            / \e /
           /   \.
          /   / \e
         o\-\-\-x\-\-\-a\-\-\-a  branch A
\.ft

.fi
.RE
you would get an output like this:

.sp
.RS 4
.nf

\.ft C
        $ git rev\-list \-\-left\-right \-\-boundary \-\-pretty=oneline A\.\.\.B

        >bbbbbbb\.\.\. 3rd on b
        >bbbbbbb\.\.\. 2nd on b
        <aaaaaaa\.\.\. 3rd on a
        <aaaaaaa\.\.\. 2nd on a
        \-yyyyyyy\.\.\. 1st on b
        \-xxxxxxx\.\.\. 1st on a
\.ft

.fi
.RE
.RE
.PP
\-\-graph
.RS 4
Draw a text\-based graphical representation of the commit history on the left hand side of the output\. This may cause extra lines to be printed in between commits, in order for the graph history to be drawn properly\.

This implies the \fI\-\-topo\-order\fR option by default, but the \fI\-\-date\-order\fR option may also be specified\.
.RE
.SS "Commit Limiting"
Besides specifying a range of commits that should be listed using the special notations explained in the description, additional commit limiting may be applied\.
.PP
\-n \fInumber\fR, \-\-max\-count=\fInumber\fR
.RS 4
Limit the number of commits output\.
.RE
.PP
\-\-skip=\fInumber\fR
.RS 4
Skip \fInumber\fR commits before starting to show the commit output\.
.RE
.PP
\-\-since=\fIdate\fR, \-\-after=\fIdate\fR
.RS 4
Show commits more recent than a specific date\.
.RE
.PP
\-\-until=\fIdate\fR, \-\-before=\fIdate\fR
.RS 4
Show commits older than a specific date\.
.RE
.PP
\-\-max\-age=\fItimestamp\fR, \-\-min\-age=\fItimestamp\fR
.RS 4
Limit the commits output to specified time range\.
.RE
.PP
\-\-author=\fIpattern\fR, \-\-committer=\fIpattern\fR
.RS 4
Limit the commits output to ones with author/committer header lines that match the specified pattern (regular expression)\.
.RE
.PP
\-\-grep=\fIpattern\fR
.RS 4
Limit the commits output to ones with log message that matches the specified pattern (regular expression)\.
.RE
.PP
\-\-all\-match
.RS 4
Limit the commits output to ones that match all given \-\-grep, \-\-author and \-\-committer instead of ones that match at least one\.
.RE
.PP
\-i, \-\-regexp\-ignore\-case
.RS 4
Match the regexp limiting patterns without regard to letters case\.
.RE
.PP
\-E, \-\-extended\-regexp
.RS 4
Consider the limiting patterns to be extended regular expressions instead of the default basic regular expressions\.
.RE
.PP
\-F, \-\-fixed\-strings
.RS 4
Consider the limiting patterns to be fixed strings (don\'t interpret pattern as a regular expression)\.
.RE
.PP
\-\-remove\-empty
.RS 4
Stop when a given path disappears from the tree\.
.RE
.PP
\-\-no\-merges
.RS 4
Do not print commits with more than one parent\.
.RE
.PP
\-\-first\-parent
.RS 4
Follow only the first parent commit upon seeing a merge commit\. This option can give a better overview when viewing the evolution of a particular topic branch, because merges into a topic branch tend to be only about adjusting to updated upstream from time to time, and this option allows you to ignore the individual commits brought in to your history by such a merge\.
.RE
.PP
\-\-not
.RS 4
Reverses the meaning of the \fI^\fR prefix (or lack thereof) for all following revision specifiers, up to the next \fI\-\-not\fR\.
.RE
.PP
\-\-all
.RS 4
Pretend as if all the refs in $GIT_DIR/refs/ are listed on the command line as \fI<commit>\fR\.
.RE
.PP
\-\-branches
.RS 4
Pretend as if all the refs in $GIT_DIR/refs/heads are listed on the command line as \fI<commit>\fR\.
.RE
.PP
\-\-tags
.RS 4
Pretend as if all the refs in $GIT_DIR/refs/tags are listed on the command line as \fI<commit>\fR\.
.RE
.PP
\-\-remotes
.RS 4
Pretend as if all the refs in $GIT_DIR/refs/remotes are listed on the command line as \fI<commit>\fR\.
.RE
.PP
\-\-stdin
.RS 4
In addition to the \fI<commit>\fR listed on the command line, read them from the standard input\.
.RE
.PP
\-\-quiet
.RS 4
Don\'t print anything to standard output\. This form is primarily meant to allow the caller to test the exit status to see if a range of objects is fully connected (or not)\. It is faster than redirecting stdout to /dev/null as the output does not have to be formatted\.
.RE
.PP
\-\-cherry\-pick
.RS 4
Omit any commit that introduces the same change as another commit on the "other side" when the set of commits are limited with symmetric difference\. For example, if you have two branches, A and B, a usual way to list all commits on only one side of them is with \-\-left\-right, like the example above in the description of that option\. It however shows the commits that were cherry\-picked from the other branch (for example, "3rd on b" may be cherry\-picked from branch A)\. With this option, such pairs of commits are excluded from the output\.
.RE
.PP
\-g, \-\-walk\-reflogs
.RS 4
Instead of walking the commit ancestry chain, walk reflog entries from the most recent one to older ones\. When this option is used you cannot specify commits to exclude (that is, \fI^commit\fR, \fIcommit1\.\.commit2\fR, nor \fIcommit1\&...commit2\fR notations cannot be used)\. With \fI\-\-pretty\fR format other than oneline (for obvious reasons), this causes the output to have two extra lines of information taken from the reflog\. By default, \fIcommit@{Nth}\fR notation is used in the output\. When the starting commit is specified as \fIcommit@{now}\fR, output also uses \fIcommit@{timestamp}\fR notation instead\. Under \fI\-\-pretty=oneline\fR, the commit message is prefixed with this information on the same line\. This option cannot be combined with \fI\-\-reverse\fR\. See also \fBgit-reflog\fR(1)\.
.RE
.PP
\-\-merge
.RS 4
After a failed merge, show refs that touch files having a conflict and don\'t exist on all heads to merge\.
.RE
.PP
\-\-boundary
.RS 4
Output uninteresting commits at the boundary, which are usually not shown\.
.RE
.SS "History Simplification"
Sometimes you are only interested in parts of the history, for example the commits modifying a particular <path>\. But there are two parts of \fIHistory Simplification\fR, one part is selecting the commits and the other is how to do it, as there are various strategies to simplify the history\.

The following options select the commits to be shown:
.PP
<paths>
.RS 4
Commits modifying the given <paths> are selected\.
.RE
.PP
\-\-simplify\-by\-decoration
.RS 4
Commits that are referred by some branch or tag are selected\.
.RE
Note that extra commits can be shown to give a meaningful history\.

The following options affect the way the simplification is performed:
.PP
Default mode
.RS 4
Simplifies the history to the simplest history explaining the final state of the tree\. Simplest because it prunes some side branches if the end result is the same (i\.e\. merging branches with the same content)
.RE
.PP
\-\-full\-history
.RS 4
As the default mode but does not prune some history\.
.RE
.PP
\-\-dense
.RS 4
Only the selected commits are shown, plus some to have a meaningful history\.
.RE
.PP
\-\-sparse
.RS 4
All commits in the simplified history are shown\.
.RE
.PP
\-\-simplify\-merges
.RS 4
Additional option to \fI\-\-full\-history\fR to remove some needless merges from the resulting history, as there are no selected commits contributing to this merge\.
.RE
A more detailed explanation follows\.

Suppose you specified foo as the <paths>\. We shall call commits that modify foo !TREESAME, and the rest TREESAME\. (In a diff filtered for foo, they look different and equal, respectively\.)

In the following, we will always refer to the same example history to illustrate the differences between simplification settings\. We assume that you are filtering for a file foo in this commit graph:

.sp
.RS 4
.nf

\.ft C
          \.\-A\-\-\-M\-\-\-N\-\-\-O\-\-\-P
         /     /   /   /   /
        I     B   C   D   E
         \e   /   /   /   /
          `\-\-\-\-\-\-\-\-\-\-\-\-\-\'
\.ft

.fi
.RE
The horizontal line of history A\-\-P is taken to be the first parent of each merge\. The commits are:

.sp
.RS 4
\h'-04'\(bu\h'+03'I is the initial commit, in which foo exists with contents "asdf", and a file quux exists with contents "quux"\. Initial commits are compared to an empty tree, so I is !TREESAME\.
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'In A, foo contains just "foo"\.
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'B contains the same change as A\. Its merge M is trivial and hence TREESAME to all parents\.
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'C does not change foo, but its merge N changes it to "foobar", so it is not TREESAME to any parent\.
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'D sets foo to "baz"\. Its merge O combines the strings from N and D to "foobarbaz"; i\.e\., it is not TREESAME to any parent\.
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'E changes quux to "xyzzy", and its merge P combines the strings to "quux xyzzy"\. Despite appearing interesting, P is TREESAME to all parents\.
.RE
\fIrev\-list\fR walks backwards through history, including or excluding commits based on whether \fI\-\-full\-history\fR and/or parent rewriting (via \fI\-\-parents\fR or \fI\-\-children\fR) are used\. The following settings are available\.
.PP
Default mode
.RS 4
Commits are included if they are not TREESAME to any parent (though this can be changed, see \fI\-\-sparse\fR below)\. If the commit was a merge, and it was TREESAME to one parent, follow only that parent\. (Even if there are several TREESAME parents, follow only one of them\.) Otherwise, follow all parents\.

This results in:

.sp
.RS 4
.nf

\.ft C
          \.\-A\-\-\-N\-\-\-O
         /         /
        I\-\-\-\-\-\-\-\-\-D
\.ft

.fi
.RE
Note how the rule to only follow the TREESAME parent, if one is available, removed B from consideration entirely\. C was considered via N, but is TREESAME\. Root commits are compared to an empty tree, so I is !TREESAME\.

Parent/child relations are only visible with \-\-parents, but that does not affect the commits selected in default mode, so we have shown the parent lines\.
.RE
.PP
\-\-full\-history without parent rewriting
.RS 4
This mode differs from the default in one point: always follow all parents of a merge, even if it is TREESAME to one of them\. Even if more than one side of the merge has commits that are included, this does not imply that the merge itself is! In the example, we get

.sp
.RS 4
.nf

\.ft C
        I  A  B  N  D  O
\.ft

.fi
.RE
P and M were excluded because they are TREESAME to a parent\. E, C and B were all walked, but only B was !TREESAME, so the others do not appear\.

Note that without parent rewriting, it is not really possible to talk about the parent/child relationships between the commits, so we show them disconnected\.
.RE
.PP
\-\-full\-history with parent rewriting
.RS 4
Ordinary commits are only included if they are !TREESAME (though this can be changed, see \fI\-\-sparse\fR below)\.

Merges are always included\. However, their parent list is rewritten: Along each parent, prune away commits that are not included themselves\. This results in

.sp
.RS 4
.nf

\.ft C
          \.\-A\-\-\-M\-\-\-N\-\-\-O\-\-\-P
         /     /   /   /   /
        I     B   /   D   /
         \e   /   /   /   /
          `\-\-\-\-\-\-\-\-\-\-\-\-\-\'
\.ft

.fi
.RE
Compare to \fI\-\-full\-history\fR without rewriting above\. Note that E was pruned away because it is TREESAME, but the parent list of P was rewritten to contain E\'s parent I\. The same happened for C and N\. Note also that P was included despite being TREESAME\.
.RE
In addition to the above settings, you can change whether TREESAME affects inclusion:
.PP
\-\-dense
.RS 4
Commits that are walked are included if they are not TREESAME to any parent\.
.RE
.PP
\-\-sparse
.RS 4
All commits that are walked are included\.

Note that without \fI\-\-full\-history\fR, this still simplifies merges: if one of the parents is TREESAME, we follow only that one, so the other sides of the merge are never walked\.
.RE
Finally, there is a fourth simplification mode available:
.PP
\-\-simplify\-merges
.RS 4
First, build a history graph in the same way that \fI\-\-full\-history\fR with parent rewriting does (see above)\.

Then simplify each commit C to its replacement C\' in the final history according to the following rules:

.sp
.RS 4
\h'-04'\(bu\h'+03'Set C\' to C\.
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'Replace each parent P of C\' with its simplification P\'\. In the process, drop parents that are ancestors of other parents, and remove duplicates\.
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'If after this parent rewriting, C\' is a root or merge commit (has zero or >1 parents), a boundary commit, or !TREESAME, it remains\. Otherwise, it is replaced with its only parent\.
.RE
.IP "" 4
The effect of this is best shown by way of comparing to \fI\-\-full\-history\fR with parent rewriting\. The example turns into:

.sp
.RS 4
.nf

\.ft C
          \.\-A\-\-\-M\-\-\-N\-\-\-O
         /     /       /
        I     B       D
         \e   /       /
          `\-\-\-\-\-\-\-\-\-\'
\.ft

.fi
.RE
Note the major differences in N and P over \fI\-\-full\-history\fR:

.sp
.RS 4
\h'-04'\(bu\h'+03'N\'s parent list had I removed, because it is an ancestor of the other parent M\. Still, N remained because it is !TREESAME\.
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'P\'s parent list similarly had I removed\. P was then removed completely, because it had one parent and is TREESAME\.
.RE
.RE
The \fI\-\-simplify\-by\-decoration\fR option allows you to view only the big picture of the topology of the history, by omitting commits that are not referenced by tags\. Commits are marked as !TREESAME (in other words, kept after history simplification rules described above) if (1) they are referenced by tags, or (2) they change the contents of the paths given on the command line\. All other commits are marked as TREESAME (subject to be simplified away)\.
.SS "Bisection Helpers"
.PP
\-\-bisect
.RS 4
Limit output to the one commit object which is roughly halfway between the included and excluded commits\. Thus, if
.RE
.sp
.RS 4
.nf

\.ft C
        $ git rev\-list \-\-bisect foo ^bar ^baz
\.ft

.fi
.RE
outputs \fImidpoint\fR, the output of the two commands

.sp
.RS 4
.nf

\.ft C
        $ git rev\-list foo ^midpoint
        $ git rev\-list midpoint ^bar ^baz
\.ft

.fi
.RE
would be of roughly the same length\. Finding the change which introduces a regression is thus reduced to a binary search: repeatedly generate and test new \'midpoint\'s until the commit chain is of length one\.
.PP
\-\-bisect\-vars
.RS 4
This calculates the same as \-\-bisect, but outputs text ready to be eval\'ed by the shell\. These lines will assign the name of the midpoint revision to the variable bisect_rev, and the expected number of commits to be tested after bisect_rev is tested to bisect_nr, the expected number of commits to be tested if bisect_rev turns out to be good to bisect_good, the expected number of commits to be tested if bisect_rev turns out to be bad to bisect_bad, and the number of commits we are bisecting right now to bisect_all\.
.RE
.PP
\-\-bisect\-all
.RS 4
This outputs all the commit objects between the included and excluded commits, ordered by their distance to the included and excluded commits\. The farthest from them is displayed first\. (This is the only one displayed by \-\-bisect\.)
.RE
This is useful because it makes it easy to choose a good commit to test when you want to avoid to test some of them for some reason (they may not compile for example)\.

This option can be used along with \-\-bisect\-vars, in this case, after all the sorted commit objects, there will be the same text as if \-\-bisect\-vars had been used alone\.
.SS "Commit Ordering"
By default, the commits are shown in reverse chronological order\.
.PP
\-\-topo\-order
.RS 4
This option makes them appear in topological order (i\.e\. descendant commits are shown before their parents)\.
.RE
.PP
\-\-date\-order
.RS 4
This option is similar to \fI\-\-topo\-order\fR in the sense that no parent comes before all of its children, but otherwise things are still ordered in the commit timestamp order\.
.RE
.PP
\-\-reverse
.RS 4
Output the commits in reverse order\. Cannot be combined with \fI\-\-walk\-reflogs\fR\.
.RE
.SS "Object Traversal"
These options are mostly targeted for packing of git repositories\.
.PP
\-\-objects
.RS 4
Print the object IDs of any object referenced by the listed commits\. \fI\-\-objects foo ^bar\fR thus means "send me all object IDs which I need to download if I have the commit object \fIbar\fR, but not \fIfoo\fR"\.
.RE
.PP
\-\-objects\-edge
.RS 4
Similar to \fI\-\-objects\fR, but also print the IDs of excluded commits prefixed with a "\-" character\. This is used by \fBgit-pack-objects\fR(1) to build "thin" pack, which records objects in deltified form based on objects contained in these excluded commits to reduce network traffic\.
.RE
.PP
\-\-unpacked
.RS 4
Only useful with \fI\-\-objects\fR; print the object IDs that are not in packs\.
.RE
.PP
\-\-no\-walk
.RS 4
Only show the given revs, but do not traverse their ancestors\.
.RE
.PP
\-\-do\-walk
.RS 4
Overrides a previous \-\-no\-walk\.
.RE
.SH "PRETTY FORMATS"
If the commit is a merge, and if the pretty\-format is not \fIoneline\fR, \fIemail\fR or \fIraw\fR, an additional line is inserted before the \fIAuthor:\fR line\. This line begins with "Merge: " and the sha1s of ancestral commits are printed, separated by spaces\. Note that the listed commits may not necessarily be the list of the \fBdirect\fR parent commits if you have limited your view of history: for example, if you are only interested in changes related to a certain directory or file\.

Here are some additional details for each format:

.sp
.RS 4
\h'-04'\(bu\h'+03'\fIoneline\fR

.sp
.RS 4
.nf
<sha1> <title line>
.fi
.RE
This is designed to be as compact as possible\.
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fIshort\fR

.sp
.RS 4
.nf
commit <sha1>
Author: <author>
.fi
.RE
.sp
.RS 4
.nf
<title line>
.fi
.RE
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fImedium\fR

.sp
.RS 4
.nf
commit <sha1>
Author: <author>
Date: <author date>
.fi
.RE
.sp
.RS 4
.nf
<title line>
.fi
.RE
.sp
.RS 4
.nf
<full commit message>
.fi
.RE
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fIfull\fR

.sp
.RS 4
.nf
commit <sha1>
Author: <author>
Commit: <committer>
.fi
.RE
.sp
.RS 4
.nf
<title line>
.fi
.RE
.sp
.RS 4
.nf
<full commit message>
.fi
.RE
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fIfuller\fR

.sp
.RS 4
.nf
commit <sha1>
Author: <author>
AuthorDate: <author date>
Commit: <committer>
CommitDate: <committer date>
.fi
.RE
.sp
.RS 4
.nf
<title line>
.fi
.RE
.sp
.RS 4
.nf
<full commit message>
.fi
.RE
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fIemail\fR

.sp
.RS 4
.nf
From <sha1> <date>
From: <author>
Date: <author date>
Subject: [PATCH] <title line>
.fi
.RE
.sp
.RS 4
.nf
<full commit message>
.fi
.RE
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fIraw\fR

The \fIraw\fR format shows the entire commit exactly as stored in the commit object\. Notably, the SHA1s are displayed in full, regardless of whether \-\-abbrev or \-\-no\-abbrev are used, and \fIparents\fR information show the true parent commits, without taking grafts nor history simplification into account\.
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fIformat:\fR

The \fIformat:\fR format allows you to specify which information you want to show\. It works a little bit like printf format, with the notable exception that you get a newline with \fI%n\fR instead of \fI\en\fR\.

E\.g, \fIformat:"The author of %h was %an, %ar%nThe title was >>%s<<%n"\fR would show something like this:

.sp
.RS 4
.nf

\.ft C
The author of fe6e0ee was Junio C Hamano, 23 hours ago
The title was >>t4119: test autocomputing \-p<n> for traditional diff input\.<<

\.ft

.fi
.RE
The placeholders are:

.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%H\fR: commit hash
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%h\fR: abbreviated commit hash
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%T\fR: tree hash
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%t\fR: abbreviated tree hash
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%P\fR: parent hashes
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%p\fR: abbreviated parent hashes
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%an\fR: author name
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%aN\fR: author name (respecting \.mailmap)
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%ae\fR: author email
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%ad\fR: author date (format respects \-\-date= option)
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%aD\fR: author date, RFC2822 style
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%ar\fR: author date, relative
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%at\fR: author date, UNIX timestamp
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%ai\fR: author date, ISO 8601 format
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%cn\fR: committer name
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%cN\fR: committer name (respecting \.mailmap)
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%ce\fR: committer email
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%cd\fR: committer date
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%cD\fR: committer date, RFC2822 style
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%cr\fR: committer date, relative
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%ct\fR: committer date, UNIX timestamp
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%ci\fR: committer date, ISO 8601 format
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%d\fR: ref names, like the \-\-decorate option of \fBgit-log\fR(1)
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%e\fR: encoding
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%s\fR: subject
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%b\fR: body
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%Cred\fR: switch color to red
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%Cgreen\fR: switch color to green
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%Cblue\fR: switch color to blue
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%Creset\fR: reset color
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%m\fR: left, right or boundary mark
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%n\fR: newline
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fI%x00\fR: print a byte from a hex code
.RE
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fItformat:\fR

The \fItformat:\fR format works exactly like \fIformat:\fR, except that it provides "terminator" semantics instead of "separator" semantics\. In other words, each commit has the message terminator character (usually a newline) appended, rather than a separator placed between entries\. This means that the final entry of a single\-line format will be properly terminated with a new line, just as the "oneline" format does\. For example:

.sp
.RS 4
.nf

\.ft C
$ git log \-2 \-\-pretty=format:%h 4da45bef \e
  | perl \-pe \'$_ \.= " \-\- NO NEWLINE\en" unless /\en/\'
4da45be
7134973 \-\- NO NEWLINE

$ git log \-2 \-\-pretty=tformat:%h 4da45bef \e
  | perl \-pe \'$_ \.= " \-\- NO NEWLINE\en" unless /\en/\'
4da45be
7134973
\.ft

.fi
.RE
.RE
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl\.org>
.SH "DOCUMENTATION"
Documentation by David Greaves, Junio C Hamano, Jonas Fonseca and the git\-list <git@vger\.kernel\.org>\.
.SH "GIT"
Part of the \fBgit\fR(1) suite

