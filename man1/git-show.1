.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-SHOW" "1" "04/14/2007" "Git 1.5.1.1.98.gedb4f" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-show \- Show various types of objects
.SH "SYNOPSIS"
\fIgit\-show\fR [options] <object>\&...
.SH "DESCRIPTION"
Shows one or more objects (blobs, trees, tags and commits).

For commits it shows the log message and textual diff. It also presents the merge commit in a special format as produced by \fIgit\-diff\-tree \-\-cc\fR.

For tags, it shows the tag message and the referenced objects.

For trees, it shows the names (equivalent to \fBgit\-ls\-tree\fR(1) with \-\-name\-only).

For plain blobs, it shows the plain contents.

The command takes options applicable to the \fBgit\-diff\-tree\fR(1) command to control how the changes the commit introduces are shown.

This manual page describes only the most frequently used options.
.SH "OPTIONS"
.TP
<object>
The name of the object to show. For a more complete list of ways to spell object names, see "SPECIFYING REVISIONS" section in \fBgit\-rev\-parse\fR(1).
.TP
\-\-pretty[=\fI<format>\fR]
Pretty\-prints the details of a commit. \-\-pretty without an explicit =<format> defaults to \fImedium\fR. If the commit is a merge, and if the pretty\-format is not \fIoneline\fR, \fIemail\fR or \fIraw\fR, an additional line is inserted before the \fIAuthor:\fR line. This line begins with "Merge: " and the sha1s of ancestral commits are printed, separated by spaces. Note that the listed commits may not necessarily be the list of the \fBdirect\fR parent commits if you have limited your view of history: for example, if you are only interested in changes related to a certain directory or file. Here are some additional details for each format:
.RS
.TP 3
\(bu
\fIoneline\fR
.sp
.nf
<sha1> <title line>
.fi
This is designed to be as compact as possible.
.TP
\(bu
\fIshort\fR
.sp
.nf
commit <sha1>
Author: <author>
.fi
.sp
.nf
<title line>
.fi
.TP
\(bu
\fImedium\fR
.sp
.nf
commit <sha1>
Author: <author>
Date: <date>
.fi
.sp
.nf
<title line>
.fi
.sp
.nf
<full commit message>
.fi
.TP
\(bu
\fIfull\fR
.sp
.nf
commit <sha1>
Author: <author>
Commit: <committer>
.fi
.sp
.nf
<title line>
.fi
.sp
.nf
<full commit message>
.fi
.TP
\(bu
\fIfuller\fR
.sp
.nf
commit <sha1>
Author: <author>
AuthorDate: <date & time>
Commit: <committer>
CommitDate: <date & time>
.fi
.sp
.nf
<title line>
.fi
.sp
.nf
<full commit message>
.fi
.TP
\(bu
\fIemail\fR
.sp
.nf
From <sha1> <date>
From: <author>
Date: <date & time>
Subject: [PATCH] <title line>
.fi
.sp
.nf
full commit message>
.fi
.TP
\(bu
\fIraw\fR

The \fIraw\fR format shows the entire commit exactly as stored in the commit object. Notably, the SHA1s are displayed in full, regardless of whether \-\-abbrev or \-\-no\-abbrev are used, and \fIparents\fR information show the true parent commits, without taking grafts nor history simplification into account.
.TP
\(bu
\fIformat:\fR

The \fIformat:\fR format allows you to specify which information you want to show. It works a little bit like printf format, with the notable exception that you get a newline with \fI%n\fR instead of \fI\\n\fR.
.RE
E.g, \fIformat:"The author of %h was %an, %ar%nThe title was >>%s<<"\fR would show something like this:

The author of fe6e0ee was Junio C Hamano, 23 hours ago The title was >>t4119: test autocomputing \-p<n> for traditional diff input.<<

The placeholders are:
.TP 3
\(bu
\fI%H\fR: commit hash
.TP
\(bu
\fI%h\fR: abbreviated commit hash
.TP
\(bu
\fI%T\fR: tree hash
.TP
\(bu
\fI%t\fR: abbreviated tree hash
.TP
\(bu
\fI%P\fR: parent hashes
.TP
\(bu
\fI%p\fR: abbreviated parent hashes
.TP
\(bu
\fI%an\fR: author name
.TP
\(bu
\fI%ae\fR: author email
.TP
\(bu
\fI%ad\fR: author date
.TP
\(bu
\fI%aD\fR: author date, RFC2822 style
.TP
\(bu
\fI%ar\fR: author date, relative
.TP
\(bu
\fI%at\fR: author date, UNIX timestamp
.TP
\(bu
\fI%cn\fR: committer name
.TP
\(bu
\fI%ce\fR: committer email
.TP
\(bu
\fI%cd\fR: committer date
.TP
\(bu
\fI%cD\fR: committer date, RFC2822 style
.TP
\(bu
\fI%cr\fR: committer date, relative
.TP
\(bu
\fI%ct\fR: committer date, UNIX timestamp
.TP
\(bu
\fI%e\fR: encoding
.TP
\(bu
\fI%s\fR: subject
.TP
\(bu
\fI%b\fR: body
.TP
\(bu
\fI%Cred\fR: switch color to red
.TP
\(bu
\fI%Cgreen\fR: switch color to green
.TP
\(bu
\fI%Cblue\fR: switch color to blue
.TP
\(bu
\fI%Creset\fR: reset color
.TP
\(bu
\fI%m\fR: left, right or boundary mark
.TP
\(bu
\fI%n\fR: newline
.RS
.TP
\-\-encoding[=<encoding>]
The commit objects record the encoding used for the log message in their encoding header; this option can be used to tell the command to re\-code the commit log message in the encoding preferred by the user. For non plumbing commands this defaults to UTF\-8.
.RE
.SH "EXAMPLES"
.TP
git show v1.0.0
Shows the tag v1.0.0, along with the object the tags points at.
.TP
git show v1.0.0^{tree}
Shows the tree pointed to by the tag v1.0.0.
.TP
git show next~10:Documentation/README
Shows the contents of the file Documentation/README as they were current in the 10th last commit of the branch next.
.TP
git show master:Makefile master:t/Makefile
Concatenates the contents of said Makefiles in the head of the branch master.
.SH "DISCUSSION"
At the core level, git is character encoding agnostic.
.TP 3
\(bu
The pathnames recorded in the index and in the tree objects are treated as uninterpreted sequences of non\-NUL bytes. What readdir(2) returns are what are recorded and compared with the data git keeps track of, which in turn are expected to be what lstat(2) and creat(2) accepts. There is no such thing as pathname encoding translation.
.TP
\(bu
The contents of the blob objects are uninterpreted sequence of bytes. There is no encoding translation at the core level.
.TP
\(bu
The commit log messages are uninterpreted sequence of non\-NUL bytes.

Although we encourage that the commit log messages are encoded in UTF\-8, both the core and git Porcelain are designed not to force UTF\-8 on projects. If all participants of a particular project find it more convenient to use legacy encodings, git does not forbid it. However, there are a few things to keep in mind.
.TP 3
1.
git\-commit\-tree (hence, git\-commit which uses it) issues an warning if the commit log message given to it does not look like a valid UTF\-8 string, unless you explicitly say your project uses a legacy encoding. The way to say this is to have i18n.commitencoding in .git/config file, like this:
.sp
.nf
[i18n]
        commitencoding = ISO\-8859\-1
.fi
Commit objects created with the above setting record the value of i18n.commitencoding in its encoding header. This is to help other people who look at them later. Lack of this header implies that the commit log message is encoded in UTF\-8.
.TP
2.
git\-log, git\-show and friends looks at the encoding header of a commit object, and tries to re\-code the log message into UTF\-8 unless otherwise specified. You can specify the desired output encoding with i18n.logoutputencoding in .git/config file, like this:
.sp
.nf
[i18n]
        logoutputencoding = ISO\-8859\-1
.fi
If you do not have this configuration variable, the value of i18n.commitencoding is used instead.

Note that we deliberately chose not to re\-code the commit log message when a commit is made to force UTF\-8 at the commit object level, because re\-coding to UTF\-8 is not necessarily a reversible operation.
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl.org> and Junio C Hamano <junkio@cox.net>. Significantly enhanced by Johannes Schindelin <Johannes.Schindelin@gmx.de>.
.SH "DOCUMENTATION"
Documentation by David Greaves, Petr Baudis and the git\-list <git@vger.kernel.org>.

This manual page is a stub. You can help the git documentation by expanding it.
.SH "GIT"
Part of the \fBgit\fR(7) suite

