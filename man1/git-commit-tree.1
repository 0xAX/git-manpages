.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-COMMIT\-TREE" "1" "07/15/2007" "Git 1.5.3.rc1.27.ga5e40" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-commit\-tree \- Create a new commit object
.SH "SYNOPSIS"
\fIgit\-commit\-tree\fR <tree> [\-p <parent commit>]* < changelog
.SH "DESCRIPTION"
This is usually not what an end user wants to run directly. See \fBgit\-commit\fR(1) instead.

Creates a new commit object based on the provided tree object and emits the new commit object id on stdout. If no parent is given then it is considered to be an initial tree.

A commit object usually has 1 parent (a commit after a change) or up to 16 parents. More than one parent represents a merge of branches that led to them.

While a tree represents a particular directory state of a working directory, a commit represents that state in "time", and explains how to get there.

Normally a commit would identify a new "HEAD" state, and while git doesn't care where you save the note about that state, in practice we tend to just write the result to the file that is pointed at by .git/HEAD, so that we can always see what the last committed state was.
.SH "OPTIONS"
.TP
<tree>
An existing tree object
.TP
\-p <parent commit>
Each \fI\-p\fR indicates the id of a parent commit object.
.SH "COMMIT INFORMATION"
A commit encapsulates:
.TP 3
\(bu
all parent object ids
.TP
\(bu
author name, email and date
.TP
\(bu
committer name and email and the commit time.

If not provided, "git\-commit\-tree" uses your name, hostname and domain to provide author and committer info. This can be overridden by either .git/config file, or using the following environment variables.
.sp
.nf
GIT_AUTHOR_NAME
GIT_AUTHOR_EMAIL
GIT_AUTHOR_DATE
GIT_COMMITTER_NAME
GIT_COMMITTER_EMAIL
GIT_COMMITTER_DATE
EMAIL
.fi
(nb "<", ">" and "\\n"s are stripped)

In .git/config file, the following items are used for GIT_AUTHOR_NAME and GIT_AUTHOR_EMAIL:
.sp
.nf
[user]
        name = "Your Name"
        email = "your@email.address.xz"
.fi
A commit comment is read from stdin. If a changelog entry is not provided via "<" redirection, "git\-commit\-tree" will just wait for one to be entered and terminated with ^D.
.SH "DIAGNOSTICS"
.TP
You don't exist. Go away!
The passwd(5) gecos field couldn't be read
.TP
Your parents must have hated you!
The password(5) gecos field is longer than a giant static buffer.
.TP
Your sysadmin must hate you!
The password(5) name field is longer than a giant static buffer.
.SH "DISCUSSION"
At the core level, git is character encoding agnostic.
.TP 3
\(bu
The pathnames recorded in the index and in the tree objects are treated as uninterpreted sequences of non\-NUL bytes. What readdir(2) returns are what are recorded and compared with the data git keeps track of, which in turn are expected to be what lstat(2) and creat(2) accepts. There is no such thing as pathname encoding translation.
.TP
\(bu
The contents of the blob objects are uninterpreted sequence of bytes. There is no encoding translation at the core level.
.TP
\(bu
The commit log messages are uninterpreted sequence of non\-NUL bytes.

Although we encourage that the commit log messages are encoded in UTF\-8, both the core and git Porcelain are designed not to force UTF\-8 on projects. If all participants of a particular project find it more convenient to use legacy encodings, git does not forbid it. However, there are a few things to keep in mind.
.TP 3
1.
git\-commit\-tree (hence, git\-commit which uses it) issues an warning if the commit log message given to it does not look like a valid UTF\-8 string, unless you explicitly say your project uses a legacy encoding. The way to say this is to have i18n.commitencoding in .git/config file, like this:
.sp
.nf
[i18n]
        commitencoding = ISO\-8859\-1
.fi
Commit objects created with the above setting record the value of i18n.commitencoding in its encoding header. This is to help other people who look at them later. Lack of this header implies that the commit log message is encoded in UTF\-8.
.TP
2.
git\-log, git\-show and friends looks at the encoding header of a commit object, and tries to re\-code the log message into UTF\-8 unless otherwise specified. You can specify the desired output encoding with i18n.logoutputencoding in .git/config file, like this:
.sp
.nf
[i18n]
        logoutputencoding = ISO\-8859\-1
.fi
If you do not have this configuration variable, the value of i18n.commitencoding is used instead.

Note that we deliberately chose not to re\-code the commit log message when a commit is made to force UTF\-8 at the commit object level, because re\-coding to UTF\-8 is not necessarily a reversible operation.
.SH "SEE ALSO"
\fBgit\-write\-tree\fR(1)
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl.org>
.SH "DOCUMENTATION"
Documentation by David Greaves, Junio C Hamano and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(7) suite

