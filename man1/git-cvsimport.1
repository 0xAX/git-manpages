.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-CVSIMPORT" "1" "10/03/2006" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-cvsimport \- Import a CVS repository into git
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-cvsimport\fR [\-o <branch\-for\-HEAD>] [\-h] [\-v] [\-d <CVSROOT>] [\-s <subst>]
              [\-p <options\-for\-cvsps>] [\-C <git_repository>] [\-i] [\-P <file>]
              [\-m] [\-M regex] [<CVS_module>]
.fi
.SH "DESCRIPTION"
Imports a CVS repository into git. It will either create a new repository, or incrementally import into an existing one.
.sp
Splitting the CVS log into patch sets is done by \fIcvsps\fR. At least version 2.1 is required.
.sp
You should \fBnever\fR do any work of your own on the branches that are created by git\-cvsimport. The initial import will create and populate a "master" branch from the CVS repository's main branch which you're free to work with; after that, you need to \fIgit merge\fR incremental imports, or any CVS branches, yourself.
.sp
.SH "OPTIONS"
.TP
\-d <CVSROOT>
The root of the CVS archive. May be local (a simple path) or remote; currently, only the :local:, :ext: and :pserver: access methods are supported.
.TP
\-C <target\-dir>
The git repository to import to. If the directory doesn't exist, it will be created. Default is the current directory.
.TP
\-i
Import\-only: don't perform a checkout after importing. This option ensures the working directory and index remain untouched and will not create them if they do not exist.
.TP
\-k
Kill keywords: will extract files with \-kk from the CVS archive to avoid noisy changesets. Highly recommended, but off by default to preserve compatibility with early imported trees.
.TP
\-u
Convert underscores in tag and branch names to dots.
.TP
\-o <branch\-for\-HEAD>
The
\fIHEAD\fR
branch from CVS is imported to the
\fIorigin\fR
branch within the git repository, as
\fIHEAD\fR
already has a special meaning for git. Use this option if you want to import into a different branch.
.sp
Use
\fI\-o master\fR
for continuing an import that was initially done by the old cvs2git tool.
.TP
\-p <options\-for\-cvsps>
Additional options for cvsps. The options
\fI\-u\fR
and
\fI\-A\fR
are implicit and should not be used here.
.sp
If you need to pass multiple options, separate them with a comma.
.TP
\-P <cvsps\-output\-file>
Instead of calling cvsps, read the provided cvsps output file. Useful for debugging or when cvsps is being handled outside cvsimport.
.TP
\-m
Attempt to detect merges based on the commit message. This option will enable default regexes that try to capture the name source branch name from the commit message.
.TP
\-M <regex>
Attempt to detect merges based on the commit message with a custom regex. It can be used with \-m to also see the default regexes. You must escape forward slashes.
.TP
\-v
Verbosity: let
\fIcvsimport\fR
report what it is doing.
.TP
<CVS_module>
The CVS module you want to import. Relative to <CVSROOT>.
.TP
\-h
Print a short usage message and exit.
.TP
\-z <fuzz>
Pass the timestamp fuzz factor to cvsps.
.TP
\-s <subst>
Substitute the character "/" in branch names with <subst>
.TP
\-A <author\-conv\-file>
CVS by default uses the unix username when writing its commit logs. Using this option and an author\-conv\-file in this format
.sp
.nf
        exon=Andreas Ericsson <ae@op5.se>
        spawn=Simon Pawn <spawn@frog\-pond.org>
.fi
git\-cvsimport will make it appear as those authors had their GIT_AUTHOR_NAME and GIT_AUTHOR_EMAIL set properly all along.
.sp
For convenience, this data is saved to $GIT_DIR/cvs\-authors each time the \-A option is provided and read from that same file each time git\-cvsimport is run.
.sp
It is not recommended to use this feature if you intend to export changes back to CVS again later with
\fBgit\-cvsexportcommit\fR(1).
.SH "OUTPUT"
If \fI\-v\fR is specified, the script reports what it is doing.
.sp
Otherwise, success is indicated the Unix way, i.e. by simply exiting with a zero exit status.
.sp
.SH "AUTHOR"
Written by Matthias Urlichs <smurf@smurf.noris.de>, with help from various participants of the git\-list <git@vger.kernel.org>.
.sp
.SH "DOCUMENTATION"
Documentation by Matthias Urlichs <smurf@smurf.noris.de>.
.sp
.SH "GIT"
Part of the \fBgit\fR(7) suite
.sp
