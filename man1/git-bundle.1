.\"     Title: git-bundle
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.73.2 <http://docbook.sf.net/>
.\"      Date: 07/06/2008
.\"    Manual: Git Manual
.\"    Source: Git 1.5.6.2.212.g08b5
.\"
.TH "GIT\-BUNDLE" "1" "07/06/2008" "Git 1\.5\.6\.2\.212\.g08b5" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git-bundle - Move objects and refs by archive
.SH "SYNOPSIS"
.sp
.RS 4
.nf
\fIgit bundle\fR create <file> <git\-rev\-list args>
\fIgit bundle\fR verify <file>
\fIgit bundle\fR list\-heads <file> [refname\&...]
\fIgit bundle\fR unbundle <file> [refname\&...]
.fi
.RE
.SH "DESCRIPTION"
Some workflows require that one or more branches of development on one machine be replicated on another machine, but the two machines cannot be directly connected so the interactive git protocols (git, ssh, rsync, http) cannot be used\. This command provides support for \fIgit\-fetch\fR and \fIgit\-pull\fR to operate by packaging objects and references in an archive at the originating machine, then importing those into another repository using \fIgit\-fetch\fR and \fIgit\-pull\fR after moving the archive by some means (i\.e\., by sneakernet)\. As no direct connection between repositories exists, the user must specify a basis for the bundle that is held by the destination repository: the bundle assumes that all objects in the basis are already in the destination repository\.
.SH "OPTIONS"
.PP
create <file>
.RS 4
Used to create a bundle named \fIfile\fR\. This requires the \fIgit\-rev\-list\fR arguments to define the bundle contents\.
.RE
.PP
verify <file>
.RS 4
Used to check that a bundle file is valid and will apply cleanly to the current repository\. This includes checks on the bundle format itself as well as checking that the prerequisite commits exist and are fully linked in the current repository\. \fIgit\-bundle\fR prints a list of missing commits, if any, and exits with non\-zero status\.
.RE
.PP
list\-heads <file>
.RS 4
Lists the references defined in the bundle\. If followed by a list of references, only references matching those given are printed out\.
.RE
.PP
unbundle <file>
.RS 4
Passes the objects in the bundle to \fIgit\-index\-pack\fR for storage in the repository, then prints the names of all defined references\. If a reflist is given, only references matching those in the given list are printed\. This command is really plumbing, intended to be called only by \fIgit\-fetch\fR\.
.RE
.PP
[git\-rev\-list\-args\&...]
.RS 4
A list of arguments, acceptable to \fIgit\-rev\-parse\fR and \fIgit\-rev\-list\fR, that specify the specific objects and references to transport\. For example, "master~10\.\.master" causes the current master reference to be packaged along with all objects added since its 10th ancestor commit\. There is no explicit limit to the number of references and objects that may be packaged\.
.RE
.PP
[refname\&...]
.RS 4
A list of references used to limit the references reported as available\. This is principally of use to \fIgit\-fetch\fR, which expects to receive only those references asked for and not necessarily everything in the pack (in this case, \fIgit\-bundle\fR is acting like \fIgit\-fetch\-pack\fR)\.
.RE
.SH "SPECIFYING REFERENCES"
\fIgit\-bundle\fR will only package references that are shown by \fIgit\-show\-ref\fR: this includes heads, tags, and remote heads\. References such as master1 cannot be packaged, but are perfectly suitable for defining the basis\. More than one reference may be packaged, and more than one basis can be specified\. The objects packaged are those not contained in the union of the given bases\. Each basis can be specified explicitly (e\.g\., ^master10), or implicitly (e\.g\., master~10\.\.master, master \-\-since=10\.days\.ago)\.

It is very important that the basis used be held by the destination\. It is okay to err on the side of conservatism, causing the bundle file to contain objects already in the destination as these are ignored when unpacking at the destination\.
.SH "EXAMPLE"
Assume two repositories exist as R1 on machine A, and R2 on machine B\. For whatever reason, direct connection between A and B is not allowed, but we can move data from A to B via some mechanism (CD, email, etc)\. We want to update R2 with developments made on branch master in R1\.

To create the bundle you have to specify the basis\. You have some options:

.sp
.RS 4
\h'-04'\(bu\h'+03'Without basis\.

This is useful when sending the whole history\.
.RE
.sp
.RS 4
.nf

\.ft C
$ git bundle create mybundle master
\.ft

.fi
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'Using temporally tags\.

We set a tag in R1 (lastR2bundle) after the previous such transport, and move it afterwards to help build the bundle\.
.RE
.sp
.RS 4
.nf

\.ft C
$ git bundle create mybundle master ^lastR2bundle
$ git tag \-f lastR2bundle master
\.ft

.fi
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'Using a tag present in both repositories
.RE
.sp
.RS 4
.nf

\.ft C
$ git bundle create mybundle master ^v1\.0\.0
\.ft

.fi
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'A basis based on time\.
.RE
.sp
.RS 4
.nf

\.ft C
$ git bundle create mybundle master \-\-since=10\.days\.ago
\.ft

.fi
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'With a limit on the number of commits
.RE
.sp
.RS 4
.nf

\.ft C
$ git bundle create mybundle master \-n 10
\.ft

.fi
.RE
Then you move mybundle from A to B, and in R2 on B:

.sp
.RS 4
.nf

\.ft C
$ git bundle verify mybundle
$ git fetch mybundle master:localRef
\.ft

.fi
.RE
With something like this in the config in R2:

.sp
.RS 4
.nf

\.ft C
[remote "bundle"]
    url = /home/me/tmp/file\.bdl
    fetch = refs/heads/*:refs/remotes/origin/*
\.ft

.fi
.RE
You can first sneakernet the bundle file to ~/tmp/file\.bdl and then these commands on machine B:

.sp
.RS 4
.nf

\.ft C
$ git ls\-remote bundle
$ git fetch bundle
$ git pull bundle
\.ft

.fi
.RE
would treat it as if it is talking with a remote side over the network\.
.SH "AUTHOR"
Written by Mark Levedahl <mdl123@verizon\.net>
.SH "GIT"
Part of the \fBgit\fR(1) suite

