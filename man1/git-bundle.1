.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-BUNDLE" "1" "09/30/2007" "Git 1.5.3.3.114.g2a85" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-bundle \- Move objects and refs by archive
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-bundle\fR create <file> [git\-rev\-list args]
\fIgit\-bundle\fR verify <file>
\fIgit\-bundle\fR list\-heads <file> [refname\&...]
\fIgit\-bundle\fR unbundle <file> [refname\&...]
.fi
.SH "DESCRIPTION"
Some workflows require that one or more branches of development on one machine be replicated on another machine, but the two machines cannot be directly connected so the interactive git protocols (git, ssh, rsync, http) cannot be used. This command provides support for git\-fetch and git\-pull to operate by packaging objects and references in an archive at the originating machine, then importing those into another repository using \fBgit\-fetch\fR(1) and \fBgit\-pull\fR(1) after moving the archive by some means (i.e., by sneakernet). As no direct connection between repositories exists, the user must specify a basis for the bundle that is held by the destination repository: the bundle assumes that all objects in the basis are already in the destination repository.
.SH "OPTIONS"
.TP
create <file>
Used to create a bundle named \fIfile\fR. This requires the git\-rev\-list arguments to define the bundle contents.
.TP
verify <file>
Used to check that a bundle file is valid and will apply cleanly to the current repository. This includes checks on the bundle format itself as well as checking that the prerequisite commits exist and are fully linked in the current repository. git\-bundle prints a list of missing commits, if any, and exits with non\-zero status.
.TP
list\-heads <file>
Lists the references defined in the bundle. If followed by a list of references, only references matching those given are printed out.
.TP
unbundle <file>
Passes the objects in the bundle to \fBgit\-index\-pack\fR(1) for storage in the repository, then prints the names of all defined references. If a reflist is given, only references matching those in the given list are printed. This command is really plumbing, intended to be called only by \fBgit\-fetch\fR(1).
.TP
[git\-rev\-list\-args\&...]
A list of arguments, acceptable to git\-rev\-parse and git\-rev\-list, that specify the specific objects and references to transport. For example, "master~10..master" causes the current master reference to be packaged along with all objects added since its 10th ancestor commit. There is no explicit limit to the number of references and objects that may be packaged.
.TP
[refname\&...]
A list of references used to limit the references reported as available. This is principally of use to git\-fetch, which expects to receive only those references asked for and not necessarily everything in the pack (in this case, git\-bundle is acting like \fBgit\-fetch\-pack\fR(1)).
.SH "SPECIFYING REFERENCES"
git\-bundle will only package references that are shown by git\-show\-ref: this includes heads, tags, and remote heads. References such as master~1 cannot be packaged, but are perfectly suitable for defining the basis. More than one reference may be packaged, and more than one basis can be specified. The objects packaged are those not contained in the union of the given bases. Each basis can be specified explicitly (e.g., ^master~10), or implicitly (e.g., master~10..master, master \-\-since=10.days.ago).

It is very important that the basis used be held by the destination. It is okay to err on the side of conservatism, causing the bundle file to contain objects already in the destination as these are ignored when unpacking at the destination.
.SH "EXAMPLE"
Assume two repositories exist as R1 on machine A, and R2 on machine B. For whatever reason, direct connection between A and B is not allowed, but we can move data from A to B via some mechanism (CD, email, etc). We want to update R2 with developments made on branch master in R1. We set a tag in R1 (lastR2bundle) after the previous such transport, and move it afterwards to help build the bundle.

in R1 on A:
.sp
.nf
.ft C
$ git\-bundle create mybundle master ^lastR2bundle
$ git tag \-f lastR2bundle master
.ft

.fi
(move mybundle from A to B by some mechanism)

in R2 on B:
.sp
.nf
.ft C
$ git\-bundle verify mybundle
$ git\-fetch mybundle  refspec
.ft

.fi
where refspec is refInBundle:localRef

Also, with something like this in your config:
.sp
.nf
url = /home/me/tmp/file.bdl
fetch = refs/heads/*:refs/remotes/origin/*
.fi
You can first sneakernet the bundle file to ~/tmp/file.bdl and then these commands:
.sp
.nf
.ft C
$ git ls\-remote bundle
$ git fetch bundle
$ git pull bundle
.ft

.fi
would treat it as if it is talking with a remote side over the network.
.SH "AUTHOR"
Written by Mark Levedahl <mdl123@verizon.net>
.SH "GIT"
Part of the \fBgit\fR(7) suite

