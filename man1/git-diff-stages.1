.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-DIFF\-STAGES" "1" "10/01/2006" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-diff\-stages \- Compares content and mode of blobs between stages in an unmerged index file
.SH "SYNOPSIS"
\fIgit\-diff\-stages\fR [<common diff options>] <stage1> <stage2> [<path>\&...]
.sp
.SH "DESCRIPTION"
Compares the content and mode of the blobs in two stages in an unmerged index file.
.sp
.SH "OPTIONS"
.TP
\-p
Generate patch (see section on generating patches)
.TP
\-u
Synonym for "\-p".
.TP
\-\-raw
Generate the raw format.
.TP
\-\-patch\-with\-raw
Synonym for "\-p \-\-raw".
.TP
\-\-stat[=width[,name\-width]]
Generate a diffstat. You can override the default output width for 80\-column terminal by "\-\-stat=width". The width of the filename part can be controlled by giving another width to it separated by a comma.
.TP
\-\-summary
Output a condensed summary of extended header information such as creations, renames and mode changes.
.TP
\-\-patch\-with\-stat
Synonym for "\-p \-\-stat".
.TP
\-z
\\0 line termination on output
.TP
\-\-name\-only
Show only names of changed files.
.TP
\-\-name\-status
Show only names and status of changed files.
.TP
\-\-color
Show colored diff.
.TP
\-\-no\-color
Turn off colored diff, even when the configuration file gives the default to color output.
.TP
\-\-color\-words
Show colored word diff, i.e. color words which have changed.
.TP
\-\-no\-renames
Turn off rename detection, even when the configuration file gives the default to do so.
.TP
\-\-full\-index
Instead of the first handful characters, show full object name of pre\- and post\-image blob on the "index" line when generating a patch format output.
.TP
\-\-binary
In addition to \-\-full\-index, output "binary diff" that can be applied with "git apply".
.TP
\-\-abbrev[=<n>]
Instead of showing the full 40\-byte hexadecimal object name in diff\-raw format output and diff\-tree header lines, show only handful hexdigits prefix. This is independent of \-\-full\-index option above, which controls the diff\-patch output format. Non default number of digits can be specified with \-\-abbrev=<n>.
.TP
\-B
Break complete rewrite changes into pairs of delete and create.
.TP
\-M
Detect renames.
.TP
\-C
Detect copies as well as renames.
.TP
\-\-diff\-filter=[ACDMRTUXB*]
Select only files that are Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R), have their type (mode) changed (T), are Unmerged (U), are Unknown (X), or have had their pairing Broken (B). Any combination of the filter characters may be used. When
*
(All\-or\-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected.
.TP
\-\-find\-copies\-harder
For performance reasons, by default, \-C option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution.
.TP
\-l<num>
\-M and \-C options require O(n^2) processing time where n is the number of potential rename/copy targets. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number.
.TP
\-S<string>
Look for differences that contain the change in <string>.
.TP
\-\-pickaxe\-all
When \-S finds a change, show all the changes in that changeset, not just the files that contain the change in <string>.
.TP
\-\-pickaxe\-regex
Make the <string> not a plain string but an extended POSIX regex to match.
.TP
\-O<orderfile>
Output the patch in the order specified in the <orderfile>, which has one shell glob pattern per line.
.TP
\-R
Swap two inputs; that is, show differences from index or on\-disk file to tree contents.
.TP
\-\-text
Treat all files as text.
.TP
\-a
Shorthand for "\-\-text".
For more detailed explanation on these common options, see also [1]\&\fIdiffcore documentation\fR.
.sp
.TP
<stage1>,<stage2>
The stage number to be compared.
.SH "OUTPUT FORMAT"
The output format from "git\-diff\-index", "git\-diff\-tree" and "git\-diff\-files" are very similar.
.sp
These commands all compare two sets of things; what is compared differs:
.sp
.TP
git\-diff\-index <tree\-ish>
compares the <tree\-ish> and the files on the filesystem.
.TP
git\-diff\-index \-\-cached <tree\-ish>
compares the <tree\-ish> and the index.
.TP
git\-diff\-tree [\-r] <tree\-ish\-1> <tree\-ish\-2> [<pattern>\&...]
compares the trees named by the two arguments.
.TP
git\-diff\-files [<pattern>\&...]
compares the index and the files on the filesystem.
An output line is formatted this way:
.sp
.sp
.nf
in\-place edit  :100644 100644 bcd1234... 0123456... M file0
copy\-edit      :100644 100644 abcd123... 1234567... C68 file1 file2
rename\-edit    :100644 100644 abcd123... 1234567... R86 file1 file3
create         :000000 100644 0000000... 1234567... A file4
delete         :100644 000000 1234567... 0000000... D file5
unmerged       :000000 000000 0000000... 0000000... U file6
.fi
That is, from the left to the right:
.sp
.TP 3
1.
a colon.
.TP
2.
mode for "src"; 000000 if creation or unmerged.
.TP
3.
a space.
.TP
4.
mode for "dst"; 000000 if deletion or unmerged.
.TP
5.
a space.
.TP
6.
sha1 for "src"; 0{40} if creation or unmerged.
.TP
7.
a space.
.TP
8.
sha1 for "dst"; 0{40} if creation, unmerged or "look at work tree".
.TP
9.
a space.
.TP
10.
status, followed by optional "score" number.
.TP
11.
a tab or a NUL when
\fI\-z\fR
option is used.
.TP
12.
path for "src"
.TP
13.
a tab or a NUL when
\fI\-z\fR
option is used; only exists for C or R.
.TP
14.
path for "dst"; only exists for C or R.
.TP
15.
an LF or a NUL when
\fI\-z\fR
option is used, to terminate the record.
<sha1> is shown as all 0's if a file is new on the filesystem and it is out of sync with the index.
.sp
Example:
.sp
.sp
.nf
:100644 100644 5be4a4...... 000000...... M file.c
.fi
When \-z option is not used, TAB, LF, and backslash characters in pathnames are represented as \\t, \\n, and \\\\, respectively.
.sp
.SH "GENERATING PATCHES WITH \-P"
When "git\-diff\-index", "git\-diff\-tree", or "git\-diff\-files" are run with a \fI\-p\fR option, they do not produce the output described above; instead they produce a patch file.
.sp
The patch generation can be customized at two levels.
.sp
.TP 3
1.
When the environment variable
\fIGIT_EXTERNAL_DIFF\fR
is not set, these commands internally invoke "diff" like this:
.sp
.nf
diff \-L a/<path> \-L b/<path> \-pu <old> <new>
.fi
For added files,
/dev/null
is used for <old>. For removed files,
/dev/null
is used for <new>
.sp
The "diff" formatting options can be customized via the environment variable
\fIGIT_DIFF_OPTS\fR. For example, if you prefer context diff:
.sp
.nf
GIT_DIFF_OPTS=\-c git\-diff\-index \-p HEAD
.fi
.TP
2.
When the environment variable
\fIGIT_EXTERNAL_DIFF\fR
is set, the program named by it is called, instead of the diff invocation described above.
.sp
For a path that is added, removed, or modified,
\fIGIT_EXTERNAL_DIFF\fR
is called with 7 parameters:
.sp
.nf
path old\-file old\-hex old\-mode new\-file new\-hex new\-mode
.fi
where:
<old|new>\-file

are files GIT_EXTERNAL_DIFF can use to read the contents of <old|new>,

<old|new>\-hex

are the 40\-hexdigit SHA1 hashes,

<old|new>\-mode

are the octal representation of the file modes.

The file parameters can point at the user's working file (e.g.
new\-file
in "git\-diff\-files"),
/dev/null
(e.g.
old\-file
when a new file is added), or a temporary file (e.g.
old\-file
in the index).
\fIGIT_EXTERNAL_DIFF\fR
should not worry about unlinking the temporary file \-\-\- it is removed when
\fIGIT_EXTERNAL_DIFF\fR
exits.
For a path that is unmerged, \fIGIT_EXTERNAL_DIFF\fR is called with 1 parameter, <path>.
.sp
.SH "GIT SPECIFIC EXTENSION TO DIFF FORMAT"
What \-p option produces is slightly different from the traditional diff format.
.sp
.TP 3
1.
It is preceded with a "git diff" header, that looks like this:
.sp
.nf
diff \-\-git a/file1 b/file2
.fi
The
a/
and
b/
filenames are the same unless rename/copy is involved. Especially, even for a creation or a deletion,
/dev/null
is _not_ used in place of
a/
or
b/
filenames.
.sp
When rename/copy is involved,
file1
and
file2
show the name of the source file of the rename/copy and the name of the file that rename/copy produces, respectively.
.TP
2.
It is followed by one or more extended header lines:
.sp
.nf
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>..<hash> <mode>
.fi
.TP
3.
TAB, LF, and backslash characters in pathnames are represented as
\\t,
\\n, and
\\\\, respectively.
.SH "COMBINED DIFF FORMAT"
git\-diff\-tree and git\-diff\-files can take \fI\-c\fR or \fI\-\-cc\fR option to produce \fIcombined diff\fR, which looks like this:
.sp
.sp
.nf
diff \-\-combined describe.c
@@@ +98,7 @@@
   return (a_date > b_date) ? \-1 : (a_date == b_date) ? 0 : 1;
  }

\- static void describe(char *arg)
 \-static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  {
 +     unsigned char sha1[20];
 +     struct commit *cmit;
.fi
Unlike the traditional \fIunified\fR diff format, which shows two files A and B with a single column that has \- (minus \(em appears in A but removed in B), + (plus \(em missing in A but added to B), or (space \(em unchanged) prefix, this format compares two or more files file1, file2,\&... with one file X, and shows how X differs from each of fileN. One column for each of fileN is prepended to the output line to note how X's line is different from it.
.sp
A \- character in the column N means that the line appears in fileN but it does not appear in the last file. A + character in the column N means that the line appears in the last file, and fileN does not have that line.
.sp
In the above example output, the function signature was changed from both files (hence two \- removals from both file1 and file2, plus ++ to mean one line that was added does not appear in either file1 nor file2). Also two other lines are the same from file1 but do not appear in file2 (hence prefixed with +).
.sp
When shown by git diff\-tree \-c, it compares the parents of a merge commit with the merge result (i.e. file1..fileN are the parents). When shown by git diff\-files \-c, it compares the two unresolved merge parents with the working tree file (i.e. file1 is stage 2 aka "our version", file2 is stage 3 aka "their version").
.sp
.SH "AUTHOR"
Written by Junio C Hamano <junkio@cox.net>
.sp
.SH "DOCUMENTATION"
Documentation by Junio C Hamano.
.sp
.SH "GIT"
Part of the \fBgit\fR(7) suite
.sp
.SH "REFERENCES"
.TP 3
1.\ diffcore documentation
\%diffcore.html
