.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "GIT-DIFF-TREE" 1 "" "" ""
.SH NAME
git-diff-tree \- Compares the content and mode of blobs found via two tree objects
.SH "SYNOPSIS"

.nf
\fIgit\-diff\-tree\fR [\-\-stdin] [\-m] [\-s] [\-v] [\-\-no\-commit\-id] [\-\-pretty]
              [\-t] [\-r] [\-c | \-\-cc] [\-\-root] [<common diff options>]
              <tree\-ish> [<tree\-ish>] [<path>...]
.fi

.SH "DESCRIPTION"


Compares the content and mode of the blobs found via two tree objects\&.


If there is only one <tree\-ish> given, the commit is compared with its parents (see \-\-stdin below)\&.


Note that "git\-diff\-tree" can use the tree encapsulated in a commit object\&.

.SH "OPTIONS"

.TP
\-p
Generate patch (see section on generating patches)

.TP
\-u
Synonym for "\-p"\&.

.TP
\-\-patch\-with\-raw
Generate patch but keep also the default raw diff output\&.

.TP
\-\-stat
Generate a diffstat instead of a patch\&.

.TP
\-\-summary
Output a condensed summary of extended header information such as creations, renames and mode changes\&.

.TP
\-\-patch\-with\-stat
Generate patch and prepend its diffstat\&.

.TP
\-z
\\0 line termination on output

.TP
\-\-name\-only
Show only names of changed files\&.

.TP
\-\-name\-status
Show only names and status of changed files\&.

.TP
\-\-full\-index
Instead of the first handful characters, show full object name of pre\- and post\-image blob on the "index" line when generating a patch format output\&.

.TP
\-\-abbrev[=<n>]
Instead of showing the full 40\-byte hexadecimal object name in diff\-raw format output and diff\-tree header lines, show only handful hexdigits prefix\&. This is independent of \-\-full\-index option above, which controls the diff\-patch output format\&. Non default number of digits can be specified with \-\-abbrev=<n>\&.

.TP
\-B
Break complete rewrite changes into pairs of delete and create\&.

.TP
\-M
Detect renames\&.

.TP
\-C
Detect copies as well as renames\&.

.TP
\-\-diff\-filter=[ACDMRTUXB*]
Select only files that are Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R), have their type (mode) changed (T), are Unmerged (U), are Unknown (X), or have had their pairing Broken (B)\&. Any combination of the filter characters may be used\&. When * (All\-or\-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected\&.

.TP
\-\-find\-copies\-harder
For performance reasons, by default, \-C option finds copies only if the original file of the copy was modified in the same changeset\&. This flag makes the command inspect unmodified files as candidates for the source of copy\&. This is a very expensive operation for large projects, so use it with caution\&.

.TP
\-l<num>
\-M and \-C options require O(n^2) processing time where n is the number of potential rename/copy targets\&. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number\&.

.TP
\-S<string>
Look for differences that contain the change in <string>\&.

.TP
\-\-pickaxe\-all
When \-S finds a change, show all the changes in that changeset, not just the files that contain the change in <string>\&.

.TP
\-\-pickaxe\-regex
Make the <string> not a plain string but an extended POSIX regex to match\&.

.TP
\-O<orderfile>
Output the patch in the order specified in the <orderfile>, which has one shell glob pattern per line\&.

.TP
\-R
Swap two inputs; that is, show differences from index or on\-disk file to tree contents\&.

.TP
\-\-text
Treat all files as text\&.

.TP
\-a
Shorthand for "\-\-text"\&.


For more detailed explanation on these common options, see also diffcore documentation: \fIdiffcore.html\fR\&.

.TP
<tree\-ish>
The id of a tree object\&.

.TP
<path>...
If provided, the results are limited to a subset of files matching one of these prefix strings\&. i\&.e\&., file matches /^<pattern1>|<pattern2>|.../ Note that this parameter does not provide any wildcard or regexp features\&.

.TP
\-r
recurse into sub\-trees

.TP
\-t
show tree entry itself as well as subtrees\&. Implies \-r\&.

.TP
\-\-root
When \fI\-\-root\fR is specified the initial commit will be showed as a big creation event\&. This is equivalent to a diff against the NULL tree\&.

.TP
\-\-stdin
When \fI\-\-stdin\fR is specified, the command does not take <tree\-ish> arguments from the command line\&. Instead, it reads either one <commit> or a pair of <tree\-ish> separated with a single space from its standard input\&.

When a single commit is given on one line of such input, it compares the commit with its parents\&. The following flags further affects its behavior\&. This does not apply to the case where two <tree\-ish> separated with a single space are given\&.

.TP
\-m
By default, "git\-diff\-tree \-\-stdin" does not show differences for merge commits\&. With this flag, it shows differences to that commit from all of its parents\&. See also \fI\-c\fR\&.

.TP
\-s
By default, "git\-diff\-tree \-\-stdin" shows differences, either in machine\-readable form (without \fI\-p\fR) or in patch form (with \fI\-p\fR)\&. This output can be suppressed\&. It is only useful with \fI\-v\fR flag\&.

.TP
\-v
This flag causes "git\-diff\-tree \-\-stdin" to also show the commit message before the differences\&.

.TP
\-\-pretty[=(raw|medium|short)]
This is used to control "pretty printing" format of the commit message\&. Without "=<style>", it defaults to medium\&.

.TP
\-\-no\-commit\-id
git\-diff\-tree outputs a line with the commit ID when applicable\&. This flag suppressed the commit ID output\&.

.TP
\-c
This flag changes the way a merge commit is displayed (which means it is useful only when the command is given one <tree\-ish>, or \fI\-\-stdin\fR)\&. It shows the differences from each of the parents to the merge result simultaneously instead of showing pairwise diff between a parent and the result one at a time (which is what the \fI\-m\fR option does)\&. Furthermore, it lists only files which were modified from all parents\&.

.TP
\-\-cc
This flag changes the way a merge commit patch is displayed, in a similar way to the \fI\-c\fR option\&. It implies the \fI\-c\fR and \fI\-p\fR options and further compresses the patch output by omitting hunks that show differences from only one parent, or show the same change from all but one parent for an Octopus merge\&. When this optimization makes all hunks disappear, the commit itself and the commit log message is not shown, just like in any other "empty diff" case\&.

.TP
\-\-always
Show the commit itself and the commit log message even if the diff itself is empty\&.

.SH "LIMITING OUTPUT"


If you're only interested in differences in a subset of files, for example some architecture\-specific files, you might do:

.nf
git\-diff\-tree \-r <tree\-ish> <tree\-ish> arch/ia64 include/asm\-ia64
.fi


and it will only show you what changed in those two directories\&.


Or if you are searching for what changed in just kernel/sched\&.c, just do

.nf
git\-diff\-tree \-r <tree\-ish> <tree\-ish> kernel/sched\&.c
.fi


and it will ignore all differences to other files\&.


The pattern is always the prefix, and is matched exactly\&. There are no wildcards\&. Even stricter, it has to match a complete path component\&. I\&.e\&. "foo" does not pick up foobar\&.h\&. "foo" does match foo/bar\&.h so it can be used to name subdirectories\&.


An example of normal usage is:

.nf
torvalds@ppc970:~/git> git\-diff\-tree 5319e4\&.\&.\&.\&.\&.\&.
*100664\->100664 blob    ac348b\&.\&.\&.\&.\&.\&.\&.\->a01513\&.\&.\&.\&.\&.\&.\&.      git\-fsck\-objects\&.c
.fi


which tells you that the last commit changed just one file (it's from this one:

.nf
commit 3c6f7ca19ad4043e9e72fa94106f352897e651a8
tree 5319e4d609cdd282069cc4dce33c1db559539b03
parent b4e628ea30d5ab3606119d2ea5caeab141d38df7
author Linus Torvalds <torvalds@ppc970\&.osdl\&.org> Sat Apr 9 12:02:30 2005
committer Linus Torvalds <torvalds@ppc970\&.osdl\&.org> Sat Apr 9 12:02:30 2005

Make "git\-fsck\-objects" print out all the root commits it finds\&.

Once I do the reference tracking, I'll also make it print out all the
HEAD commits it finds, which is even more interesting\&.
.fi


in case you care)\&.

.SH "OUTPUT FORMAT"


The output format from "git\-diff\-index", "git\-diff\-tree" and "git\-diff\-files" are very similar\&.


These commands all compare two sets of things; what is compared differs:

.TP
git\-diff\-index <tree\-ish>
compares the <tree\-ish> and the files on the filesystem\&.

.TP
git\-diff\-index \-\-cached <tree\-ish>
compares the <tree\-ish> and the index\&.

.TP
git\-diff\-tree [\-r] <tree\-ish\-1> <tree\-ish\-2> [<pattern>...]
compares the trees named by the two arguments\&.

.TP
git\-diff\-files [<pattern>...]
compares the index and the files on the filesystem\&.


An output line is formatted this way:

.nf
in\-place edit  :100644 100644 bcd1234\&.\&.\&. 0123456\&.\&.\&. M file0
copy\-edit      :100644 100644 abcd123\&.\&.\&. 1234567\&.\&.\&. C68 file1 file2
rename\-edit    :100644 100644 abcd123\&.\&.\&. 1234567\&.\&.\&. R86 file1 file3
create         :000000 100644 0000000\&.\&.\&. 1234567\&.\&.\&. A file4
delete         :100644 000000 1234567\&.\&.\&. 0000000\&.\&.\&. D file5
unmerged       :000000 000000 0000000\&.\&.\&. 0000000\&.\&.\&. U file6
.fi


That is, from the left to the right:

.TP 3
1.
a colon\&.
.TP
2.
mode for "src"; 000000 if creation or unmerged\&.
.TP
3.
a space\&.
.TP
4.
mode for "dst"; 000000 if deletion or unmerged\&.
.TP
5.
a space\&.
.TP
6.
sha1 for "src"; 0{40} if creation or unmerged\&.
.TP
7.
a space\&.
.TP
8.
sha1 for "dst"; 0{40} if creation, unmerged or "look at work tree"\&.
.TP
9.
a space\&.
.TP
10.
status, followed by optional "score" number\&.
.TP
11.
a tab or a NUL when \fI\-z\fR option is used\&.
.TP
12.
path for "src"
.TP
13.
a tab or a NUL when \fI\-z\fR option is used; only exists for C or R\&.
.TP
14.
path for "dst"; only exists for C or R\&.
.TP
15.
an LF or a NUL when \fI\-z\fR option is used, to terminate the record\&.
.LP


<sha1> is shown as all 0's if a file is new on the filesystem and it is out of sync with the index\&.


Example:

.nf
:100644 100644 5be4a4\&.\&.\&.\&.\&.\&. 000000\&.\&.\&.\&.\&.\&. M file\&.c
.fi


When \-z option is not used, TAB, LF, and backslash characters in pathnames are represented as \\t, \\n, and \\\\, respectively\&.

.SH "GENERATING PATCHES WITH -P"


When "git\-diff\-index", "git\-diff\-tree", or "git\-diff\-files" are run with a \fI\-p\fR option, they do not produce the output described above; instead they produce a patch file\&.


The patch generation can be customized at two levels\&.

.TP 3
1.
When the environment variable \fIGIT_EXTERNAL_DIFF\fR is not set, these commands internally invoke "diff" like this:


.nf
diff \-L a/<path> \-L b/<path> \-pu <old> <new>
.fi
For added files, /dev/null is used for <old>\&. For removed files, /dev/null is used for <new>

The "diff" formatting options can be customized via the environment variable \fIGIT_DIFF_OPTS\fR\&. For example, if you prefer context diff:

.nf
GIT_DIFF_OPTS=\-c git\-diff\-index \-p HEAD
.fi
.TP
2.
When the environment variable \fIGIT_EXTERNAL_DIFF\fR is set, the program named by it is called, instead of the diff invocation described above\&.

For a path that is added, removed, or modified, \fIGIT_EXTERNAL_DIFF\fR is called with 7 parameters:


.nf
path old\-file old\-hex old\-mode new\-file new\-hex new\-mode
.fi
where:

<old|new>\-file

are files GIT_EXTERNAL_DIFF can use to read the contents of <old|new>,

<old|new>\-hex

are the 40\-hexdigit SHA1 hashes,

<old|new>\-mode

are the octal representation of the file modes\&.

The file parameters can point at the user's working file (e\&.g\&. new\-file in "git\-diff\-files"), /dev/null (e\&.g\&. old\-file when a new file is added), or a temporary file (e\&.g\&. old\-file in the index)\&. \fIGIT_EXTERNAL_DIFF\fR should not worry about unlinking the temporary file \-\-\- it is removed when \fIGIT_EXTERNAL_DIFF\fR exits\&.
.LP


For a path that is unmerged, \fIGIT_EXTERNAL_DIFF\fR is called with 1 parameter, <path>\&.

.SH "GIT SPECIFIC EXTENSION TO DIFF FORMAT"


What \-p option produces is slightly different from the traditional diff format\&.

.TP 3
1.
It is preceded with a "git diff" header, that looks like this:


.nf
diff \-\-git a/file1 b/file2
.fi
The a/ and b/ filenames are the same unless rename/copy is involved\&. Especially, even for a creation or a deletion, /dev/null is _not_ used in place of a/ or b/ filenames\&.

When rename/copy is involved, file1 and file2 show the name of the source file of the rename/copy and the name of the file that rename/copy produces, respectively\&.
.TP
2.
It is followed by one or more extended header lines:

.nf
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>\&.\&.<hash> <mode>
.fi
.TP
3.
TAB, LF, and backslash characters in pathnames are represented as \\t, \\n, and \\\\, respectively\&.
.LP

.SH "COMBINED DIFF FORMAT"


git\-diff\-tree and git\-diff\-files can take \fI\-c\fR or \fI\-\-cc\fR option to produce \fIcombined diff\fR, which looks like this:

.nf
diff \-\-combined describe\&.c
@@@ +98,7 @@@
   return (a_date > b_date) ? \-1 : (a_date == b_date) ? 0 : 1;
  }

\- static void describe(char *arg)
 \-static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  {
 +     unsigned char sha1[20];
 +     struct commit *cmit;
.fi


Unlike the traditional \fIunified\fR diff format, which shows two files A and B with a single column that has \- (minus -- appears in A but removed in B), + (plus -- missing in A but added to B), or (space -- unchanged) prefix, this format compares two or more files file1, file2,... with one file X, and shows how X differs from each of fileN\&. One column for each of fileN is prepended to the output line to note how X's line is different from it\&.


A \- character in the column N means that the line appears in fileN but it does not appear in the last file\&. A + character in the column N means that the line appears in the last file, and fileN does not have that line\&.


In the above example output, the function signature was changed from both files (hence two \- removals from both file1 and file2, plus ++ to mean one line that was added does not appear in either file1 nor file2)\&. Also two other lines are the same from file1 but do not appear in file2 (hence prefixed with +)\&.


When shown by git diff\-tree \-c, it compares the parents of a merge commit with the merge result (i\&.e\&. file1\&.\&.fileN are the parents)\&. When shown by git diff\-files \-c, it compares the two unresolved merge parents with the working tree file (i\&.e\&. file1 is stage 2 aka "our version", file2 is stage 3 aka "their version")\&.

.SH "AUTHOR"


Written by Linus Torvalds <torvalds@osdl\&.org>

.SH "DOCUMENTATION"


Documentation by David Greaves, Junio C Hamano and the git\-list <git@vger\&.kernel\&.org>\&.

.SH "GIT"


Part of the \fBgit\fR(7) suite

