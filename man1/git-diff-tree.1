.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "GIT\-DIFF\-TREE" "1" "06/21/2007" "Git 1.5.2.2.249.g45fd" "Git Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
git\-diff\-tree \- Compares the content and mode of blobs found via two tree objects
.SH "SYNOPSIS"
.sp
.nf
\fIgit\-diff\-tree\fR [\-\-stdin] [\-m] [\-s] [\-v] [\-\-no\-commit\-id] [\-\-pretty]
              [\-t] [\-r] [\-c | \-\-cc] [\-\-root] [<common diff options>]
              <tree\-ish> [<tree\-ish>] [<path>\&...]
.fi
.SH "DESCRIPTION"
Compares the content and mode of the blobs found via two tree objects.

If there is only one <tree\-ish> given, the commit is compared with its parents (see \-\-stdin below).

Note that "git\-diff\-tree" can use the tree encapsulated in a commit object.
.SH "OPTIONS"
.TP
\-p
Generate patch (see section on generating patches)
.TP
\-u
Synonym for "\-p".
.TP
\-\-raw
Generate the raw format.
.TP
\-\-patch\-with\-raw
Synonym for "\-p \-\-raw".
.TP
\-\-stat[=width[,name\-width]]
Generate a diffstat. You can override the default output width for 80\-column terminal by "\-\-stat=width". The width of the filename part can be controlled by giving another width to it separated by a comma.
.TP
\-\-numstat
Similar to \-\-stat, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two \- instead of saying 0 0.
.TP
\-\-shortstat
Output only the last line of the \-\-stat format containing total number of modified files, as well as number of added and deleted lines.
.TP
\-\-summary
Output a condensed summary of extended header information such as creations, renames and mode changes.
.TP
\-\-patch\-with\-stat
Synonym for "\-p \-\-stat".
.TP
\-z
\\0 line termination on output
.TP
\-\-name\-only
Show only names of changed files.
.TP
\-\-name\-status
Show only names and status of changed files.
.TP
\-\-color
Show colored diff.
.TP
\-\-no\-color
Turn off colored diff, even when the configuration file gives the default to color output.
.TP
\-\-color\-words
Show colored word diff, i.e. color words which have changed.
.TP
\-\-no\-renames
Turn off rename detection, even when the configuration file gives the default to do so.
.TP
\-\-check
Warn if changes introduce trailing whitespace or an indent that uses a space before a tab.
.TP
\-\-full\-index
Instead of the first handful characters, show full object name of pre\- and post\-image blob on the "index" line when generating a patch format output.
.TP
\-\-binary
In addition to \-\-full\-index, output "binary diff" that can be applied with "git apply".
.TP
\-\-abbrev[=<n>]
Instead of showing the full 40\-byte hexadecimal object name in diff\-raw format output and diff\-tree header lines, show only handful hexdigits prefix. This is independent of \-\-full\-index option above, which controls the diff\-patch output format. Non default number of digits can be specified with \-\-abbrev=<n>.
.TP
\-B
Break complete rewrite changes into pairs of delete and create.
.TP
\-M
Detect renames.
.TP
\-C
Detect copies as well as renames. See also \-\-find\-copies\-harder.
.TP
\-\-diff\-filter=[ACDMRTUXB*]
Select only files that are Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R), have their type (mode) changed (T), are Unmerged (U), are Unknown (X), or have had their pairing Broken (B). Any combination of the filter characters may be used. When * (All\-or\-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected.
.TP
\-\-find\-copies\-harder
For performance reasons, by default, \-C option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one \-C option has the same effect.
.TP
\-l<num>
\-M and \-C options require O(n^2) processing time where n is the number of potential rename/copy targets. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number.
.TP
\-S<string>
Look for differences that contain the change in <string>.
.TP
\-\-pickaxe\-all
When \-S finds a change, show all the changes in that changeset, not just the files that contain the change in <string>.
.TP
\-\-pickaxe\-regex
Make the <string> not a plain string but an extended POSIX regex to match.
.TP
\-O<orderfile>
Output the patch in the order specified in the <orderfile>, which has one shell glob pattern per line.
.TP
\-R
Swap two inputs; that is, show differences from index or on\-disk file to tree contents.
.TP
\-\-text
Treat all files as text.
.TP
\-a
Shorthand for "\-\-text".
.TP
\-\-ignore\-space\-at\-eol
Ignore changes in white spaces at EOL.
.TP
\-\-ignore\-space\-change
Ignore changes in amount of white space. This ignores white space at line end, and consider all other sequences of one or more white space characters to be equivalent.
.TP
\-b
Shorthand for "\-\-ignore\-space\-change".
.TP
\-\-ignore\-all\-space
Ignore white space when comparing lines. This ignores difference even if one line has white space where the other line has none.
.TP
\-w
Shorthand for "\-\-ignore\-all\-space".
.TP
\-\-exit\-code
Make the program exit with codes similar to diff(1). That is, it exits with 1 if there were differences and 0 means no differences.
.TP
\-\-quiet
Disable all output of the program. Implies \-\-exit\-code.

For more detailed explanation on these common options, see also [1]\&\fIdiffcore documentation\fR.
.TP
<tree\-ish>
The id of a tree object.
.TP
<path>\&...
If provided, the results are limited to a subset of files matching one of these prefix strings. i.e., file matches /^<pattern1>|<pattern2>|\&.../ Note that this parameter does not provide any wildcard or regexp features.
.TP
\-r
recurse into sub\-trees
.TP
\-t
show tree entry itself as well as subtrees. Implies \-r.
.TP
\-\-root
When \fI\-\-root\fR is specified the initial commit will be showed as a big creation event. This is equivalent to a diff against the NULL tree.
.TP
\-\-stdin
When \fI\-\-stdin\fR is specified, the command does not take <tree\-ish> arguments from the command line. Instead, it reads either one <commit> or a pair of <tree\-ish> separated with a single space from its standard input.

When a single commit is given on one line of such input, it compares the commit with its parents. The following flags further affects its behavior. This does not apply to the case where two <tree\-ish> separated with a single space are given.
.TP
\-m
By default, "git\-diff\-tree \-\-stdin" does not show differences for merge commits. With this flag, it shows differences to that commit from all of its parents. See also \fI\-c\fR.
.TP
\-s
By default, "git\-diff\-tree \-\-stdin" shows differences, either in machine\-readable form (without \fI\-p\fR) or in patch form (with \fI\-p\fR). This output can be suppressed. It is only useful with \fI\-v\fR flag.
.TP
\-v
This flag causes "git\-diff\-tree \-\-stdin" to also show the commit message before the differences.
.TP
\-\-pretty[=\fI<format>\fR]
Pretty print the contents of the commit logs in a given format, where \fI<format>\fR can be one of \fIoneline\fR, \fIshort\fR, \fImedium\fR, \fIfull\fR, \fIfuller\fR, \fIemail\fR, \fIraw\fR and \fIformat:<string>\fR. When left out the format default to \fImedium\fR.
.TP
\-\-abbrev\-commit
Instead of showing the full 40\-byte hexadecimal commit object name, show only handful hexdigits prefix. Non default number of digits can be specified with "\-\-abbrev=<n>" (which also modifies diff output, if it is displayed).

This should make "\-\-pretty=oneline" a whole lot more readable for people using 80\-column terminals.
.TP
\-\-encoding[=<encoding>]
The commit objects record the encoding used for the log message in their encoding header; this option can be used to tell the command to re\-code the commit log message in the encoding preferred by the user. For non plumbing commands this defaults to UTF\-8.
.TP
\-\-no\-commit\-id
git\-diff\-tree outputs a line with the commit ID when applicable. This flag suppressed the commit ID output.
.TP
\-c
This flag changes the way a merge commit is displayed (which means it is useful only when the command is given one <tree\-ish>, or \fI\-\-stdin\fR). It shows the differences from each of the parents to the merge result simultaneously instead of showing pairwise diff between a parent and the result one at a time (which is what the \fI\-m\fR option does). Furthermore, it lists only files which were modified from all parents.
.TP
\-\-cc
This flag changes the way a merge commit patch is displayed, in a similar way to the \fI\-c\fR option. It implies the \fI\-c\fR and \fI\-p\fR options and further compresses the patch output by omitting hunks that show differences from only one parent, or show the same change from all but one parent for an Octopus merge. When this optimization makes all hunks disappear, the commit itself and the commit log message is not shown, just like in any other "empty diff" case.
.TP
\-\-always
Show the commit itself and the commit log message even if the diff itself is empty.
.SH "PRETTY FORMATS"
If the commit is a merge, and if the pretty\-format is not \fIoneline\fR, \fIemail\fR or \fIraw\fR, an additional line is inserted before the \fIAuthor:\fR line. This line begins with "Merge: " and the sha1s of ancestral commits are printed, separated by spaces. Note that the listed commits may not necessarily be the list of the \fBdirect\fR parent commits if you have limited your view of history: for example, if you are only interested in changes related to a certain directory or file.

Here are some additional details for each format:
.TP 3
\(bu
\fIoneline\fR
.sp
.nf
<sha1> <title line>
.fi
This is designed to be as compact as possible.
.TP
\(bu
\fIshort\fR
.sp
.nf
commit <sha1>
Author: <author>
.fi
.sp
.nf
<title line>
.fi
.TP
\(bu
\fImedium\fR
.sp
.nf
commit <sha1>
Author: <author>
Date: <date>
.fi
.sp
.nf
<title line>
.fi
.sp
.nf
<full commit message>
.fi
.TP
\(bu
\fIfull\fR
.sp
.nf
commit <sha1>
Author: <author>
Commit: <committer>
.fi
.sp
.nf
<title line>
.fi
.sp
.nf
<full commit message>
.fi
.TP
\(bu
\fIfuller\fR
.sp
.nf
commit <sha1>
Author: <author>
AuthorDate: <date & time>
Commit: <committer>
CommitDate: <date & time>
.fi
.sp
.nf
<title line>
.fi
.sp
.nf
<full commit message>
.fi
.TP
\(bu
\fIemail\fR
.sp
.nf
From <sha1> <date>
From: <author>
Date: <date & time>
Subject: [PATCH] <title line>
.fi
.sp
.nf
<full commit message>
.fi
.TP
\(bu
\fIraw\fR

The \fIraw\fR format shows the entire commit exactly as stored in the commit object. Notably, the SHA1s are displayed in full, regardless of whether \-\-abbrev or \-\-no\-abbrev are used, and \fIparents\fR information show the true parent commits, without taking grafts nor history simplification into account.
.TP
\(bu
\fIformat:\fR

The \fIformat:\fR format allows you to specify which information you want to show. It works a little bit like printf format, with the notable exception that you get a newline with \fI%n\fR instead of \fI\\n\fR.

E.g, \fIformat:"The author of %h was %an, %ar%nThe title was >>%s<<%n"\fR would show something like this:
.sp
.nf
The author of fe6e0ee was Junio C Hamano, 23 hours ago
The title was >>t4119: test autocomputing \-p<n> for traditional diff input.<<
.fi
The placeholders are:
.RS
.TP 3
\(bu
\fI%H\fR: commit hash
.TP
\(bu
\fI%h\fR: abbreviated commit hash
.TP
\(bu
\fI%T\fR: tree hash
.TP
\(bu
\fI%t\fR: abbreviated tree hash
.TP
\(bu
\fI%P\fR: parent hashes
.TP
\(bu
\fI%p\fR: abbreviated parent hashes
.TP
\(bu
\fI%an\fR: author name
.TP
\(bu
\fI%ae\fR: author email
.TP
\(bu
\fI%ad\fR: author date
.TP
\(bu
\fI%aD\fR: author date, RFC2822 style
.TP
\(bu
\fI%ar\fR: author date, relative
.TP
\(bu
\fI%at\fR: author date, UNIX timestamp
.TP
\(bu
\fI%cn\fR: committer name
.TP
\(bu
\fI%ce\fR: committer email
.TP
\(bu
\fI%cd\fR: committer date
.TP
\(bu
\fI%cD\fR: committer date, RFC2822 style
.TP
\(bu
\fI%cr\fR: committer date, relative
.TP
\(bu
\fI%ct\fR: committer date, UNIX timestamp
.TP
\(bu
\fI%e\fR: encoding
.TP
\(bu
\fI%s\fR: subject
.TP
\(bu
\fI%b\fR: body
.TP
\(bu
\fI%Cred\fR: switch color to red
.TP
\(bu
\fI%Cgreen\fR: switch color to green
.TP
\(bu
\fI%Cblue\fR: switch color to blue
.TP
\(bu
\fI%Creset\fR: reset color
.TP
\(bu
\fI%m\fR: left, right or boundary mark
.TP
\(bu
\fI%n\fR: newline
.RE
.SH "LIMITING OUTPUT"
If you're only interested in differences in a subset of files, for example some architecture\-specific files, you might do:
.sp
.nf
git\-diff\-tree \-r <tree\-ish> <tree\-ish> arch/ia64 include/asm\-ia64
.fi
and it will only show you what changed in those two directories.

Or if you are searching for what changed in just kernel/sched.c, just do
.sp
.nf
git\-diff\-tree \-r <tree\-ish> <tree\-ish> kernel/sched.c
.fi
and it will ignore all differences to other files.

The pattern is always the prefix, and is matched exactly. There are no wildcards. Even stricter, it has to match a complete path component. I.e. "foo" does not pick up foobar.h. "foo" does match foo/bar.h so it can be used to name subdirectories.

An example of normal usage is:
.sp
.nf
torvalds@ppc970:~/git> git\-diff\-tree 5319e4......
*100664\->100664 blob    ac348b.......\->a01513.......      git\-fsck\-objects.c
.fi
which tells you that the last commit changed just one file (it's from this one:
.sp
.nf
commit 3c6f7ca19ad4043e9e72fa94106f352897e651a8
tree 5319e4d609cdd282069cc4dce33c1db559539b03
parent b4e628ea30d5ab3606119d2ea5caeab141d38df7
author Linus Torvalds <torvalds@ppc970.osdl.org> Sat Apr 9 12:02:30 2005
committer Linus Torvalds <torvalds@ppc970.osdl.org> Sat Apr 9 12:02:30 2005

Make "git\-fsck\-objects" print out all the root commits it finds.

Once I do the reference tracking, I'll also make it print out all the
HEAD commits it finds, which is even more interesting.
.fi
in case you care).
.SH "OUTPUT FORMAT"
The output format from "git\-diff\-index", "git\-diff\-tree" and "git\-diff\-files" are very similar.

These commands all compare two sets of things; what is compared differs:
.TP
git\-diff\-index <tree\-ish>
compares the <tree\-ish> and the files on the filesystem.
.TP
git\-diff\-index \-\-cached <tree\-ish>
compares the <tree\-ish> and the index.
.TP
git\-diff\-tree [\-r] <tree\-ish\-1> <tree\-ish\-2> [<pattern>\&...]
compares the trees named by the two arguments.
.TP
git\-diff\-files [<pattern>\&...]
compares the index and the files on the filesystem.

An output line is formatted this way:
.sp
.nf
in\-place edit  :100644 100644 bcd1234... 0123456... M file0
copy\-edit      :100644 100644 abcd123... 1234567... C68 file1 file2
rename\-edit    :100644 100644 abcd123... 1234567... R86 file1 file3
create         :000000 100644 0000000... 1234567... A file4
delete         :100644 000000 1234567... 0000000... D file5
unmerged       :000000 000000 0000000... 0000000... U file6
.fi
That is, from the left to the right:
.TP 3
1.
a colon.
.TP
2.
mode for "src"; 000000 if creation or unmerged.
.TP
3.
a space.
.TP
4.
mode for "dst"; 000000 if deletion or unmerged.
.TP
5.
a space.
.TP
6.
sha1 for "src"; 0{40} if creation or unmerged.
.TP
7.
a space.
.TP
8.
sha1 for "dst"; 0{40} if creation, unmerged or "look at work tree".
.TP
9.
a space.
.TP
10.
status, followed by optional "score" number.
.TP
11.
a tab or a NUL when \fI\-z\fR option is used.
.TP
12.
path for "src"
.TP
13.
a tab or a NUL when \fI\-z\fR option is used; only exists for C or R.
.TP
14.
path for "dst"; only exists for C or R.
.TP
15.
an LF or a NUL when \fI\-z\fR option is used, to terminate the record.

<sha1> is shown as all 0's if a file is new on the filesystem and it is out of sync with the index.

Example:
.sp
.nf
:100644 100644 5be4a4...... 000000...... M file.c
.fi
When \-z option is not used, TAB, LF, and backslash characters in pathnames are represented as \\t, \\n, and \\\\, respectively.
.SH "DIFF FORMAT FOR MERGES"
"git\-diff\-tree" and "git\-diff\-files" can take \fI\-c\fR or \fI\-\-cc\fR option to generate diff output also for merge commits. The output differs from the format described above in the following way:
.TP 3
1.
there is a colon for each parent
.TP
2.
there are more "src" modes and "src" sha1
.TP
3.
status is concatenated status characters for each parent
.TP
4.
no optional "score" number
.TP
5.
single path, only for "dst"

Example:
.sp
.nf
::100644 100644 100644 fabadb8... cc95eb0... 4866510... MM      describe.c
.fi
Note that \fIcombined diff\fR lists only files which were modified from all parents.
.SH "GENERATING PATCHES WITH \-P"
When "git\-diff\-index", "git\-diff\-tree", or "git\-diff\-files" are run with a \fI\-p\fR option, they do not produce the output described above; instead they produce a patch file. You can customize the creation of such patches via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables.

What the \-p option produces is slightly different from the traditional diff format.
.TP 3
1.
It is preceded with a "git diff" header, that looks like this:
.sp
.nf
diff \-\-git a/file1 b/file2
.fi
The a/ and b/ filenames are the same unless rename/copy is involved. Especially, even for a creation or a deletion, /dev/null is _not_ used in place of a/ or b/ filenames.

When rename/copy is involved, file1 and file2 show the name of the source file of the rename/copy and the name of the file that rename/copy produces, respectively.
.TP
2.
It is followed by one or more extended header lines:
.sp
.nf
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>..<hash> <mode>
.fi
.TP
3.
TAB, LF, double quote and backslash characters in pathnames are represented as \\t, \\n, \\" and \\\\, respectively. If there is need for such substitution then the whole pathname is put in double quotes.
.SH "COMBINED DIFF FORMAT"
git\-diff\-tree and git\-diff\-files can take \fI\-c\fR or \fI\-\-cc\fR option to produce \fIcombined diff\fR, which looks like this:
.sp
.nf
diff \-\-combined describe.c
index fabadb8,cc95eb0..4866510
\-\-\- a/describe.c
+++ b/describe.c
@@@ \-98,20 \-98,12 +98,20 @@@
        return (a_date > b_date) ? \-1 : (a_date == b_date) ? 0 : 1;
  }

\- static void describe(char *arg)
 \-static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  {
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) < 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) {
                initialized = 1;
                for_each_ref(get_name);
.fi
.TP 3
1.
It is preceded with a "git diff" header, that looks like this (when \fI\-c\fR option is used):
.sp
.nf
diff \-\-combined file
.fi
or like this (when \fI\-\-cc\fR option is used):
.sp
.nf
diff \-\-c file
.fi
.TP
2.
It is followed by one or more extended header lines (this example shows a merge with two parents):
.sp
.nf
index <hash>,<hash>..<hash>
mode <mode>,<mode>..<mode>
new file mode <mode>
deleted file mode <mode>,<mode>
.fi
The mode <mode>,<mode>..<mode> line appears only if at least one of the <mode> is different from the rest. Extended headers with information about detected contents movement (renames and copying detection) are designed to work with diff of two <tree\-ish> and are not used by combined diff format.
.TP
3.
It is followed by two\-line from\-file/to\-file header
.sp
.nf
\-\-\- a/file
+++ b/file
.fi
Similar to two\-line header for traditional \fIunified\fR diff format, /dev/null is used to signal created or deleted files.
.TP
4.
Chunk header format is modified to prevent people from accidentally feeding it to patch \-p1. Combined diff format was created for review of merge commit changes, and was not meant for apply. The change is similar to the change in the extended \fIindex\fR header:
.sp
.nf
@@@ <from\-file\-range> <from\-file\-range> <to\-file\-range> @@@
.fi
There are (number of parents + 1) @ characters in the chunk header for combined diff format.

Unlike the traditional \fIunified\fR diff format, which shows two files A and B with a single column that has \- (minus \(em appears in A but removed in B), + (plus \(em missing in A but added to B), or " " (space \(em unchanged) prefix, this format compares two or more files file1, file2,\&... with one file X, and shows how X differs from each of fileN. One column for each of fileN is prepended to the output line to note how X's line is different from it.

A \- character in the column N means that the line appears in fileN but it does not appear in the result. A + character in the column N means that the line appears in the last file, and fileN does not have that line (in other words, the line was added, from the point of view of that parent).

In the above example output, the function signature was changed from both files (hence two \- removals from both file1 and file2, plus ++ to mean one line that was added does not appear in either file1 nor file2). Also two other lines are the same from file1 but do not appear in file2 (hence prefixed with +).

When shown by git diff\-tree \-c, it compares the parents of a merge commit with the merge result (i.e. file1..fileN are the parents). When shown by git diff\-files \-c, it compares the two unresolved merge parents with the working tree file (i.e. file1 is stage 2 aka "our version", file2 is stage 3 aka "their version").
.SH "AUTHOR"
Written by Linus Torvalds <torvalds@osdl.org>
.SH "DOCUMENTATION"
Documentation by David Greaves, Junio C Hamano and the git\-list <git@vger.kernel.org>.
.SH "GIT"
Part of the \fBgit\fR(7) suite
.SH "REFERENCES"
.TP 3
1.\ diffcore documentation
\%diffcore.html
